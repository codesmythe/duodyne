// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2014 11:08:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    First
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module First_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Switch_1_0;
reg Switch_1_1;
reg Switch_1_2;
reg Switch_1_3;
reg Switch_1_4;
reg Switch_1_5;
reg Switch_1_6;
reg Switch_1_7;
reg Switch_2_0;
reg Switch_2_1;
reg Switch_2_2;
reg Switch_2_3;
reg Switch_2_4;
reg Switch_2_5;
reg Switch_2_6;
reg Switch_2_7;
// wires                                               
wire 100KHz;
wire CK;
wire CKDiv2;
wire CKDiv4;
wire CKDiv8;
wire CKDiv16;
wire Output_0;
wire Output_1;
wire Output_2;
wire Output_3;
wire Output_4;
wire Output_5;
wire Output_6;
wire Output_7;
wire Output_8;
wire Output_9;
wire Output_10;
wire Output_11;
wire Output_12;
wire Output_13;
wire Output_14;
wire Output_15;
wire Output_16;
wire Output_17;
wire Output_18;
wire Output_19;
wire Output_20;
wire Output_21;
wire Output_22;
wire Output_23;
wire Output_24;
wire Output_25;
wire Output_26;
wire Output_27;
wire Output_28;
wire Output_29;
wire Output_30;
wire Output_31;
wire Output_32;
wire Output_33;
wire Output_34;
wire Output_35;
wire Output_36;
wire Output_37;

// assign statements (if any)                          
First i1 (
// port map - connection between master ports and signals/registers   
	.\100KHz (100KHz),
	.CK(CK),
	.CKDiv2(CKDiv2),
	.CKDiv4(CKDiv4),
	.CKDiv8(CKDiv8),
	.CKDiv16(CKDiv16),
	.Clock(Clock),
	.Output_0(Output_0),
	.Output_1(Output_1),
	.Output_2(Output_2),
	.Output_3(Output_3),
	.Output_4(Output_4),
	.Output_5(Output_5),
	.Output_6(Output_6),
	.Output_7(Output_7),
	.Output_8(Output_8),
	.Output_9(Output_9),
	.Output_10(Output_10),
	.Output_11(Output_11),
	.Output_12(Output_12),
	.Output_13(Output_13),
	.Output_14(Output_14),
	.Output_15(Output_15),
	.Output_16(Output_16),
	.Output_17(Output_17),
	.Output_18(Output_18),
	.Output_19(Output_19),
	.Output_20(Output_20),
	.Output_21(Output_21),
	.Output_22(Output_22),
	.Output_23(Output_23),
	.Output_24(Output_24),
	.Output_25(Output_25),
	.Output_26(Output_26),
	.Output_27(Output_27),
	.Output_28(Output_28),
	.Output_29(Output_29),
	.Output_30(Output_30),
	.Output_31(Output_31),
	.Output_32(Output_32),
	.Output_33(Output_33),
	.Output_34(Output_34),
	.Output_35(Output_35),
	.Output_36(Output_36),
	.Output_37(Output_37),
	.Switch_1_0(Switch_1_0),
	.Switch_1_1(Switch_1_1),
	.Switch_1_2(Switch_1_2),
	.Switch_1_3(Switch_1_3),
	.Switch_1_4(Switch_1_4),
	.Switch_1_5(Switch_1_5),
	.Switch_1_6(Switch_1_6),
	.Switch_1_7(Switch_1_7),
	.Switch_2_0(Switch_2_0),
	.Switch_2_1(Switch_2_1),
	.Switch_2_2(Switch_2_2),
	.Switch_2_3(Switch_2_3),
	.Switch_2_4(Switch_2_4),
	.Switch_2_5(Switch_2_5),
	.Switch_2_6(Switch_2_6),
	.Switch_2_7(Switch_2_7)
);
initial 
begin 
#100000000 $finish;
end 
initial 
begin 
#100000000 $finish;
end 
endmodule

