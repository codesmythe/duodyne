Module: M:\Development\Vintage\8088 stuff\sbc-188\BIOS045\nvram.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT BYTE USE16 00001532 bytes
0000                          set_battery_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    52                        push        dx 
0003    56                        push        si 
0004    C8 56 00 00               enter       0x0056,0x00 
0008    B8 08 00                  mov         ax,0x0008 
000B    E8 00 00                  call        @rtc_get_loc 
000E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0011    30 E4                     xor         ah,ah 
0013    C1 F8 04                  sar         ax,0x04 
0016    3D 0A 00                  cmp         ax,0x000a 
0019    75 05                     jne         L$1 
001B    BE 01 00                  mov         si,0x0001 
001E    EB 02                     jmp         L$2 
0020                          L$1:
0020    31 F6                     xor         si,si 
0022                          L$2:
0022    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0025    30 E4                     xor         ah,ah 
0027    89 C2                     mov         dx,ax 
0029    C1 FA 02                  sar         dx,0x02 
002C    83 E2 03                  and         dx,0x0003 
002F    88 56 FC                  mov         byte ptr -0x4[bp],dl 
0032    24 03                     and         al,0x03 
0034    88 46 FE                  mov         byte ptr -0x2[bp],al 
0037    80 FA 01                  cmp         dl,0x01 
003A    74 05                     je          L$3 
003C    80 FA 02                  cmp         dl,0x02 
003F    75 05                     jne         L$4 
0041                          L$3:
0041    B8 01 00                  mov         ax,0x0001 
0044    EB 02                     jmp         L$5 
0046                          L$4:
0046    30 C0                     xor         al,al 
0048                          L$5:
0048    21 C6                     and         si,ax 
004A    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
004D    84 C0                     test        al,al 
004F    74 05                     je          L$6 
0051    B8 01 00                  mov         ax,0x0001 
0054    EB 02                     jmp         L$7 
0056                          L$6:
0056    30 E4                     xor         ah,ah 
0058                          L$7:
0058    21 C6                     and         si,ax 
005A    74 0A                     je          L$8 
005C    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
005F    B0 01                     mov         al,0x01 
0061    D2 E0                     shl         al,cl 
0063    88 46 FE                  mov         byte ptr -0x2[bp],al 
0066                          L$8:
0066    85 F6                     test        si,si 
0068    74 05                     je          L$9 
006A    B8 7D 00                  mov         ax,offset DGROUP:L$248 
006D    EB 03                     jmp         L$10 
006F                          L$9:
006F    B8 80 00                  mov         ax,offset DGROUP:L$249 
0072                          L$10:
0072    8C DB                     mov         bx,ds 
0074    53                        push        bx 
0075    50                        push        ax 
0076    1E                        push        ds 
0077    68 84 00                  push        offset DGROUP:L$250 
007A    E8 00 00                  call        _cprintf 
007D    83 C4 08                  add         sp,0x0008 
0080    85 F6                     test        si,si 
0082    74 38                     je          L$15 
0084    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0087    30 E4                     xor         ah,ah 
0089    50                        push        ax 
008A    3C 08                     cmp         al,0x08 
008C    75 05                     jne         L$11 
008E    B8 A7 00                  mov         ax,offset DGROUP:L$251 
0091    EB 03                     jmp         L$12 
0093                          L$11:
0093    B8 A9 00                  mov         ax,offset DGROUP:L$252 
0096                          L$12:
0096    8C DB                     mov         bx,ds 
0098    53                        push        bx 
0099    50                        push        ax 
009A    80 7E FC 01               cmp         byte ptr -0x4[bp],0x01 
009E    75 05                     jne         L$13 
00A0    B8 AA 00                  mov         ax,offset DGROUP:L$253 
00A3    EB 03                     jmp         L$14 
00A5                          L$13:
00A5    B8 AE 00                  mov         ax,offset DGROUP:L$254 
00A8                          L$14:
00A8    8C DB                     mov         bx,ds 
00AA    53                        push        bx 
00AB    50                        push        ax 
00AC    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
00AF    30 E4                     xor         ah,ah 
00B1    50                        push        ax 
00B2    1E                        push        ds 
00B3    68 B4 00                  push        offset DGROUP:L$255 
00B6    E8 00 00                  call        _cprintf 
00B9    83 C4 10                  add         sp,0x0010 
00BC                          L$15:
00BC    1E                        push        ds 
00BD    68 E8 00                  push        offset DGROUP:L$256 
00C0    E8 00 00                  call        _cprintf 
00C3    83 C4 04                  add         sp,0x0004 
00C6    BB 50 00                  mov         bx,0x0050 
00C9    8C D2                     mov         dx,ss 
00CB    8D 46 AA                  lea         ax,-0x56[bp] 
00CE    E8 00 00                  call        getline_ 
00D1    8A 46 AA                  mov         al,byte ptr -0x56[bp] 
00D4    84 C0                     test        al,al 
00D6    74 60                     je          L$23 
00D8    B1 2B                     mov         cl,0x2b 
00DA    8C D2                     mov         dx,ss 
00DC    8D 76 AA                  lea         si,-0x56[bp] 
00DF    1E                        push        ds 
00E0    8E DA                     mov         ds,dx 
00E2                          L$16:
00E2    8A 04                     mov         al,byte ptr [si] 
00E4    3A C1                     cmp         al,cl 
00E6    74 09                     je          L$17 
00E8    46                        inc         si 
00E9    3C 00                     cmp         al,0x00 
00EB    75 F5                     jne         L$16 
00ED    2B F6                     sub         si,si 
00EF    2B D2                     sub         dx,dx 
00F1                          L$17:
00F1    1F                        pop         ds 
00F2    89 F1                     mov         cx,si 
00F4    89 D3                     mov         bx,dx 
00F6    85 D2                     test        dx,dx 
00F8    75 04                     jne         L$18 
00FA    85 F6                     test        si,si 
00FC    74 09                     je          L$19 
00FE                          L$18:
00FE    8E C2                     mov         es,dx 
0100    26 C6 04 00               mov         byte ptr es:[si],0x00 
0104    8D 4C 01                  lea         cx,0x1[si] 
0107                          L$19:
0107    8C D2                     mov         dx,ss 
0109    8D 46 AA                  lea         ax,-0x56[bp] 
010C    E8 00 00                  call        atoi_ 
010F    88 46 FC                  mov         byte ptr -0x4[bp],al 
0112    85 DB                     test        bx,bx 
0114    75 04                     jne         L$20 
0116    85 C9                     test        cx,cx 
0118    74 0A                     je          L$21 
011A                          L$20:
011A    89 C8                     mov         ax,cx 
011C    89 DA                     mov         dx,bx 
011E    E8 00 00                  call        atoi_ 
0121    88 46 FE                  mov         byte ptr -0x2[bp],al 
0124                          L$21:
0124    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0127    3C 02                     cmp         al,0x02 
0129    74 08                     je          L$22 
012B    3C 04                     cmp         al,0x04 
012D    74 04                     je          L$22 
012F    3C 08                     cmp         al,0x08 
0131    75 08                     jne         L$24 
0133                          L$22:
0133    B8 01 00                  mov         ax,0x0001 
0136    EB 05                     jmp         L$25 
0138                          L$23:
0138    E9 9F 07                  jmp         L$112 
013B                          L$24:
013B    31 C0                     xor         ax,ax 
013D                          L$25:
013D    89 C2                     mov         dx,ax 
013F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0142    3C 01                     cmp         al,0x01 
0144    74 04                     je          L$26 
0146    3C 02                     cmp         al,0x02 
0148    75 05                     jne         L$27 
014A                          L$26:
014A    B8 01 00                  mov         ax,0x0001 
014D    EB 02                     jmp         L$28 
014F                          L$27:
014F    31 C0                     xor         ax,ax 
0151                          L$28:
0151    85 D2                     test        dx,dx 
0153    74 15                     je          L$29 
0155    85 C0                     test        ax,ax 
0157    74 11                     je          L$29 
0159    BE 01 00                  mov         si,0x0001 
015C    D0 6E FE                  shr         byte ptr -0x2[bp],0x01 
015F    80 7E FE 04               cmp         byte ptr -0x2[bp],0x04 
0163    75 1A                     jne         L$32 
0165    FE 4E FE                  dec         byte ptr -0x2[bp] 
0168    EB 15                     jmp         L$32 
016A                          L$29:
016A    80 7E FE 00               cmp         byte ptr -0x2[bp],0x00 
016E    74 09                     je          L$31 
0170    80 7E FC 00               cmp         byte ptr -0x4[bp],0x00 
0174    74 03                     je          L$31 
0176                          L$30:
0176    E9 43 FF                  jmp         L$15 
0179                          L$31:
0179    C6 46 FA 00               mov         byte ptr -0x6[bp],0x00 
017D    EB 12                     jmp         L$33 
017F                          L$32:
017F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0182    C0 E0 02                  shl         al,0x02 
0185    0A 46 FE                  or          al,byte ptr -0x2[bp] 
0188    0C A0                     or          al,0xa0 
018A    88 46 FA                  mov         byte ptr -0x6[bp],al 
018D    85 F6                     test        si,si 
018F    7C E5                     jl          L$30 
0191                          L$33:
0191    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0194    30 F6                     xor         dh,dh 
0196    B8 08 00                  mov         ax,0x0008 
0199    E8 00 00                  call        @rtc_set_loc 
019C    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
019F    EB 97                     jmp         L$23 

Routine Size: 417 bytes,    Routine Base: _TEXT + 0000

01A1                          idow_:
01A1    51                        push        cx 
01A2    56                        push        si 
01A3    57                        push        di 
01A4    C8 10 00 00               enter       0x0010,0x00 
01A8    50                        push        ax 
01A9    52                        push        dx 
01AA    89 DE                     mov         si,bx 
01AC    BB 64 00                  mov         bx,0x0064 
01AF    89 F0                     mov         ax,si 
01B1    99                        cwd         
01B2    F7 FB                     idiv        bx 
01B4    31 FF                     xor         di,di 
01B6                          L$34:
01B6    8A 85 00 00               mov         al,byte ptr _dpm0[di] 
01BA    88 43 F0                  mov         byte ptr -0x10[bp+di],al 
01BD    47                        inc         di 
01BE    83 FF 0C                  cmp         di,0x000c 
01C1    7C F3                     jl          L$34 
01C3    81 FE 2F 06               cmp         si,0x062f 
01C7    7C 19                     jl          L$35 
01C9    81 FE 0F 27               cmp         si,0x270f 
01CD    7F 13                     jg          L$35 
01CF    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
01D2    3D 01 00                  cmp         ax,0x0001 
01D5    7C 0B                     jl          L$35 
01D7    3D 0C 00                  cmp         ax,0x000c 
01DA    7F 06                     jg          L$35 
01DC    83 7E EE 01               cmp         word ptr -0x12[bp],0x0001 
01E0    7D 06                     jge         L$36 
01E2                          L$35:
01E2    B8 63 00                  mov         ax,0x0063 
01E5    E9 B4 00                  jmp         L$45 
01E8                          L$36:
01E8    89 D0                     mov         ax,dx 
01EA    C1 F8 0F                  sar         ax,0x0f 
01ED    89 D3                     mov         bx,dx 
01EF    31 C3                     xor         bx,ax 
01F1    29 C3                     sub         bx,ax 
01F3    83 E3 03                  and         bx,0x0003 
01F6    31 C3                     xor         bx,ax 
01F8    29 C3                     sub         bx,ax 
01FA    75 04                     jne         L$37 
01FC    85 D2                     test        dx,dx 
01FE    75 0C                     jne         L$38 
0200                          L$37:
0200    BB 90 01                  mov         bx,0x0190 
0203    89 F0                     mov         ax,si 
0205    99                        cwd         
0206    F7 FB                     idiv        bx 
0208    85 D2                     test        dx,dx 
020A    75 05                     jne         L$39 
020C                          L$38:
020C    BB 01 00                  mov         bx,0x0001 
020F    EB 02                     jmp         L$40 
0211                          L$39:
0211    31 DB                     xor         bx,bx 
0213                          L$40:
0213    89 5E FE                  mov         word ptr -0x2[bp],bx 
0216    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0219    00 46 FB                  add         byte ptr -0x5[bp],al 
021C    83 6E EC 03               sub         word ptr -0x14[bp],0x0003 
0220    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0224    7D 05                     jge         L$41 
0226    83 46 EC 0C               add         word ptr -0x14[bp],0x000c 
022A    4E                        dec         si 
022B                          L$41:
022B    8B 7E EC                  mov         di,word ptr -0x14[bp] 
022E    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
0231    30 E4                     xor         ah,ah 
0233    3B 46 EE                  cmp         ax,word ptr -0x12[bp] 
0236    7D 05                     jge         L$42 
0238    B8 62 00                  mov         ax,0x0062 
023B    EB 5F                     jmp         L$45 
023D                          L$42:
023D    BB 64 00                  mov         bx,0x0064 
0240    89 F0                     mov         ax,si 
0242    99                        cwd         
0243    F7 FB                     idiv        bx 
0245    89 46 FC                  mov         word ptr -0x4[bp],ax 
0248    89 F0                     mov         ax,si 
024A    99                        cwd         
024B    F7 FB                     idiv        bx 
024D    89 D6                     mov         si,dx 
024F    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0254                          L$43:
0254    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0257    3B 5E EC                  cmp         bx,word ptr -0x14[bp] 
025A    7D 0F                     jge         L$44 
025C    89 DF                     mov         di,bx 
025E    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
0261    30 E4                     xor         ah,ah 
0263    01 46 EE                  add         word ptr -0x12[bp],ax 
0266    FF 46 FE                  inc         word ptr -0x2[bp] 
0269    EB E9                     jmp         L$43 
026B                          L$44:
026B    6B 5E FC 05               imul        bx,word ptr -0x4[bp],0x0005 
026F    01 F3                     add         bx,si 
0271    89 F0                     mov         ax,si 
0273    99                        cwd         
0274    B1 02                     mov         cl,0x02 
0276    D3 E2                     shl         dx,cl 
0278    1B C2                     sbb         ax,dx 
027A    D3 F8                     sar         ax,cl 
027C    01 C3                     add         bx,ax 
027E    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0281    99                        cwd         
0282    B1 02                     mov         cl,0x02 
0284    D3 E2                     shl         dx,cl 
0286    1B C2                     sbb         ax,dx 
0288    D3 F8                     sar         ax,cl 
028A    01 D8                     add         ax,bx 
028C    40                        inc         ax 
028D    40                        inc         ax 
028E    01 46 EE                  add         word ptr -0x12[bp],ax 
0291    BB 07 00                  mov         bx,0x0007 
0294    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0297    99                        cwd         
0298    F7 FB                     idiv        bx 
029A    89 D0                     mov         ax,dx 
029C                          L$45:
029C    C9                        leave       
029D    5F                        pop         di 
029E    5E                        pop         si 
029F    59                        pop         cx 
02A0    C3                        ret         

Routine Size: 256 bytes,    Routine Base: _TEXT + 01A1

02A1                          Date_:
02A1    53                        push        bx 
02A2    51                        push        cx 
02A3    56                        push        si 
02A4    57                        push        di 
02A5    C8 72 00 00               enter       0x0072,0x00 
02A9    50                        push        ax 
02AA    52                        push        dx 
02AB    B8 03 00                  mov         ax,0x0003 
02AE    E8 00 00                  call        @rtc_get_loc 
02B1    88 46 F6                  mov         byte ptr -0xa[bp],al 
02B4    B8 04 00                  mov         ax,0x0004 
02B7    E8 00 00                  call        @rtc_get_loc 
02BA    88 46 F4                  mov         byte ptr -0xc[bp],al 
02BD    B8 05 00                  mov         ax,0x0005 
02C0    E8 00 00                  call        @rtc_get_loc 
02C3    88 46 FC                  mov         byte ptr -0x4[bp],al 
02C6    88 46 FA                  mov         byte ptr -0x6[bp],al 
02C9    B8 06 00                  mov         ax,0x0006 
02CC    E8 00 00                  call        @rtc_get_loc 
02CF    88 46 FE                  mov         byte ptr -0x2[bp],al 
02D2    B8 01 80                  mov         ax,0x8001 
02D5    E8 00 00                  call        @rtc_get_loc 
02D8    88 46 F8                  mov         byte ptr -0x8[bp],al 
02DB    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
02DE    3C 01                     cmp         al,0x01 
02E0    72 04                     jb          L$46 
02E2    3C 07                     cmp         al,0x07 
02E4    76 04                     jbe         L$47 
02E6                          L$46:
02E6    C6 46 FA 08               mov         byte ptr -0x6[bp],0x08 
02EA                          L$47:
02EA    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02ED    30 E4                     xor         ah,ah 
02EF    50                        push        ax 
02F0    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
02F3    50                        push        ax 
02F4    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
02F7    50                        push        ax 
02F8    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
02FB    50                        push        ax 
02FC    8A 5E FA                  mov         bl,byte ptr -0x6[bp] 
02FF    30 FF                     xor         bh,bh 
0301    C1 E3 02                  shl         bx,0x02 
0304    FF B7 FE FF               push        word ptr _dow-0x2[bx] 
0308    FF B7 FC FF               push        word ptr _dow-0x4[bx] 
030C    1E                        push        ds 
030D    68 13 01                  push        offset DGROUP:L$257 
0310    E8 00 00                  call        _cprintf 
0313    83 C4 10                  add         sp,0x0010 
0316    1E                        push        ds 
0317    68 36 01                  push        offset DGROUP:L$258 
031A    E8 00 00                  call        _cprintf 
031D    83 C4 04                  add         sp,0x0004 
0320    BB 50 00                  mov         bx,0x0050 
0323    8C D2                     mov         dx,ss 
0325    8D 46 8E                  lea         ax,-0x72[bp] 
0328    E8 00 00                  call        getline_ 
032B    8A 46 8E                  mov         al,byte ptr -0x72[bp] 
032E    84 C0                     test        al,al 
0330    75 05                     jne         L$48 
0332    30 E4                     xor         ah,ah 
0334    E9 D8 01                  jmp         L$65 
0337                          L$48:
0337    B1 2F                     mov         cl,0x2f 
0339    8C D2                     mov         dx,ss 
033B    8D 76 8E                  lea         si,-0x72[bp] 
033E    1E                        push        ds 
033F    8E DA                     mov         ds,dx 
0341                          L$49:
0341    8A 04                     mov         al,byte ptr [si] 
0343    3A C1                     cmp         al,cl 
0345    74 09                     je          L$50 
0347    46                        inc         si 
0348    3C 00                     cmp         al,0x00 
034A    75 F5                     jne         L$49 
034C    2B F6                     sub         si,si 
034E    2B D2                     sub         dx,dx 
0350                          L$50:
0350    1F                        pop         ds 
0351    89 56 E0                  mov         word ptr -0x20[bp],dx 
0354    85 D2                     test        dx,dx 
0356    75 09                     jne         L$52 
0358    85 F6                     test        si,si 
035A    75 05                     jne         L$52 
035C                          L$51:
035C    31 C0                     xor         ax,ax 
035E    E9 AE 01                  jmp         L$65 
0361                          L$52:
0361    8E C2                     mov         es,dx 
0363    26 C6 04 00               mov         byte ptr es:[si],0x00 
0367    8D 5C 01                  lea         bx,0x1[si] 
036A    8C D2                     mov         dx,ss 
036C    8D 46 8E                  lea         ax,-0x72[bp] 
036F    E8 00 00                  call        atoi_ 
0372    89 C7                     mov         di,ax 
0374    89 46 F2                  mov         word ptr -0xe[bp],ax 
0377    89 DE                     mov         si,bx 
0379    8B 56 E0                  mov         dx,word ptr -0x20[bp] 
037C    1E                        push        ds 
037D    8E DA                     mov         ds,dx 
037F                          L$53:
037F    8A 04                     mov         al,byte ptr [si] 
0381    3A C1                     cmp         al,cl 
0383    74 09                     je          L$54 
0385    46                        inc         si 
0386    3C 00                     cmp         al,0x00 
0388    75 F5                     jne         L$53 
038A    2B F6                     sub         si,si 
038C    2B D2                     sub         dx,dx 
038E                          L$54:
038E    1F                        pop         ds 
038F    89 56 E8                  mov         word ptr -0x18[bp],dx 
0392    85 D2                     test        dx,dx 
0394    75 04                     jne         L$55 
0396    85 F6                     test        si,si 
0398    74 C2                     je          L$51 
039A                          L$55:
039A    8E C2                     mov         es,dx 
039C    26 C6 04 00               mov         byte ptr es:[si],0x00 
03A0    8D 4C 01                  lea         cx,0x1[si] 
03A3    89 D8                     mov         ax,bx 
03A5    8B 56 E0                  mov         dx,word ptr -0x20[bp] 
03A8    E8 00 00                  call        atoi_ 
03AB    89 C3                     mov         bx,ax 
03AD    89 C6                     mov         si,ax 
03AF    89 C8                     mov         ax,cx 
03B1    8B 56 E8                  mov         dx,word ptr -0x18[bp] 
03B4    E8 00 00                  call        atoi_ 
03B7    89 46 DE                  mov         word ptr -0x22[bp],ax 
03BA    50                        push        ax 
03BB    53                        push        bx 
03BC    57                        push        di 
03BD    1E                        push        ds 
03BE    68 4A 01                  push        offset DGROUP:L$259 
03C1    E8 00 00                  call        _cprintf 
03C4    83 C4 0A                  add         sp,0x000a 
03C7    83 FF 64                  cmp         di,0x0064 
03CA    7D 16                     jge         L$56 
03CC    89 F8                     mov         ax,di 
03CE    99                        cwd         
03CF    BB 0A 00                  mov         bx,0x000a 
03D2    F7 FB                     idiv        bx 
03D4    89 C1                     mov         cx,ax 
03D6    C1 E1 04                  shl         cx,0x04 
03D9    89 F8                     mov         ax,di 
03DB    99                        cwd         
03DC    F7 FB                     idiv        bx 
03DE    09 D1                     or          cx,dx 
03E0    EB 03                     jmp         L$57 
03E2                          L$56:
03E2    B9 FF 00                  mov         cx,0x00ff 
03E5                          L$57:
03E5    88 4E F4                  mov         byte ptr -0xc[bp],cl 
03E8    83 FE 64                  cmp         si,0x0064 
03EB    7D 16                     jge         L$58 
03ED    89 F0                     mov         ax,si 
03EF    99                        cwd         
03F0    BB 0A 00                  mov         bx,0x000a 
03F3    F7 FB                     idiv        bx 
03F5    89 C1                     mov         cx,ax 
03F7    C1 E1 04                  shl         cx,0x04 
03FA    89 F0                     mov         ax,si 
03FC    99                        cwd         
03FD    F7 FB                     idiv        bx 
03FF    09 D1                     or          cx,dx 
0401    EB 03                     jmp         L$59 
0403                          L$58:
0403    B9 FF 00                  mov         cx,0x00ff 
0406                          L$59:
0406    88 4E F6                  mov         byte ptr -0xa[bp],cl 
0409    8B 46 DE                  mov         ax,word ptr -0x22[bp] 
040C    99                        cwd         
040D    BB 64 00                  mov         bx,0x0064 
0410    F7 FB                     idiv        bx 
0412    89 C1                     mov         cx,ax 
0414    39 D8                     cmp         ax,bx 
0416    7D 17                     jge         L$60 
0418    99                        cwd         
0419    BB 0A 00                  mov         bx,0x000a 
041C    F7 FB                     idiv        bx 
041E    89 C7                     mov         di,ax 
0420    C1 E7 04                  shl         di,0x04 
0423    89 C8                     mov         ax,cx 
0425    99                        cwd         
0426    F7 FB                     idiv        bx 
0428    09 D7                     or          di,dx 
042A    89 7E E4                  mov         word ptr -0x1c[bp],di 
042D    EB 05                     jmp         L$61 
042F                          L$60:
042F    C7 46 E4 FF 00            mov         word ptr -0x1c[bp],0x00ff 
0434                          L$61:
0434    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
0437    88 46 F8                  mov         byte ptr -0x8[bp],al 
043A    8B 46 DE                  mov         ax,word ptr -0x22[bp] 
043D    99                        cwd         
043E    BB 64 00                  mov         bx,0x0064 
0441    F7 FB                     idiv        bx 
0443    89 D1                     mov         cx,dx 
0445    39 DA                     cmp         dx,bx 
0447    7D 19                     jge         L$62 
0449    89 D0                     mov         ax,dx 
044B    99                        cwd         
044C    BB 0A 00                  mov         bx,0x000a 
044F    F7 FB                     idiv        bx 
0451    89 C7                     mov         di,ax 
0453    C1 E7 04                  shl         di,0x04 
0456    89 C8                     mov         ax,cx 
0458    99                        cwd         
0459    F7 FB                     idiv        bx 
045B    09 D7                     or          di,dx 
045D    89 7E E6                  mov         word ptr -0x1a[bp],di 
0460    EB 05                     jmp         L$63 
0462                          L$62:
0462    C7 46 E6 FF 00            mov         word ptr -0x1a[bp],0x00ff 
0467                          L$63:
0467    8B 5E DE                  mov         bx,word ptr -0x22[bp] 
046A    8B 56 F2                  mov         dx,word ptr -0xe[bp] 
046D    89 F0                     mov         ax,si 
046F    E8 00 00                  call        idow_ 
0472    3C 07                     cmp         al,0x07 
0474    76 10                     jbe         L$64 
0476    30 E4                     xor         ah,ah 
0478    50                        push        ax 
0479    1E                        push        ds 
047A    68 62 01                  push        offset DGROUP:L$260 
047D    E8 00 00                  call        _cprintf 
0480    83 C4 06                  add         sp,0x0006 
0483    E9 D6 FE                  jmp         L$51 
0486                          L$64:
0486    FE C0                     inc         al 
0488    88 46 FA                  mov         byte ptr -0x6[bp],al 
048B    88 46 EA                  mov         byte ptr -0x16[bp],al 
048E    C6 46 EB 00               mov         byte ptr -0x15[bp],0x00 
0492    FF 76 EA                  push        word ptr -0x16[bp] 
0495    8A 46 E6                  mov         al,byte ptr -0x1a[bp] 
0498    88 46 EC                  mov         byte ptr -0x14[bp],al 
049B    C6 46 ED 00               mov         byte ptr -0x13[bp],0x00 
049F    FF 76 EC                  push        word ptr -0x14[bp] 
04A2    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
04A5    88 46 EE                  mov         byte ptr -0x12[bp],al 
04A8    C6 46 EF 00               mov         byte ptr -0x11[bp],0x00 
04AC    FF 76 EE                  push        word ptr -0x12[bp] 
04AF    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
04B2    88 46 F0                  mov         byte ptr -0x10[bp],al 
04B5    C6 46 F1 00               mov         byte ptr -0xf[bp],0x00 
04B9    FF 76 F0                  push        word ptr -0x10[bp] 
04BC    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
04BF    88 46 E2                  mov         byte ptr -0x1e[bp],al 
04C2    C6 46 E3 00               mov         byte ptr -0x1d[bp],0x00 
04C6    FF 76 E2                  push        word ptr -0x1e[bp] 
04C9    1E                        push        ds 
04CA    68 84 01                  push        offset DGROUP:L$261 
04CD    E8 00 00                  call        _cprintf 
04D0    83 C4 0E                  add         sp,0x000e 
04D3    31 D2                     xor         dx,dx 
04D5    B8 07 00                  mov         ax,0x0007 
04D8    E8 00 00                  call        @rtc_set_loc 
04DB    8B 56 F0                  mov         dx,word ptr -0x10[bp] 
04DE    B8 03 00                  mov         ax,0x0003 
04E1    E8 00 00                  call        @rtc_set_loc 
04E4    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
04E7    B8 04 00                  mov         ax,0x0004 
04EA    E8 00 00                  call        @rtc_set_loc 
04ED    8B 56 EA                  mov         dx,word ptr -0x16[bp] 
04F0    B8 05 00                  mov         ax,0x0005 
04F3    E8 00 00                  call        @rtc_set_loc 
04F6    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
04F9    B8 06 00                  mov         ax,0x0006 
04FC    E8 00 00                  call        @rtc_set_loc 
04FF    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0502    8E 46 8A                  mov         es,word ptr -0x76[bp] 
0505    8B 5E 8C                  mov         bx,word ptr -0x74[bp] 
0508    26 88 47 01               mov         byte ptr es:0x1[bx],al 
050C    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
050F                          L$65:
050F    C9                        leave       
0510    5F                        pop         di 
0511                          L$66:
0511    5E                        pop         si 
0512    59                        pop         cx 
0513    5B                        pop         bx 
0514    C3                        ret         

Routine Size: 628 bytes,    Routine Base: _TEXT + 02A1

0515                          Time_:
0515    53                        push        bx 
0516    51                        push        cx 
0517    52                        push        dx 
0518    56                        push        si 
0519    57                        push        di 
051A    C8 5A 00 00               enter       0x005a,0x00 
051E    31 C0                     xor         ax,ax 
0520    E8 00 00                  call        @rtc_get_loc 
0523    88 46 F6                  mov         byte ptr -0xa[bp],al 
0526    C6 46 F7 00               mov         byte ptr -0x9[bp],0x00 
052A    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
052D    89 46 FA                  mov         word ptr -0x6[bp],ax 
0530    B8 01 00                  mov         ax,0x0001 
0533    E8 00 00                  call        @rtc_get_loc 
0536    88 46 FC                  mov         byte ptr -0x4[bp],al 
0539    C6 46 FD 00               mov         byte ptr -0x3[bp],0x00 
053D    8B 7E FC                  mov         di,word ptr -0x4[bp] 
0540    B8 02 00                  mov         ax,0x0002 
0543    E8 00 00                  call        @rtc_get_loc 
0546    88 C3                     mov         bl,al 
0548    30 FF                     xor         bh,bh 
054A    89 5E FE                  mov         word ptr -0x2[bp],bx 
054D    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
0551    74 0C                     je          L$67 
0553    1E                        push        ds 
0554    68 C0 01                  push        offset DGROUP:L$262 
0557    E8 00 00                  call        _cprintf 
055A    83 C4 04                  add         sp,0x0004 
055D    EB 0F                     jmp         L$68 
055F                          L$67:
055F    FF 76 F6                  push        word ptr -0xa[bp] 
0562    57                        push        di 
0563    53                        push        bx 
0564    1E                        push        ds 
0565    68 D7 01                  push        offset DGROUP:L$263 
0568    E8 00 00                  call        _cprintf 
056B    83 C4 0A                  add         sp,0x000a 
056E                          L$68:
056E    1E                        push        ds 
056F    68 F3 01                  push        offset DGROUP:L$264 
0572    E8 00 00                  call        _cprintf 
0575    83 C4 04                  add         sp,0x0004 
0578    BB 50 00                  mov         bx,0x0050 
057B    8C D2                     mov         dx,ss 
057D    8D 46 A6                  lea         ax,-0x5a[bp] 
0580    E8 00 00                  call        getline_ 
0583    80 7E A6 00               cmp         byte ptr -0x5a[bp],0x00 
0587    74 65                     je          L$74 
0589    B1 3A                     mov         cl,0x3a 
058B    8C D2                     mov         dx,ss 
058D    8D 76 A6                  lea         si,-0x5a[bp] 
0590    1E                        push        ds 
0591    8E DA                     mov         ds,dx 
0593                          L$69:
0593    8A 04                     mov         al,byte ptr [si] 
0595    3A C1                     cmp         al,cl 
0597    74 09                     je          L$70 
0599    46                        inc         si 
059A    3C 00                     cmp         al,0x00 
059C    75 F5                     jne         L$69 
059E    2B F6                     sub         si,si 
05A0    2B D2                     sub         dx,dx 
05A2                          L$70:
05A2    1F                        pop         ds 
05A3    89 D3                     mov         bx,dx 
05A5    85 D2                     test        dx,dx 
05A7    75 04                     jne         L$71 
05A9    85 F6                     test        si,si 
05AB    74 69                     je          L$78 
05AD                          L$71:
05AD    8E C2                     mov         es,dx 
05AF    26 C6 04 00               mov         byte ptr es:[si],0x00 
05B3    89 56 F8                  mov         word ptr -0x8[bp],dx 
05B6    8D 7C 01                  lea         di,0x1[si] 
05B9    8C D2                     mov         dx,ss 
05BB    8D 46 A6                  lea         ax,-0x5a[bp] 
05BE    E8 00 00                  call        atoi_ 
05C1    89 46 FE                  mov         word ptr -0x2[bp],ax 
05C4    89 FE                     mov         si,di 
05C6    89 DA                     mov         dx,bx 
05C8    1E                        push        ds 
05C9    8E DA                     mov         ds,dx 
05CB                          L$72:
05CB    8A 04                     mov         al,byte ptr [si] 
05CD    3A C1                     cmp         al,cl 
05CF    74 09                     je          L$73 
05D1    46                        inc         si 
05D2    3C 00                     cmp         al,0x00 
05D4    75 F5                     jne         L$72 
05D6    2B F6                     sub         si,si 
05D8    2B D2                     sub         dx,dx 
05DA                          L$73:
05DA    1F                        pop         ds 
05DB    89 F1                     mov         cx,si 
05DD    89 D3                     mov         bx,dx 
05DF    85 D2                     test        dx,dx 
05E1    75 0E                     jne         L$75 
05E3    85 F6                     test        si,si 
05E5    75 0A                     jne         L$75 
05E7    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
05EC    EB 0C                     jmp         L$76 
05EE                          L$74:
05EE    E9 E5 00                  jmp         L$87 
05F1                          L$75:
05F1    8E C2                     mov         es,dx 
05F3    26 C6 04 00               mov         byte ptr es:[si],0x00 
05F7    8D 4C 01                  lea         cx,0x1[si] 
05FA                          L$76:
05FA    89 F8                     mov         ax,di 
05FC    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
05FF    E8 00 00                  call        atoi_ 
0602    89 C7                     mov         di,ax 
0604    85 DB                     test        bx,bx 
0606    75 04                     jne         L$77 
0608    85 C9                     test        cx,cx 
060A    74 0A                     je          L$78 
060C                          L$77:
060C    89 C8                     mov         ax,cx 
060E    89 DA                     mov         dx,bx 
0610    E8 00 00                  call        atoi_ 
0613    89 46 FA                  mov         word ptr -0x6[bp],ax 
0616                          L$78:
0616    83 7E FE 17               cmp         word ptr -0x2[bp],0x0017 
061A    76 03                     jbe         L$80 
061C                          L$79:
061C    E9 4F FF                  jmp         L$68 
061F                          L$80:
061F    83 FF 3B                  cmp         di,0x003b 
0622    77 F8                     ja          L$79 
0624    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0627    3D 3B 00                  cmp         ax,0x003b 
062A    77 F0                     ja          L$79 
062C    50                        push        ax 
062D    57                        push        di 
062E    FF 76 FE                  push        word ptr -0x2[bp] 
0631    1E                        push        ds 
0632    68 07 02                  push        offset DGROUP:L$265 
0635    E8 00 00                  call        _cprintf 
0638    83 C4 0A                  add         sp,0x000a 
063B    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
063E    3D 64 00                  cmp         ax,0x0064 
0641    73 19                     jae         L$81 
0643    31 D2                     xor         dx,dx 
0645    BB 0A 00                  mov         bx,0x000a 
0648    F7 F3                     div         bx 
064A    89 C1                     mov         cx,ax 
064C    C1 E1 04                  shl         cx,0x04 
064F    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0652    31 D2                     xor         dx,dx 
0654    F7 F3                     div         bx 
0656    89 CB                     mov         bx,cx 
0658    09 D3                     or          bx,dx 
065A    EB 03                     jmp         L$82 
065C                          L$81:
065C    BB FF 00                  mov         bx,0x00ff 
065F                          L$82:
065F    88 DA                     mov         dl,bl 
0661    30 F6                     xor         dh,dh 
0663    89 56 FA                  mov         word ptr -0x6[bp],dx 
0666    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0669    80 CA 80                  or          dl,0x80 
066C    31 C0                     xor         ax,ax 
066E    E8 00 00                  call        @rtc_set_loc 
0671    83 FF 64                  cmp         di,0x0064 
0674    73 1B                     jae         L$83 
0676    89 F8                     mov         ax,di 
0678    31 D2                     xor         dx,dx 
067A    BB 0A 00                  mov         bx,0x000a 
067D    F7 F3                     div         bx 
067F    89 C3                     mov         bx,ax 
0681    C1 E3 04                  shl         bx,0x04 
0684    89 F8                     mov         ax,di 
0686    31 D2                     xor         dx,dx 
0688    B9 0A 00                  mov         cx,0x000a 
068B    F7 F1                     div         cx 
068D    09 D3                     or          bx,dx 
068F    EB 03                     jmp         L$84 
0691                          L$83:
0691    BB FF 00                  mov         bx,0x00ff 
0694                          L$84:
0694    88 DA                     mov         dl,bl 
0696    30 F6                     xor         dh,dh 
0698    B8 01 00                  mov         ax,0x0001 
069B    E8 00 00                  call        @rtc_set_loc 
069E    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
06A1    3D 64 00                  cmp         ax,0x0064 
06A4    73 19                     jae         L$85 
06A6    31 D2                     xor         dx,dx 
06A8    BB 0A 00                  mov         bx,0x000a 
06AB    F7 F3                     div         bx 
06AD    89 C1                     mov         cx,ax 
06AF    C1 E1 04                  shl         cx,0x04 
06B2    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
06B5    31 D2                     xor         dx,dx 
06B7    F7 F3                     div         bx 
06B9    89 CB                     mov         bx,cx 
06BB    09 D3                     or          bx,dx 
06BD    EB 03                     jmp         L$86 
06BF                          L$85:
06BF    BB FF 00                  mov         bx,0x00ff 
06C2                          L$86:
06C2    88 DA                     mov         dl,bl 
06C4    30 F6                     xor         dh,dh 
06C6    B8 02 00                  mov         ax,0x0002 
06C9    E8 00 00                  call        @rtc_set_loc 
06CC    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
06CF    30 F6                     xor         dh,dh 
06D1    31 C0                     xor         ax,ax 
06D3    E8 00 00                  call        @rtc_set_loc 
06D6                          L$87:
06D6    C9                        leave       
06D7    5F                        pop         di 
06D8    E9 00 02                  jmp         L$113 

Routine Size: 454 bytes,    Routine Base: _TEXT + 0515

06DB                          setup_serial_:
06DB    53                        push        bx 
06DC    51                        push        cx 
06DD    52                        push        dx 
06DE    56                        push        si 
06DF    57                        push        di 
06E0    C8 0E 00 00               enter       0x000e,0x00 
06E4    88 46 FE                  mov         byte ptr -0x2[bp],al 
06E7                          L$88:
06E7    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
06EA    30 FF                     xor         bh,bh 
06EC    C1 E3 02                  shl         bx,0x02 
06EF    FF B7 02 00               push        word ptr _rates+0x2[bx] 
06F3    FF B7 00 00               push        word ptr _rates[bx] 
06F7    1E                        push        ds 
06F8    68 1D 02                  push        offset DGROUP:L$266 
06FB    E8 00 00                  call        _cprintf 
06FE    83 C4 08                  add         sp,0x0008 
0701    BB 0A 00                  mov         bx,0x000a 
0704    8C D2                     mov         dx,ss 
0706    8D 46 F2                  lea         ax,-0xe[bp] 
0709    E8 00 00                  call        getline_ 
070C    80 7E F2 00               cmp         byte ptr -0xe[bp],0x00 
0710    74 07                     je          L$89 
0712    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0717    EB 0C                     jmp         L$91 
0719                          L$89:
0719    E9 79 00                  jmp         L$96 
071C                          L$90:
071C    FF 46 FC                  inc         word ptr -0x4[bp] 
071F    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
0723    7D 2D                     jge         L$94 
0725                          L$91:
0725    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0728    C1 E3 02                  shl         bx,0x02 
072B    C4 BF 00 00               les         di,dword ptr _rates[bx] 
072F    8C D6                     mov         si,ss 
0731    8D 46 F2                  lea         ax,-0xe[bp] 
0734    1E                        push        ds 
0735    96                        xchg        ax,si 
0736    8E D8                     mov         ds,ax 
0738                          L$92:
0738    AC                        lodsb       
0739    26 8A 25                  mov         ah,byte ptr es:[di] 
073C    2A C4                     sub         al,ah 
073E    75 05                     jne         L$93 
0740    47                        inc         di 
0741    3A C4                     cmp         al,ah 
0743    75 F3                     jne         L$92 
0745                          L$93:
0745    18 E4                     sbb         ah,ah 
0747    1F                        pop         ds 
0748    85 C0                     test        ax,ax 
074A    75 D0                     jne         L$90 
074C    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
074F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0752                          L$94:
0752    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
0756    75 3D                     jne         L$96 
0758    1E                        push        ds 
0759    68 44 02                  push        offset DGROUP:L$267 
075C    E8 00 00                  call        _cprintf 
075F    83 C4 04                  add         sp,0x0004 
0762    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0767                          L$95:
0767    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
076A    C1 E3 02                  shl         bx,0x02 
076D    FF B7 02 00               push        word ptr _rates+0x2[bx] 
0771    FF B7 00 00               push        word ptr _rates[bx] 
0775    1E                        push        ds 
0776    68 6D 02                  push        offset DGROUP:L$268 
0779    E8 00 00                  call        _cprintf 
077C    83 C4 08                  add         sp,0x0008 
077F    FF 46 FC                  inc         word ptr -0x4[bp] 
0782    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
0786    7C DF                     jl          L$95 
0788    1E                        push        ds 
0789    68 71 02                  push        offset DGROUP:L$269 
078C    E8 00 00                  call        _cprintf 
078F    83 C4 04                  add         sp,0x0004 
0792    E9 52 FF                  jmp         L$88 
0795                          L$96:
0795    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0798    E9 3B FF                  jmp         L$87 

Routine Size: 192 bytes,    Routine Base: _TEXT + 06DB

079B                          floppy_ask_:
079B    51                        push        cx 
079C    56                        push        si 
079D    57                        push        di 
079E    C8 1A 00 00               enter       0x001a,0x00 
07A2    89 C6                     mov         si,ax 
07A4    89 D7                     mov         di,dx 
07A6    89 5E FA                  mov         word ptr -0x6[bp],bx 
07A9    8D 47 02                  lea         ax,0x2[bx] 
07AC    01 C6                     add         si,ax 
07AE    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
07B1    04 41                     add         al,0x41 
07B3    88 46 FC                  mov         byte ptr -0x4[bp],al 
07B6                          L$97:
07B6    8E C7                     mov         es,di 
07B8    26 8A 04                  mov         al,byte ptr es:[si] 
07BB    24 0F                     and         al,0x0f 
07BD    88 46 FE                  mov         byte ptr -0x2[bp],al 
07C0    30 E4                     xor         ah,ah 
07C2    50                        push        ax 
07C3    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
07C6    50                        push        ax 
07C7    1E                        push        ds 
07C8    68 73 02                  push        offset DGROUP:L$270 
07CB    E8 00 00                  call        _cprintf 
07CE    83 C4 08                  add         sp,0x0008 
07D1    BB 14 00                  mov         bx,0x0014 
07D4    8C D2                     mov         dx,ss 
07D6    8D 46 E6                  lea         ax,-0x1a[bp] 
07D9    E8 00 00                  call        getline_ 
07DC    80 7E E6 00               cmp         byte ptr -0x1a[bp],0x00 
07E0    74 0B                     je          L$98 
07E2    8C D2                     mov         dx,ss 
07E4    8D 46 E6                  lea         ax,-0x1a[bp] 
07E7    E8 00 00                  call        atoi_ 
07EA    88 46 FE                  mov         byte ptr -0x2[bp],al 
07ED                          L$98:
07ED    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
07F0    B8 01 00                  mov         ax,0x0001 
07F3    D3 E0                     shl         ax,cl 
07F5    85 06 00 00               test        word ptr _ftype_OK,ax 
07F9    74 BB                     je          L$97 
07FB    8E C7                     mov         es,di 
07FD    26 88 0C                  mov         byte ptr es:[si],cl 
0800    84 C9                     test        cl,cl 
0802    75 0A                     jne         L$99 
0804    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
0808    75 04                     jne         L$99 
080A    26 88 4C 01               mov         byte ptr es:0x1[si],cl 
080E                          L$99:
080E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0811    30 E4                     xor         ah,ah 
0813    E9 86 FA                  jmp         L$45 

Routine Size: 123 bytes,    Routine Base: _TEXT + 079B

0816                          Floppy_:
0816    53                        push        bx 
0817    51                        push        cx 
0818    56                        push        si 
0819    57                        push        di 
081A    C8 02 00 00               enter       0x0002,0x00 
081E    89 C7                     mov         di,ax 
0820    89 56 FE                  mov         word ptr -0x2[bp],dx 
0823    31 F6                     xor         si,si 
0825    1E                        push        ds 
0826    68 8E 02                  push        offset DGROUP:L$271 
0829    E8 00 00                  call        _cprintf 
082C    83 C4 04                  add         sp,0x0004 
082F    31 C9                     xor         cx,cx 
0831    EB 0C                     jmp         L$101 
0833                          L$100:
0833    01 C6                     add         si,ax 
0835    41                        inc         cx 
0836    85 D2                     test        dx,dx 
0838    74 1A                     je          L$102 
083A    83 F9 02                  cmp         cx,0x0002 
083D    7D 15                     jge         L$102 
083F                          L$101:
083F    89 CB                     mov         bx,cx 
0841    89 F8                     mov         ax,di 
0843    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
0846    E8 00 00                  call        floppy_ask_ 
0849    89 C2                     mov         dx,ax 
084B    85 C0                     test        ax,ax 
084D    74 E4                     je          L$100 
084F    B8 01 00                  mov         ax,0x0001 
0852    EB DF                     jmp         L$100 
0854                          L$102:
0854    83 FE 01                  cmp         si,0x0001 
0857    76 06                     jbe         L$103 
0859    1E                        push        ds 
085A    68 01 03                  push        offset DGROUP:L$272 
085D    EB 0B                     jmp         L$106 
085F                          L$103:
085F    85 F6                     test        si,si 
0861    75 03                     jne         L$105 
0863                          L$104:
0863    E9 A9 FC                  jmp         L$65 
0866                          L$105:
0866    1E                        push        ds 
0867    68 46 03                  push        offset DGROUP:L$273 
086A                          L$106:
086A    E8 00 00                  call        _cprintf 
086D    83 C4 04                  add         sp,0x0004 
0870    EB F1                     jmp         L$104 

Routine Size: 92 bytes,    Routine Base: _TEXT + 0816

0872                          @nvram_check:
0872    56                        push        si 
0873    C8 02 00 00               enter       0x0002,0x00 
0877    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
087B    31 F6                     xor         si,si 
087D                          L$107:
087D    89 F0                     mov         ax,si 
087F    80 CC 80                  or          ah,0x80 
0882    E8 00 00                  call        @rtc_get_loc 
0885    00 46 FE                  add         byte ptr -0x2[bp],al 
0888    46                        inc         si 
0889    83 FE 1F                  cmp         si,0x001f 
088C    7C EF                     jl          L$107 
088E    80 7E FE 5A               cmp         byte ptr -0x2[bp],0x5a 
0892    75 05                     jne         L$108 
0894    31 C0                     xor         ax,ax 
0896    C9                        leave       
0897    5E                        pop         si 
0898    C3                        ret         
0899                          L$108:
0899    B8 01 00                  mov         ax,0x0001 
089C    C9                        leave       
089D    5E                        pop         si 
089E    C3                        ret         

Routine Size: 45 bytes,    Routine Base: _TEXT + 0872

089F                          setup_fixed_:
089F    53                        push        bx 
08A0    51                        push        cx 
08A1    52                        push        dx 
08A2    56                        push        si 
08A3    C8 14 00 00               enter       0x0014,0x00 
08A7    89 C6                     mov         si,ax 
08A9                          L$109:
08A9    56                        push        si 
08AA    1E                        push        ds 
08AB    68 7B 03                  push        offset DGROUP:L$274 
08AE    E8 00 00                  call        _cprintf 
08B1    83 C4 06                  add         sp,0x0006 
08B4    BB 14 00                  mov         bx,0x0014 
08B7    8C D2                     mov         dx,ss 
08B9    8D 46 EC                  lea         ax,-0x14[bp] 
08BC    E8 00 00                  call        getline_ 
08BF    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
08C3    74 0A                     je          L$110 
08C5    8C D2                     mov         dx,ss 
08C7    8D 46 EC                  lea         ax,-0x14[bp] 
08CA    E8 00 00                  call        atoi_ 
08CD    89 C6                     mov         si,ax 
08CF                          L$110:
08CF    85 F6                     test        si,si 
08D1    7C D6                     jl          L$109 
08D3    83 FE 02                  cmp         si,0x0002 
08D6    7F D1                     jg          L$109 
08D8                          L$111:
08D8    89 F0                     mov         ax,si 
08DA                          L$112:
08DA    C9                        leave       
08DB                          L$113:
08DB    5E                        pop         si 
08DC    5A                        pop         dx 
08DD    59                        pop         cx 
08DE    5B                        pop         bx 
08DF    C3                        ret         

Routine Size: 65 bytes,    Routine Base: _TEXT + 089F

08E0                          setup_dide_:
08E0    53                        push        bx 
08E1    51                        push        cx 
08E2    56                        push        si 
08E3    57                        push        di 
08E4    C8 14 00 00               enter       0x0014,0x00 
08E8    89 C6                     mov         si,ax 
08EA    89 D7                     mov         di,dx 
08EC                          L$114:
08EC    56                        push        si 
08ED    85 FF                     test        di,di 
08EF    75 05                     jne         L$115 
08F1    BA AF 03                  mov         dx,offset DGROUP:L$275 
08F4    EB 03                     jmp         L$116 
08F6                          L$115:
08F6    BA B1 03                  mov         dx,offset DGROUP:L$276 
08F9                          L$116:
08F9    8C D8                     mov         ax,ds 
08FB    50                        push        ax 
08FC    52                        push        dx 
08FD    1E                        push        ds 
08FE    68 B3 03                  push        offset DGROUP:L$277 
0901    E8 00 00                  call        _cprintf 
0904    83 C4 0A                  add         sp,0x000a 
0907    BB 14 00                  mov         bx,0x0014 
090A    8C D2                     mov         dx,ss 
090C    8D 46 EC                  lea         ax,-0x14[bp] 
090F    E8 00 00                  call        getline_ 
0912    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
0916    74 0A                     je          L$117 
0918    8C D2                     mov         dx,ss 
091A    8D 46 EC                  lea         ax,-0x14[bp] 
091D    E8 00 00                  call        atoi_ 
0920    89 C6                     mov         si,ax 
0922                          L$117:
0922    85 F6                     test        si,si 
0924    7C C6                     jl          L$114 
0926    83 FE 02                  cmp         si,0x0002 
0929    7F C1                     jg          L$114 
092B    89 F0                     mov         ax,si 
092D    E9 DF FB                  jmp         L$65 

Routine Size: 80 bytes,    Routine Base: _TEXT + 08E0

0930                          setup_SDcard_:
0930    53                        push        bx 
0931    51                        push        cx 
0932    52                        push        dx 
0933    56                        push        si 
0934    C8 14 00 00               enter       0x0014,0x00 
0938    89 C6                     mov         si,ax 
093A                          L$118:
093A    56                        push        si 
093B    1E                        push        ds 
093C    68 ED 03                  push        offset DGROUP:L$278 
093F    E8 00 00                  call        _cprintf 
0942    83 C4 06                  add         sp,0x0006 
0945    BB 14 00                  mov         bx,0x0014 
0948    8C D2                     mov         dx,ss 
094A    8D 46 EC                  lea         ax,-0x14[bp] 
094D    E8 00 00                  call        getline_ 
0950    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
0954    74 0A                     je          L$119 
0956    8C D2                     mov         dx,ss 
0958    8D 46 EC                  lea         ax,-0x14[bp] 
095B    E8 00 00                  call        atoi_ 
095E    89 C6                     mov         si,ax 
0960                          L$119:
0960    85 F6                     test        si,si 
0962    7C D6                     jl          L$118 
0964    83 FE 02                  cmp         si,0x0002 
0967    7F D1                     jg          L$118 
0969    E9 6C FF                  jmp         L$111 

Routine Size: 60 bytes,    Routine Base: _TEXT + 0930

096C                          setup_boot_sig_check_:
096C    53                        push        bx 
096D    51                        push        cx 
096E    52                        push        dx 
096F    56                        push        si 
0970    C8 14 00 00               enter       0x0014,0x00 
0974    50                        push        ax 
0975    F6 46 EA 02               test        byte ptr -0x16[bp],0x02 
0979    75 05                     jne         L$120 
097B    BE 01 00                  mov         si,0x0001 
097E    EB 02                     jmp         L$121 
0980                          L$120:
0980    31 F6                     xor         si,si 
0982                          L$121:
0982    85 F6                     test        si,si 
0984    74 05                     je          L$123 
0986                          L$122:
0986    BA 17 04                  mov         dx,offset DGROUP:L$279 
0989    EB 03                     jmp         L$124 
098B                          L$123:
098B    BA 1B 04                  mov         dx,offset DGROUP:L$280 
098E                          L$124:
098E    8C D8                     mov         ax,ds 
0990    50                        push        ax 
0991    52                        push        dx 
0992    1E                        push        ds 
0993    68 1F 04                  push        offset DGROUP:L$281 
0996    E8 00 00                  call        _cprintf 
0999    83 C4 08                  add         sp,0x0008 
099C    BB 14 00                  mov         bx,0x0014 
099F    8C D2                     mov         dx,ss 
09A1    8D 46 EC                  lea         ax,-0x14[bp] 
09A4    E8 00 00                  call        getline_ 
09A7    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
09AA    84 C0                     test        al,al 
09AC    74 21                     je          L$127 
09AE    3C 4E                     cmp         al,0x4e 
09B0    72 10                     jb          L$125 
09B2    76 24                     jbe         L$128 
09B4    3C 79                     cmp         al,0x79 
09B6    74 26                     je          L$129 
09B8    3C 6E                     cmp         al,0x6e 
09BA    74 1C                     je          L$128 
09BC    3C 59                     cmp         al,0x59 
09BE    74 1E                     je          L$129 
09C0    EB 08                     jmp         L$126 
09C2                          L$125:
09C2    3C 31                     cmp         al,0x31 
09C4    74 18                     je          L$129 
09C6    3C 30                     cmp         al,0x30 
09C8    74 0E                     je          L$128 
09CA                          L$126:
09CA    BE 02 00                  mov         si,0x0002 
09CD    EB B7                     jmp         L$122 
09CF                          L$127:
09CF    83 FE 01                  cmp         si,0x0001 
09D2    77 AE                     ja          L$121 
09D4    85 F6                     test        si,si 
09D6    75 06                     jne         L$129 
09D8                          L$128:
09D8    80 4E EA 02               or          byte ptr -0x16[bp],0x02 
09DC    EB 04                     jmp         L$130 
09DE                          L$129:
09DE    80 66 EA FD               and         byte ptr -0x16[bp],0xfd 
09E2                          L$130:
09E2    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
09E5    E9 F2 FE                  jmp         L$112 

Routine Size: 124 bytes,    Routine Base: _TEXT + 096C

09E8                          putstring_:
09E8    51                        push        cx 
09E9    56                        push        si 
09EA    57                        push        di 
09EB    C8 82 00 00               enter       0x0082,0x00 
09EF    89 C6                     mov         si,ax 
09F1    89 56 FE                  mov         word ptr -0x2[bp],dx 
09F4    89 DA                     mov         dx,bx 
09F6    8C D7                     mov         di,ss 
09F8    8D 9E 7E FF               lea         bx,-0x82[bp] 
09FC    31 C0                     xor         ax,ax 
09FE                          L$131:
09FE    39 D0                     cmp         ax,dx 
0A00    7D 1F                     jge         L$132 
0A02    46                        inc         si 
0A03    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A06    26 8A 0C                  mov         cl,byte ptr es:[si] 
0A09    8E C7                     mov         es,di 
0A0B    26 88 0F                  mov         byte ptr es:[bx],cl 
0A0E    43                        inc         bx 
0A0F    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A12    26 8A 4C FF               mov         cl,byte ptr es:-0x1[si] 
0A16    8E C7                     mov         es,di 
0A18    26 88 0F                  mov         byte ptr es:[bx],cl 
0A1B    43                        inc         bx 
0A1C    46                        inc         si 
0A1D    40                        inc         ax 
0A1E    40                        inc         ax 
0A1F    EB DD                     jmp         L$131 
0A21                          L$132:
0A21    8E C7                     mov         es,di 
0A23    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A27    8E C7                     mov         es,di 
0A29                          L$133:
0A29    8D 86 7E FF               lea         ax,-0x82[bp] 
0A2D    39 C3                     cmp         bx,ax 
0A2F    76 0E                     jbe         L$134 
0A31    26 80 7F FF 20            cmp         byte ptr es:-0x1[bx],0x20 
0A36    77 07                     ja          L$134 
0A38    4B                        dec         bx 
0A39    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A3D    EB EA                     jmp         L$133 
0A3F                          L$134:
0A3F    8C D7                     mov         di,ss 
0A41    8D 9E 7E FF               lea         bx,-0x82[bp] 
0A45    8E C7                     mov         es,di 
0A47                          L$135:
0A47    26 8A 07                  mov         al,byte ptr es:[bx] 
0A4A    84 C0                     test        al,al 
0A4C    74 07                     je          L$136 
0A4E    3C 20                     cmp         al,0x20 
0A50    77 03                     ja          L$136 
0A52    43                        inc         bx 
0A53    EB F2                     jmp         L$135 
0A55                          L$136:
0A55    57                        push        di 
0A56    53                        push        bx 
0A57    1E                        push        ds 
0A58    68 3F 04                  push        offset DGROUP:L$282 
0A5B    E8 00 00                  call        _cprintf 
0A5E    83 C4 08                  add         sp,0x0008 
0A61    E9 38 F8                  jmp         L$45 

Routine Size: 124 bytes,    Routine Base: _TEXT + 09E8

0A64                          p_bda_fx_:
0A64    53                        push        bx 
0A65    51                        push        cx 
0A66    56                        push        si 
0A67    C8 02 00 00               enter       0x0002,0x00 
0A6B    88 C1                     mov         cl,al 
0A6D    A1 00 00                  mov         ax,word ptr _bios_data_area_ptr 
0A70    8B 36 02 00               mov         si,word ptr _bios_data_area_ptr+0x2 
0A74    05 B0 00                  add         ax,0x00b0 
0A77    80 F9 80                  cmp         cl,0x80 
0A7A    75 05                     jne         L$137 
0A7C    BB 04 01                  mov         bx,0x0104 
0A7F    EB 0C                     jmp         L$139 
0A81                          L$137:
0A81    80 F9 81                  cmp         cl,0x81 
0A84    75 05                     jne         L$138 
0A86    BB 18 01                  mov         bx,0x0118 
0A89    EB 02                     jmp         L$139 
0A8B                          L$138:
0A8B    31 DB                     xor         bx,bx 
0A8D                          L$139:
0A8D    31 D2                     xor         dx,dx 
0A8F    80 E1 0F                  and         cl,0x0f 
0A92    88 4E FE                  mov         byte ptr -0x2[bp],cl 
0A95    C6 46 FF 00               mov         byte ptr -0x1[bp],0x00 
0A99    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0A9C    C1 E1 04                  shl         cx,0x04 
0A9F    01 C8                     add         ax,cx 
0AA1    89 D1                     mov         cx,dx 
0AA3    09 D9                     or          cx,bx 
0AA5    74 09                     je          L$140 
0AA7    8E C2                     mov         es,dx 
0AA9    26 89 07                  mov         word ptr es:[bx],ax 
0AAC    26 89 77 02               mov         word ptr es:0x2[bx],si 
0AB0                          L$140:
0AB0    89 F2                     mov         dx,si 
0AB2    C9                        leave       
0AB3    E9 5B FA                  jmp         L$66 

Routine Size: 82 bytes,    Routine Base: _TEXT + 0A64

0AB6                          @setup_fixed_disk:
0AB6    56                        push        si 
0AB7    57                        push        di 
0AB8    C8 14 02 00               enter       0x0214,0x00 
0ABC    88 C6                     mov         dh,al 
0ABE    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0AC1    88 5E F8                  mov         byte ptr -0x8[bp],bl 
0AC4    8A 46 08                  mov         al,byte ptr 0x8[bp] 
0AC7    C0 E0 04                  shl         al,0x04 
0ACA    88 46 FC                  mov         byte ptr -0x4[bp],al 
0ACD    88 D0                     mov         al,dl 
0ACF    30 E4                     xor         ah,ah 
0AD1    50                        push        ax 
0AD2    88 F0                     mov         al,dh 
0AD4    50                        push        ax 
0AD5    80 FB 02                  cmp         bl,0x02 
0AD8    75 05                     jne         L$141 
0ADA    BA 42 04                  mov         dx,offset DGROUP:L$283 
0ADD    EB 0D                     jmp         L$143 
0ADF                          L$141:
0ADF    80 FB 04                  cmp         bl,0x04 
0AE2    75 05                     jne         L$142 
0AE4    BA 48 04                  mov         dx,offset DGROUP:L$284 
0AE7    EB 03                     jmp         L$143 
0AE9                          L$142:
0AE9    BA 4E 04                  mov         dx,offset DGROUP:L$285 
0AEC                          L$143:
0AEC    8C D8                     mov         ax,ds 
0AEE    50                        push        ax 
0AEF    52                        push        dx 
0AF0    1E                        push        ds 
0AF1    68 54 04                  push        offset DGROUP:L$286 
0AF4    E8 00 00                  call        _cprintf 
0AF7    83 C4 0C                  add         sp,0x000c 
0AFA    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0AFD    3C 02                     cmp         al,0x02 
0AFF    75 14                     jne         L$144 
0B01    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0B04    30 E4                     xor         ah,ah 
0B06    50                        push        ax 
0B07    8D 96 EC FD               lea         dx,-0x214[bp] 
0B0B    16                        push        ss 
0B0C    52                        push        dx 
0B0D    E8 00 00                  call        _PPIDE_READ_ID 
0B10    83 C4 06                  add         sp,0x0006 
0B13    EB 1D                     jmp         L$145 
0B15                          L$144:
0B15    30 E4                     xor         ah,ah 
0B17    2D 04 00                  sub         ax,0x0004 
0B1A    99                        cwd         
0B1B    2B C2                     sub         ax,dx 
0B1D    D1 F8                     sar         ax,0x01 
0B1F    30 E4                     xor         ah,ah 
0B21    50                        push        ax 
0B22    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0B25    50                        push        ax 
0B26    8D 96 EC FD               lea         dx,-0x214[bp] 
0B2A    16                        push        ss 
0B2B    52                        push        dx 
0B2C    E8 00 00                  call        _DIDE_READ_ID 
0B2F    83 C4 08                  add         sp,0x0008 
0B32                          L$145:
0B32    1E                        push        ds 
0B33    68 74 04                  push        offset DGROUP:L$287 
0B36    E8 00 00                  call        _cprintf 
0B39    83 C4 04                  add         sp,0x0004 
0B3C    BB 28 00                  mov         bx,0x0028 
0B3F    8C D2                     mov         dx,ss 
0B41    8D 86 22 FE               lea         ax,-0x1de[bp] 
0B45    E8 00 00                  call        putstring_ 
0B48    1E                        push        ds 
0B49    68 7C 04                  push        offset DGROUP:L$288 
0B4C    E8 00 00                  call        _cprintf 
0B4F    83 C4 04                  add         sp,0x0004 
0B52    BB 14 00                  mov         bx,0x0014 
0B55    8C D2                     mov         dx,ss 
0B57    8D 86 00 FE               lea         ax,-0x200[bp] 
0B5B    E8 00 00                  call        putstring_ 
0B5E    1E                        push        ds 
0B5F    68 86 04                  push        offset DGROUP:L$289 
0B62    E8 00 00                  call        _cprintf 
0B65    83 C4 04                  add         sp,0x0004 
0B68    BB 08 00                  mov         bx,0x0008 
0B6B    8C D2                     mov         dx,ss 
0B6D    8D 86 1A FE               lea         ax,-0x1e6[bp] 
0B71    E8 00 00                  call        putstring_ 
0B74    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0B79    74 05                     je          L$146 
0B7B    BA A9 00                  mov         dx,offset DGROUP:L$252 
0B7E    EB 03                     jmp         L$147 
0B80                          L$146:
0B80    BA 92 04                  mov         dx,offset DGROUP:L$290 
0B83                          L$147:
0B83    8C D8                     mov         ax,ds 
0B85    50                        push        ax 
0B86    52                        push        dx 
0B87    FF B6 F8 FD               push        word ptr -0x208[bp] 
0B8B    FF B6 F2 FD               push        word ptr -0x20e[bp] 
0B8F    FF B6 EE FD               push        word ptr -0x212[bp] 
0B93    1E                        push        ds 
0B94    68 96 04                  push        offset DGROUP:L$291 
0B97    E8 00 00                  call        _cprintf 
0B9A    83 C4 0E                  add         sp,0x000e 
0B9D    FF B6 60 FE               push        word ptr -0x1a0[bp] 
0BA1    FF B6 5E FE               push        word ptr -0x1a2[bp] 
0BA5    FF B6 5C FE               push        word ptr -0x1a4[bp] 
0BA9    FF B6 5A FE               push        word ptr -0x1a6[bp] 
0BAD    FF B6 58 FE               push        word ptr -0x1a8[bp] 
0BB1    1E                        push        ds 
0BB2    68 C1 04                  push        offset DGROUP:L$292 
0BB5    E8 00 00                  call        _cprintf 
0BB8    83 C4 0E                  add         sp,0x000e 
0BBB    FF B6 66 FE               push        word ptr -0x19a[bp] 
0BBF    FF B6 64 FE               push        word ptr -0x19c[bp] 
0BC3    1E                        push        ds 
0BC4    68 E7 04                  push        offset DGROUP:L$293 
0BC7    E8 00 00                  call        _cprintf 
0BCA    83 C4 08                  add         sp,0x0008 
0BCD    FF B6 B6 FE               push        word ptr -0x14a[bp] 
0BD1    FF B6 B4 FE               push        word ptr -0x14c[bp] 
0BD5    FF B6 BA FE               push        word ptr -0x146[bp] 
0BD9    FF B6 B8 FE               push        word ptr -0x148[bp] 
0BDD    1E                        push        ds 
0BDE    68 F9 04                  push        offset DGROUP:L$294 
0BE1    E8 00 00                  call        _cprintf 
0BE4    83 C4 0C                  add         sp,0x000c 
0BE7    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0BEA    30 E4                     xor         ah,ah 
0BEC    E8 00 00                  call        p_bda_fx_ 
0BEF    89 C3                     mov         bx,ax 
0BF1    8E C2                     mov         es,dx 
0BF3    89 C6                     mov         si,ax 
0BF5    89 56 F4                  mov         word ptr -0xc[bp],dx 
0BF8    8B BE EE FD               mov         di,word ptr -0x212[bp] 
0BFC    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0C01    26 89 7F 09               mov         word ptr es:0x9[bx],di 
0C05    8B 86 F2 FD               mov         ax,word ptr -0x20e[bp] 
0C09    89 46 F2                  mov         word ptr -0xe[bp],ax 
0C0C    8A 86 F2 FD               mov         al,byte ptr -0x20e[bp] 
0C10    26 88 47 0B               mov         byte ptr es:0xb[bx],al 
0C14    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
0C18    89 46 F0                  mov         word ptr -0x10[bp],ax 
0C1B    8A 86 F8 FD               mov         al,byte ptr -0x208[bp] 
0C1F    26 88 47 04               mov         byte ptr es:0x4[bx],al 
0C23    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0C26    84 C0                     test        al,al 
0C28    74 05                     je          L$148 
0C2A    B8 10 00                  mov         ax,0x0010 
0C2D    EB 02                     jmp         L$149 
0C2F                          L$148:
0C2F    30 E4                     xor         ah,ah 
0C31                          L$149:
0C31    0C A0                     or          al,0xa0 
0C33    89 C2                     mov         dx,ax 
0C35    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0C38    30 E4                     xor         ah,ah 
0C3A    09 D0                     or          ax,dx 
0C3C    8E 46 F4                  mov         es,word ptr -0xc[bp] 
0C3F    26 88 44 08               mov         byte ptr es:0x8[si],al 
0C43    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0C48    74 25                     je          L$150 
0C4A    8B 86 64 FE               mov         ax,word ptr -0x19c[bp] 
0C4E    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0C52    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C56    80 E4 0F                  and         ah,0x0f 
0C59    26 89 44 05               mov         word ptr es:0x5[si],ax 
0C5D    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C61    C1 E8 0C                  shr         ax,0x0c 
0C64    26 88 44 07               mov         byte ptr es:0x7[si],al 
0C68    26 80 4C 08 40            or          byte ptr es:0x8[si],0x40 
0C6D    EB 13                     jmp         L$151 
0C6F                          L$150:
0C6F    8B 86 5E FE               mov         ax,word ptr -0x1a2[bp] 
0C73    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0C77    8B 86 60 FE               mov         ax,word ptr -0x1a0[bp] 
0C7B    80 E4 0F                  and         ah,0x0f 
0C7E    26 89 44 05               mov         word ptr es:0x5[si],ax 
0C82                          L$151:
0C82    C6 46 FA 00               mov         byte ptr -0x6[bp],0x00 
0C86    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0C89    09 F8                     or          ax,di 
0C8B    75 07                     jne         L$152 
0C8D    31 FF                     xor         di,di 
0C8F    C7 46 EC 01 00            mov         word ptr -0x14[bp],0x0001 
0C94                          L$152:
0C94    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
0C97    89 F8                     mov         ax,di 
0C99    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0C9C    E8 00 00                  call        @mulLS 
0C9F    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0CA2    E8 00 00                  call        @mulLS 
0CA5    89 46 F6                  mov         word ptr -0xa[bp],ax 
0CA8    89 56 EE                  mov         word ptr -0x12[bp],dx 
0CAB                          L$153:
0CAB    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0CAF    75 06                     jne         L$154 
0CB1    81 FF 00 04               cmp         di,0x0400 
0CB5    76 33                     jbe         L$156 
0CB7                          L$154:
0CB7    81 7E F2 FF 00            cmp         word ptr -0xe[bp],0x00ff 
0CBC    73 2C                     jae         L$156 
0CBE    D1 66 F2                  shl         word ptr -0xe[bp],0x01 
0CC1    81 7E F2 FF 00            cmp         word ptr -0xe[bp],0x00ff 
0CC6    76 05                     jbe         L$155 
0CC8    C7 46 F2 FF 00            mov         word ptr -0xe[bp],0x00ff 
0CCD                          L$155:
0CCD    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0CD0    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0CD3    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0CD6    E8 00 00                  call        @divLS 
0CD9    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
0CDC    E8 00 00                  call        @divLS 
0CDF    89 C7                     mov         di,ax 
0CE1    89 56 EC                  mov         word ptr -0x14[bp],dx 
0CE4    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0CE8    EB C1                     jmp         L$153 
0CEA                          L$156:
0CEA    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0CEE    75 06                     jne         L$157 
0CF0    81 FF 00 04               cmp         di,0x0400 
0CF4    76 26                     jbe         L$158 
0CF6                          L$157:
0CF6    83 7E F0 3F               cmp         word ptr -0x10[bp],0x003f 
0CFA    73 20                     jae         L$158 
0CFC    B8 3F 00                  mov         ax,0x003f 
0CFF    89 46 F0                  mov         word ptr -0x10[bp],ax 
0D02    89 C3                     mov         bx,ax 
0D04    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
0D07    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0D0A    E8 00 00                  call        @divLS 
0D0D    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
0D10    E8 00 00                  call        @divLS 
0D13    89 C7                     mov         di,ax 
0D15    89 56 EC                  mov         word ptr -0x14[bp],dx 
0D18    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D1C                          L$158:
0D1C    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0D20    75 06                     jne         L$159 
0D22    81 FF 00 04               cmp         di,0x0400 
0D26    76 08                     jbe         L$160 
0D28                          L$159:
0D28    BF 00 04                  mov         di,0x0400 
0D2B    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0D30                          L$160:
0D30    8E 46 F4                  mov         es,word ptr -0xc[bp] 
0D33    26 89 3C                  mov         word ptr es:[si],di 
0D36    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
0D39    26 88 44 02               mov         byte ptr es:0x2[si],al 
0D3D    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0D40    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0D44    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0D47    26 88 44 03               mov         byte ptr es:0x3[si],al 
0D4B    3C A0                     cmp         al,0xa0 
0D4D    75 24                     jne         L$161 
0D4F    8B 5E F2                  mov         bx,word ptr -0xe[bp] 
0D52    89 F8                     mov         ax,di 
0D54    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0D57    E8 00 00                  call        @mulLS 
0D5A    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D5D    E8 00 00                  call        @mulLS 
0D60    52                        push        dx 
0D61    50                        push        ax 
0D62    FF 76 F0                  push        word ptr -0x10[bp] 
0D65    FF 76 F2                  push        word ptr -0xe[bp] 
0D68    57                        push        di 
0D69    1E                        push        ds 
0D6A    68 13 05                  push        offset DGROUP:L$295 
0D6D    E8 00 00                  call        _cprintf 
0D70    83 C4 0E                  add         sp,0x000e 
0D73                          L$161:
0D73    89 F0                     mov         ax,si 
0D75    8B 7E F4                  mov         di,word ptr -0xc[bp] 
0D78    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0D7C    31 D2                     xor         dx,dx 
0D7E    8E C7                     mov         es,di 
0D80                          L$162:
0D80    89 C3                     mov         bx,ax 
0D82    40                        inc         ax 
0D83    26 8A 1F                  mov         bl,byte ptr es:[bx] 
0D86    00 5E FC                  add         byte ptr -0x4[bp],bl 
0D89    42                        inc         dx 
0D8A    83 FA 0F                  cmp         dx,0x000f 
0D8D    72 F1                     jb          L$162 
0D8F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0D92    8E 46 F4                  mov         es,word ptr -0xc[bp] 
0D95    26 88 44 0F               mov         byte ptr es:0xf[si],al 
0D99    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
0D9D    1E                        push        ds 
0D9E    68 71 02                  push        offset DGROUP:L$269 
0DA1    E8 00 00                  call        _cprintf 
0DA4    83 C4 04                  add         sp,0x0004 
0DA7    C9                        leave       
0DA8    5F                        pop         di 
0DA9                          L$163:
0DA9    5E                        pop         si 
0DAA    C2 02 00                  ret         0x0002 

Routine Size: 759 bytes,    Routine Base: _TEXT + 0AB6

0DAD                          put_char_array_:
0DAD    51                        push        cx 
0DAE    56                        push        si 
0DAF    57                        push        di 
0DB0    C8 02 00 00               enter       0x0002,0x00 
0DB4    89 C6                     mov         si,ax 
0DB6    89 D7                     mov         di,dx 
0DB8    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0DBB                          L$164:
0DBB    FE 4E FE                  dec         byte ptr -0x2[bp] 
0DBE    80 7E FE FF               cmp         byte ptr -0x2[bp],0xff 
0DC2    75 03                     jne         L$165 
0DC4    E9 D5 F4                  jmp         L$45 
0DC7                          L$165:
0DC7    8E C7                     mov         es,di 
0DC9    26 8A 04                  mov         al,byte ptr es:[si] 
0DCC    30 E4                     xor         ah,ah 
0DCE    46                        inc         si 
0DCF    E8 00 00                  call        @uart_putchar 
0DD2    EB E7                     jmp         L$164 

Routine Size: 39 bytes,    Routine Base: _TEXT + 0DAD

0DD4                          sd_info_:
0DD4    53                        push        bx 
0DD5    51                        push        cx 
0DD6    56                        push        si 
0DD7    57                        push        di 
0DD8    C8 3E 00 00               enter       0x003e,0x00 
0DDC    50                        push        ax 
0DDD    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0DE0    E8 00 00                  call        @SDinitcard 
0DE3    89 46 F8                  mov         word ptr -0x8[bp],ax 
0DE6    89 46 F6                  mov         word ptr -0xa[bp],ax 
0DE9    8D 56 C2                  lea         dx,-0x3e[bp] 
0DEC    16                        push        ss 
0DED    52                        push        dx 
0DEE    FF 76 C0                  push        word ptr -0x40[bp] 
0DF1    E8 00 00                  call        _DSDgetInfo 
0DF4    83 C4 06                  add         sp,0x0006 
0DF7    8C D6                     mov         si,ss 
0DF9    8D 7E C6                  lea         di,-0x3a[bp] 
0DFC    8C 56 EE                  mov         word ptr -0x12[bp],ss 
0DFF    83 C7 10                  add         di,0x0010 
0E02    FF 76 C0                  push        word ptr -0x40[bp] 
0E05    1E                        push        ds 
0E06    68 44 05                  push        offset DGROUP:L$296 
0E09    E8 00 00                  call        _cprintf 
0E0C    83 C4 06                  add         sp,0x0006 
0E0F    83 7E F8 FC               cmp         word ptr -0x8[bp],0xfffc 
0E13    75 10                     jne         L$166 
0E15    1E                        push        ds 
0E16    68 53 05                  push        offset DGROUP:L$297 
0E19    E8 00 00                  call        _cprintf 
0E1C    83 C4 04                  add         sp,0x0004 
0E1F    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0E22    E9 EA F6                  jmp         L$65 
0E25                          L$166:
0E25    8D 45 01                  lea         ax,0x1[di] 
0E28    BB 02 00                  mov         bx,0x0002 
0E2B    8C D2                     mov         dx,ss 
0E2D    E8 00 00                  call        put_char_array_ 
0E30    1E                        push        ds 
0E31    68 5D 05                  push        offset DGROUP:L$298 
0E34    E8 00 00                  call        _cprintf 
0E37    83 C4 04                  add         sp,0x0004 
0E3A    8D 45 03                  lea         ax,0x3[di] 
0E3D    BB 05 00                  mov         bx,0x0005 
0E40    8C D2                     mov         dx,ss 
0E42    E8 00 00                  call        put_char_array_ 
0E45    8D 56 C6                  lea         dx,-0x3a[bp] 
0E48    16                        push        ss 
0E49    52                        push        dx 
0E4A    68 7E 7F                  push        0x7f7e 
0E4D    E8 00 00                  call        _SDcsd 
0E50    83 C4 06                  add         sp,0x0006 
0E53    89 C6                     mov         si,ax 
0E55    46                        inc         si 
0E56    56                        push        si 
0E57    1E                        push        ds 
0E58    68 60 05                  push        offset DGROUP:L$299 
0E5B    E8 00 00                  call        _cprintf 
0E5E    83 C4 06                  add         sp,0x0006 
0E61    8D 56 C6                  lea         dx,-0x3a[bp] 
0E64    16                        push        ss 
0E65    52                        push        dx 
0E66    68 54 5F                  push        0x5f54 
0E69    E8 00 00                  call        _SDcsd 
0E6C    83 C4 06                  add         sp,0x0006 
0E6F    50                        push        ax 
0E70    50                        push        ax 
0E71    1E                        push        ds 
0E72    68 75 05                  push        offset DGROUP:L$300 
0E75    E8 00 00                  call        _cprintf 
0E78    83 C4 08                  add         sp,0x0008 
0E7B    83 FE 02                  cmp         si,0x0002 
0E7E    75 47                     jne         L$168 
0E80    8D 56 C6                  lea         dx,-0x3a[bp] 
0E83    16                        push        ss 
0E84    52                        push        dx 
0E85    68 40 45                  push        0x4540 
0E88    E8 00 00                  call        _SDcsd 
0E8B    83 C4 06                  add         sp,0x0006 
0E8E    89 C6                     mov         si,ax 
0E90    8D 56 C6                  lea         dx,-0x3a[bp] 
0E93    16                        push        ss 
0E94    52                        push        dx 
0E95    68 30 3F                  push        0x3f30 
0E98    E8 00 00                  call        _SDcsd 
0E9B    83 C4 06                  add         sp,0x0006 
0E9E    31 D2                     xor         dx,dx 
0EA0    31 DB                     xor         bx,bx 
0EA2    01 C3                     add         bx,ax 
0EA4    89 5E EA                  mov         word ptr -0x16[bp],bx 
0EA7    11 D6                     adc         si,dx 
0EA9    89 76 EC                  mov         word ptr -0x14[bp],si 
0EAC    89 D8                     mov         ax,bx 
0EAE    05 01 00                  add         ax,0x0001 
0EB1    89 F2                     mov         dx,si 
0EB3    83 D2 00                  adc         dx,0x0000 
0EB6    B9 0A 00                  mov         cx,0x000a 
0EB9                          L$167:
0EB9    D1 E0                     shl         ax,0x01 
0EBB    D1 D2                     rcl         dx,0x01 
0EBD    E2 FA                     loop        L$167 
0EBF    89 46 EA                  mov         word ptr -0x16[bp],ax 
0EC2    89 56 EC                  mov         word ptr -0x14[bp],dx 
0EC5    EB 32                     jmp         L$170 
0EC7                          L$168:
0EC7    8D 56 C6                  lea         dx,-0x3a[bp] 
0ECA    16                        push        ss 
0ECB    52                        push        dx 
0ECC    68 3E 49                  push        0x493e 
0ECF    E8 00 00                  call        _SDcsd 
0ED2    83 C4 06                  add         sp,0x0006 
0ED5    89 46 EA                  mov         word ptr -0x16[bp],ax 
0ED8    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0EDD    8D 56 C6                  lea         dx,-0x3a[bp] 
0EE0    16                        push        ss 
0EE1    52                        push        dx 
0EE2    68 2F 31                  push        0x312f 
0EE5    E8 00 00                  call        _SDcsd 
0EE8    83 C4 06                  add         sp,0x0006 
0EEB    89 C1                     mov         cx,ax 
0EED    41                        inc         cx 
0EEE    41                        inc         cx 
0EEF    E3 08                     jcxz        L$170 
0EF1                          L$169:
0EF1    D1 66 EA                  shl         word ptr -0x16[bp],0x01 
0EF4    D1 56 EC                  rcl         word ptr -0x14[bp],0x01 
0EF7    E2 F8                     loop        L$169 
0EF9                          L$170:
0EF9    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0EFC    30 E4                     xor         ah,ah 
0EFE    E8 00 00                  call        p_bda_fx_ 
0F01    89 C6                     mov         si,ax 
0F03    89 56 F0                  mov         word ptr -0x10[bp],dx 
0F06    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0F09    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0F0C    E8 00 00                  call        log2_ 
0F0F    89 C3                     mov         bx,ax 
0F11    3D 1C 00                  cmp         ax,0x001c 
0F14    7E 0D                     jle         L$171 
0F16    BB 1C 00                  mov         bx,0x001c 
0F19    C7 46 EA FF FF            mov         word ptr -0x16[bp],0xffff 
0F1E    C7 46 EC FF 0F            mov         word ptr -0x14[bp],0x0fff 
0F23                          L$171:
0F23    83 EB 0A                  sub         bx,0x000a 
0F26    83 FB 0C                  cmp         bx,0x000c 
0F29    7E 05                     jle         L$172 
0F2B    BB 0C 00                  mov         bx,0x000c 
0F2E    EB 08                     jmp         L$173 
0F30                          L$172:
0F30    83 FB 08                  cmp         bx,0x0008 
0F33    7D 03                     jge         L$173 
0F35    BB 08 00                  mov         bx,0x0008 
0F38                          L$173:
0F38    89 D8                     mov         ax,bx 
0F3A    99                        cwd         
0F3B    2B C2                     sub         ax,dx 
0F3D    D1 F8                     sar         ax,0x01 
0F3F    3D 05 00                  cmp         ax,0x0005 
0F42    7E 03                     jle         L$174 
0F44    B8 05 00                  mov         ax,0x0005 
0F47                          L$174:
0F47    89 DA                     mov         dx,bx 
0F49    29 C2                     sub         dx,ax 
0F4B    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
0F4E    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0F51    26 89 4C 0C               mov         word ptr es:0xc[si],cx 
0F55    8B 4E EC                  mov         cx,word ptr -0x14[bp] 
0F58    26 89 4C 05               mov         word ptr es:0x5[si],cx 
0F5C    88 C1                     mov         cl,al 
0F5E    B0 01                     mov         al,0x01 
0F60    D2 E0                     shl         al,cl 
0F62    26 88 44 04               mov         byte ptr es:0x4[si],al 
0F66    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0F6A    88 D1                     mov         cl,dl 
0F6C    B0 01                     mov         al,0x01 
0F6E    D2 E0                     shl         al,cl 
0F70    26 88 44 0B               mov         byte ptr es:0xb[si],al 
0F74    26 88 44 02               mov         byte ptr es:0x2[si],al 
0F78    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0F7B    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0F7E    89 D9                     mov         cx,bx 
0F80    E3 06                     jcxz        L$176 
0F82                          L$175:
0F82    D1 EA                     shr         dx,0x01 
0F84    D1 D8                     rcr         ax,0x01 
0F86    E2 FA                     loop        L$175 
0F88                          L$176:
0F88    26 89 44 09               mov         word ptr es:0x9[si],ax 
0F8C    26 89 04                  mov         word ptr es:[si],ax 
0F8F    8B 46 C0                  mov         ax,word ptr -0x40[bp] 
0F92    85 C0                     test        ax,ax 
0F94    74 03                     je          L$177 
0F96    B8 10 00                  mov         ax,0x0010 
0F99                          L$177:
0F99    0C E0                     or          al,0xe0 
0F9B    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0F9E    26 88 44 08               mov         byte ptr es:0x8[si],al 
0FA2    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
0FA7    31 D2                     xor         dx,dx 
0FA9    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0FAC    89 46 FA                  mov         word ptr -0x6[bp],ax 
0FAF    8D 5D 09                  lea         bx,0x9[di] 
0FB2    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0FB6    8E 46 FA                  mov         es,word ptr -0x6[bp] 
0FB9                          L$178:
0FB9    26 8A 07                  mov         al,byte ptr es:[bx] 
0FBC    88 46 F2                  mov         byte ptr -0xe[bp],al 
0FBF    C6 46 F3 00               mov         byte ptr -0xd[bp],0x00 
0FC3    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
0FC6    B9 08 00                  mov         cx,0x0008 
0FC9                          L$179:
0FC9    D1 E0                     shl         ax,0x01 
0FCB    D1 D2                     rcl         dx,0x01 
0FCD    E2 FA                     loop        L$179 
0FCF    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
0FD2    09 C1                     or          cx,ax 
0FD4    89 4E F4                  mov         word ptr -0xc[bp],cx 
0FD7    43                        inc         bx 
0FD8    FE 46 FC                  inc         byte ptr -0x4[bp] 
0FDB    80 7E FC 04               cmp         byte ptr -0x4[bp],0x04 
0FDF    72 D8                     jb          L$178 
0FE1    8E 46 EE                  mov         es,word ptr -0x12[bp] 
0FE4    26 8A 45 0D               mov         al,byte ptr es:0xd[di] 
0FE8    30 E4                     xor         ah,ah 
0FEA    89 C3                     mov         bx,ax 
0FEC    C1 E3 04                  shl         bx,0x04 
0FEF    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
0FF3    C1 F8 04                  sar         ax,0x04 
0FF6    09 C3                     or          bx,ax 
0FF8    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
0FFC    24 0F                     and         al,0x0f 
0FFE    30 E4                     xor         ah,ah 
1000    50                        push        ax 
1001    8D 87 D0 07               lea         ax,0x7d0[bx] 
1005    50                        push        ax 
1006    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
100A    24 0F                     and         al,0x0f 
100C    30 E4                     xor         ah,ah 
100E    50                        push        ax 
100F    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
1013    C1 F8 04                  sar         ax,0x04 
1016    50                        push        ax 
1017    52                        push        dx 
1018    51                        push        cx 
1019    1E                        push        ds 
101A    68 96 05                  push        offset DGROUP:L$301 
101D    E8 00 00                  call        _cprintf 
1020    83 C4 10                  add         sp,0x0010 
1023    FF 76 EC                  push        word ptr -0x14[bp] 
1026    FF 76 EA                  push        word ptr -0x16[bp] 
1029    1E                        push        ds 
102A    68 BF 05                  push        offset DGROUP:L$302 
102D    E8 00 00                  call        _cprintf 
1030    83 C4 08                  add         sp,0x0008 
1033    8E 46 F0                  mov         es,word ptr -0x10[bp] 
1036    26 8A 44 0E               mov         al,byte ptr es:0xe[si] 
103A    30 E4                     xor         ah,ah 
103C    50                        push        ax 
103D    26 8A 44 02               mov         al,byte ptr es:0x2[si] 
1041    50                        push        ax 
1042    26 FF 34                  push        word ptr es:[si] 
1045    1E                        push        ds 
1046    68 EB 05                  push        offset DGROUP:L$303 
1049    E8 00 00                  call        _cprintf 
104C    83 C4 0A                  add         sp,0x000a 
104F    89 F3                     mov         bx,si 
1051    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
1054    89 46 FA                  mov         word ptr -0x6[bp],ax 
1057    30 C0                     xor         al,al 
1059    88 46 FC                  mov         byte ptr -0x4[bp],al 
105C    8E 46 FA                  mov         es,word ptr -0x6[bp] 
105F                          L$180:
105F    89 DF                     mov         di,bx 
1061    43                        inc         bx 
1062    26 02 05                  add         al,byte ptr es:[di] 
1065    FE 46 FC                  inc         byte ptr -0x4[bp] 
1068    80 7E FC 0F               cmp         byte ptr -0x4[bp],0x0f 
106C    72 F1                     jb          L$180 
106E    8E 46 F0                  mov         es,word ptr -0x10[bp] 
1071    26 88 44 0F               mov         byte ptr es:0xf[si],al 
1075    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
1079    1E                        push        ds 
107A    68 71 02                  push        offset DGROUP:L$269 
107D    E8 00 00                  call        _cprintf 
1080    83 C4 04                  add         sp,0x0004 
1083    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
1086    E9 86 F4                  jmp         L$65 

Routine Size: 693 bytes,    Routine Base: _TEXT + 0DD4

1089                          @setup_SD_card:
1089    56                        push        si 
108A    55                        push        bp 
108B    89 E5                     mov         bp,sp 
108D    88 C1                     mov         cl,al 
108F    88 D0                     mov         al,dl 
1091    30 E4                     xor         ah,ah 
1093    89 C6                     mov         si,ax 
1095    50                        push        ax 
1096    88 C8                     mov         al,cl 
1098    50                        push        ax 
1099    1E                        push        ds 
109A    68 02 06                  push        offset DGROUP:L$304 
109D    1E                        push        ds 
109E    68 54 04                  push        offset DGROUP:L$286 
10A1    E8 00 00                  call        _cprintf 
10A4    83 C4 0C                  add         sp,0x000c 
10A7    8A 46 06                  mov         al,byte ptr 0x6[bp] 
10AA    30 E4                     xor         ah,ah 
10AC    89 F2                     mov         dx,si 
10AE    E8 00 00                  call        sd_info_ 
10B1    5D                        pop         bp 
10B2    E9 F4 FC                  jmp         L$163 

Routine Size: 44 bytes,    Routine Base: _TEXT + 1089

10B5                          @nvram_apply:
10B5    56                        push        si 
10B6    57                        push        di 
10B7    C8 0C 00 00               enter       0x000c,0x00 
10BB    31 F6                     xor         si,si 
10BD    89 76 FC                  mov         word ptr -0x4[bp],si 
10C0    EB 09                     jmp         L$182 
10C2                          L$181:
10C2    FF 46 FC                  inc         word ptr -0x4[bp] 
10C5    83 7E FC 02               cmp         word ptr -0x4[bp],0x0002 
10C9    7D 3F                     jge         L$184 
10CB                          L$182:
10CB    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
10CE    40                        inc         ax 
10CF    40                        inc         ax 
10D0    80 CC 80                  or          ah,0x80 
10D3    E8 00 00                  call        @rtc_get_loc 
10D6    88 C3                     mov         bl,al 
10D8    3C 04                     cmp         al,0x04 
10DA    75 03                     jne         L$183 
10DC    80 CB 30                  or          bl,0x30 
10DF                          L$183:
10DF    C4 3E 00 00               les         di,dword ptr _bios_data_area_ptr 
10E3    03 7E FC                  add         di,word ptr -0x4[bp] 
10E6    26 88 9D F8 00            mov         byte ptr es:0xf8[di],bl 
10EB    84 DB                     test        bl,bl 
10ED    74 D3                     je          L$181 
10EF    88 D8                     mov         al,bl 
10F1    24 0F                     and         al,0x0f 
10F3    30 E4                     xor         ah,ah 
10F5    50                        push        ax 
10F6    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
10F9    05 41 00                  add         ax,0x0041 
10FC    50                        push        ax 
10FD    1E                        push        ds 
10FE    68 09 06                  push        offset DGROUP:L$305 
1101    E8 00 00                  call        _cprintf 
1104    83 C4 08                  add         sp,0x0008 
1107    46                        inc         si 
1108    EB B8                     jmp         L$181 
110A                          L$184:
110A    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
110E    83 C3 10                  add         bx,0x0010 
1111    85 F6                     test        si,si 
1113    74 05                     je          L$185 
1115    B8 01 00                  mov         ax,0x0001 
1118    EB 02                     jmp         L$186 
111A                          L$185:
111A    31 C0                     xor         ax,ax 
111C                          L$186:
111C    25 01 00                  and         ax,0x0001 
111F    26 80 27 FE               and         byte ptr es:[bx],0xfe 
1123    26 09 07                  or          word ptr es:[bx],ax 
1126    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
112A    83 C3 10                  add         bx,0x0010 
112D    85 F6                     test        si,si 
112F    74 01                     je          L$187 
1131    4E                        dec         si 
1132                          L$187:
1132    83 E6 03                  and         si,0x0003 
1135    26 80 27 3F               and         byte ptr es:[bx],0x3f 
1139    C1 E6 06                  shl         si,0x06 
113C    26 09 37                  or          word ptr es:[bx],si 
113F    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
1144    B8 07 80                  mov         ax,0x8007 
1147    E8 00 00                  call        @rtc_get_loc 
114A    30 E4                     xor         ah,ah 
114C    89 C2                     mov         dx,ax 
114E    80 E2 03                  and         dl,0x03 
1151    89 56 F8                  mov         word ptr -0x8[bp],dx 
1154    89 C7                     mov         di,ax 
1156    C1 FF 04                  sar         di,0x04 
1159    83 E7 03                  and         di,0x0003 
115C    30 C0                     xor         al,al 
115E    89 46 F4                  mov         word ptr -0xc[bp],ax 
1161    89 D0                     mov         ax,dx 
1163    C1 E0 02                  shl         ax,0x02 
1166    89 46 F4                  mov         word ptr -0xc[bp],ax 
1169    24 CF                     and         al,0xcf 
116B    89 46 F4                  mov         word ptr -0xc[bp],ax 
116E    89 F8                     mov         ax,di 
1170    C1 E0 04                  shl         ax,0x04 
1173    09 46 F4                  or          word ptr -0xc[bp],ax 
1176    B8 06 80                  mov         ax,0x8006 
1179    E8 00 00                  call        @rtc_get_loc 
117C    30 E4                     xor         ah,ah 
117E    89 C6                     mov         si,ax 
1180    83 E6 03                  and         si,0x0003 
1183    89 76 F6                  mov         word ptr -0xa[bp],si 
1186    80 66 F4 FC               and         byte ptr -0xc[bp],0xfc 
118A    09 76 F4                  or          word ptr -0xc[bp],si 
118D    B8 08 80                  mov         ax,0x8008 
1190    E8 00 00                  call        @rtc_get_loc 
1193    30 E4                     xor         ah,ah 
1195    89 46 FE                  mov         word ptr -0x2[bp],ax 
1198    24 03                     and         al,0x03 
119A    80 66 F4 3F               and         byte ptr -0xc[bp],0x3f 
119E    C1 E0 06                  shl         ax,0x06 
11A1    09 46 F4                  or          word ptr -0xc[bp],ax 
11A4    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
11A8    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
11AB    26 88 87 FE 00            mov         byte ptr es:0xfe[bx],al 
11B0    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
11B4    83 C3 10                  add         bx,0x0010 
11B7    85 F6                     test        si,si 
11B9    74 04                     je          L$188 
11BB    31 C0                     xor         ax,ax 
11BD    EB 03                     jmp         L$189 
11BF                          L$188:
11BF    B8 01 00                  mov         ax,0x0001 
11C2                          L$189:
11C2    30 E4                     xor         ah,ah 
11C4    24 03                     and         al,0x03 
11C6    26 80 67 01 3F            and         byte ptr es:0x1[bx],0x3f 
11CB    C1 E0 0E                  shl         ax,0x0e 
11CE    26 09 07                  or          word ptr es:[bx],ax 
11D1    8B 76 F6                  mov         si,word ptr -0xa[bp] 
11D4    03 76 F8                  add         si,word ptr -0x8[bp] 
11D7    01 FE                     add         si,di 
11D9    03 76 FE                  add         si,word ptr -0x2[bp] 
11DC    FF 76 F4                  push        word ptr -0xc[bp] 
11DF    56                        push        si 
11E0    FF 76 FE                  push        word ptr -0x2[bp] 
11E3    57                        push        di 
11E4    FF 76 F8                  push        word ptr -0x8[bp] 
11E7    FF 76 F6                  push        word ptr -0xa[bp] 
11EA    1E                        push        ds 
11EB    68 1D 06                  push        offset DGROUP:L$306 
11EE    E8 00 00                  call        _cprintf 
11F1    83 C4 10                  add         sp,0x0010 
11F4    1E                        push        ds 
11F5    68 71 02                  push        offset DGROUP:L$269 
11F8    E8 00 00                  call        _cprintf 
11FB    83 C4 04                  add         sp,0x0004 
11FE    83 FE 04                  cmp         si,0x0004 
1201    7E 03                     jle         L$190 
1203    BE 04 00                  mov         si,0x0004 
1206                          L$190:
1206    31 C0                     xor         ax,ax 
1208    89 46 FC                  mov         word ptr -0x4[bp],ax 
120B    89 46 FA                  mov         word ptr -0x6[bp],ax 
120E                          L$191:
120E    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1211    3B 46 F6                  cmp         ax,word ptr -0xa[bp] 
1214    73 20                     jae         L$192 
1216    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
1219    39 C6                     cmp         si,ax 
121B    7E 19                     jle         L$192 
121D    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
1220    80 CA 02                  or          dl,0x02 
1223    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1227    01 C3                     add         bx,ax 
1229    26 88 97 A9 00            mov         byte ptr es:0xa9[bx],dl 
122E    FF 46 FA                  inc         word ptr -0x6[bp] 
1231    FF 46 FC                  inc         word ptr -0x4[bp] 
1234    EB D8                     jmp         L$191 
1236                          L$192:
1236    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
123B                          L$193:
123B    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
123E    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
1241    73 20                     jae         L$194 
1243    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
1246    39 C6                     cmp         si,ax 
1248    7E 19                     jle         L$194 
124A    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
124D    80 CA 04                  or          dl,0x04 
1250    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1254    01 C3                     add         bx,ax 
1256    26 88 97 A9 00            mov         byte ptr es:0xa9[bx],dl 
125B    FF 46 FA                  inc         word ptr -0x6[bp] 
125E    FF 46 FC                  inc         word ptr -0x4[bp] 
1261    EB D8                     jmp         L$193 
1263                          L$194:
1263    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
1268                          L$195:
1268    3B 7E FA                  cmp         di,word ptr -0x6[bp] 
126B    76 20                     jbe         L$196 
126D    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
1270    39 C6                     cmp         si,ax 
1272    7E 19                     jle         L$196 
1274    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
1277    80 CA 06                  or          dl,0x06 
127A    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
127E    01 C3                     add         bx,ax 
1280    26 88 97 A9 00            mov         byte ptr es:0xa9[bx],dl 
1285    FF 46 FA                  inc         word ptr -0x6[bp] 
1288    FF 46 FC                  inc         word ptr -0x4[bp] 
128B    EB DB                     jmp         L$195 
128D                          L$196:
128D    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
1292                          L$197:
1292    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1295    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
1298    73 1E                     jae         L$198 
129A    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
129D    7E 19                     jle         L$198 
129F    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
12A2    0C 08                     or          al,0x08 
12A4    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12A8    03 5E FC                  add         bx,word ptr -0x4[bp] 
12AB    26 88 87 A9 00            mov         byte ptr es:0xa9[bx],al 
12B0    FF 46 FA                  inc         word ptr -0x6[bp] 
12B3    FF 46 FC                  inc         word ptr -0x4[bp] 
12B6    EB DA                     jmp         L$197 
12B8                          L$198:
12B8    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
12BB    3D 04 00                  cmp         ax,0x0004 
12BE    7D 11                     jge         L$199 
12C0    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12C4    01 C3                     add         bx,ax 
12C6    26 C6 87 A9 00 00         mov         byte ptr es:0xa9[bx],0x00 
12CC    FF 46 FC                  inc         word ptr -0x4[bp] 
12CF    EB E7                     jmp         L$198 
12D1                          L$199:
12D1    31 C0                     xor         ax,ax 
12D3    89 46 FC                  mov         word ptr -0x4[bp],ax 
12D6    89 46 FA                  mov         word ptr -0x6[bp],ax 
12D9                          L$200:
12D9    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
12DC    3B 46 F6                  cmp         ax,word ptr -0xa[bp] 
12DF    73 26                     jae         L$201 
12E1    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
12E4    7E 21                     jle         L$201 
12E6    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
12E9    30 E4                     xor         ah,ah 
12EB    50                        push        ax 
12EC    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
12EF    80 C2 80                  add         dl,0x80 
12F2    30 F6                     xor         dh,dh 
12F4    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
12F7    04 43                     add         al,0x43 
12F9    BB 02 00                  mov         bx,0x0002 
12FC    E8 00 00                  call        @setup_fixed_disk 
12FF    FF 46 FA                  inc         word ptr -0x6[bp] 
1302    FF 46 FC                  inc         word ptr -0x4[bp] 
1305    EB D2                     jmp         L$200 
1307                          L$201:
1307    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
130C                          L$202:
130C    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
130F    3B 46 F8                  cmp         ax,word ptr -0x8[bp] 
1312    73 26                     jae         L$203 
1314    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
1317    7E 21                     jle         L$203 
1319    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
131C    30 E4                     xor         ah,ah 
131E    50                        push        ax 
131F    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
1322    80 C2 80                  add         dl,0x80 
1325    30 F6                     xor         dh,dh 
1327    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
132A    04 43                     add         al,0x43 
132C    BB 04 00                  mov         bx,0x0004 
132F    E8 00 00                  call        @setup_fixed_disk 
1332    FF 46 FA                  inc         word ptr -0x6[bp] 
1335    FF 46 FC                  inc         word ptr -0x4[bp] 
1338    EB D2                     jmp         L$202 
133A                          L$203:
133A    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
133F                          L$204:
133F    3B 7E FA                  cmp         di,word ptr -0x6[bp] 
1342    76 26                     jbe         L$205 
1344    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
1347    7E 21                     jle         L$205 
1349    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
134C    30 E4                     xor         ah,ah 
134E    50                        push        ax 
134F    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
1352    80 C2 80                  add         dl,0x80 
1355    30 F6                     xor         dh,dh 
1357    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
135A    04 43                     add         al,0x43 
135C    BB 06 00                  mov         bx,0x0006 
135F    E8 00 00                  call        @setup_fixed_disk 
1362    FF 46 FA                  inc         word ptr -0x6[bp] 
1365    FF 46 FC                  inc         word ptr -0x4[bp] 
1368    EB D5                     jmp         L$204 
136A                          L$205:
136A    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
136F                          L$206:
136F    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
1372    3B 46 FE                  cmp         ax,word ptr -0x2[bp] 
1375    73 26                     jae         L$207 
1377    3B 76 FC                  cmp         si,word ptr -0x4[bp] 
137A    7E 21                     jle         L$207 
137C    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
137F    30 E4                     xor         ah,ah 
1381    50                        push        ax 
1382    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
1385    80 C2 80                  add         dl,0x80 
1388    30 F6                     xor         dh,dh 
138A    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
138D    04 43                     add         al,0x43 
138F    BB 06 00                  mov         bx,0x0006 
1392    E8 00 00                  call        @setup_SD_card 
1395    FF 46 FA                  inc         word ptr -0x6[bp] 
1398    FF 46 FC                  inc         word ptr -0x4[bp] 
139B    EB D2                     jmp         L$206 
139D                          L$207:
139D    1E                        push        ds 
139E    68 59 06                  push        offset DGROUP:L$307 
13A1    E8 00 00                  call        _cprintf 
13A4    83 C4 04                  add         sp,0x0004 
13A7    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
13AC                          L$208:
13AC    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
13B0    03 5E FC                  add         bx,word ptr -0x4[bp] 
13B3    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
13B8    30 E4                     xor         ah,ah 
13BA    50                        push        ax 
13BB    1E                        push        ds 
13BC    68 6B 06                  push        offset DGROUP:L$308 
13BF    E8 00 00                  call        _cprintf 
13C2    83 C4 06                  add         sp,0x0006 
13C5    FF 46 FC                  inc         word ptr -0x4[bp] 
13C8    83 7E FC 04               cmp         word ptr -0x4[bp],0x0004 
13CC    7C DE                     jl          L$208 
13CE    1E                        push        ds 
13CF    68 71 06                  push        offset DGROUP:L$309 
13D2    E8 00 00                  call        _cprintf 
13D5    83 C4 04                  add         sp,0x0004 
13D8    C9                        leave       
13D9    5F                        pop         di 
13DA    5E                        pop         si 
13DB    C3                        ret         

Routine Size: 807 bytes,    Routine Base: _TEXT + 10B5

13DC                          @nvram_setup:
13DC    56                        push        si 
13DD    C8 22 00 00               enter       0x0022,0x00 
13E1    E8 00 00                  call        @nvram_check 
13E4    85 C0                     test        ax,ax 
13E6    74 25                     je          L$210 
13E8    1E                        push        ds 
13E9    68 74 06                  push        offset DGROUP:L$310 
13EC    E8 00 00                  call        _cprintf 
13EF    83 C4 04                  add         sp,0x0004 
13F2    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
13F7                          L$209:
13F7    8B 76 FE                  mov         si,word ptr -0x2[bp] 
13FA    C6 42 DE 00               mov         byte ptr -0x22[bp+si],0x00 
13FE    FF 46 FE                  inc         word ptr -0x2[bp] 
1401    83 7E FE 1F               cmp         word ptr -0x2[bp],0x001f 
1405    7C F0                     jl          L$209 
1407    C6 46 E3 03               mov         byte ptr -0x1d[bp],0x03 
140B    EB 27                     jmp         L$212 
140D                          L$210:
140D    1E                        push        ds 
140E    68 8F 06                  push        offset DGROUP:L$311 
1411    E8 00 00                  call        _cprintf 
1414    83 C4 04                  add         sp,0x0004 
1417    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
141C                          L$211:
141C    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
141F    80 CC 80                  or          ah,0x80 
1422    E8 00 00                  call        @rtc_get_loc 
1425    8B 76 FE                  mov         si,word ptr -0x2[bp] 
1428    88 42 DE                  mov         byte ptr -0x22[bp+si],al 
142B    FF 46 FE                  inc         word ptr -0x2[bp] 
142E    83 7E FE 1F               cmp         word ptr -0x2[bp],0x001f 
1432    7C E8                     jl          L$211 
1434                          L$212:
1434    31 C0                     xor         ax,ax 
1436    E8 00 00                  call        @rtc_get_loc 
1439    24 80                     and         al,0x80 
143B    74 06                     je          L$213 
143D    1E                        push        ds 
143E    68 C0 01                  push        offset DGROUP:L$262 
1441    EB 04                     jmp         L$214 
1443                          L$213:
1443    1E                        push        ds 
1444    68 A8 06                  push        offset DGROUP:L$312 
1447                          L$214:
1447    E8 00 00                  call        _cprintf 
144A    83 C4 04                  add         sp,0x0004 
144D    31 D2                     xor         dx,dx 
144F    B8 07 00                  mov         ax,0x0007 
1452    E8 00 00                  call        @rtc_set_loc 
1455    8C D2                     mov         dx,ss 
1457    8D 46 DE                  lea         ax,-0x22[bp] 
145A    E8 00 00                  call        Date_ 
145D    E8 00 00                  call        Time_ 
1460    8C D2                     mov         dx,ss 
1462    8D 46 DE                  lea         ax,-0x22[bp] 
1465    E8 00 00                  call        Floppy_ 
1468    31 C0                     xor         ax,ax 
146A    E8 00 00                  call        set_battery_ 
146D    88 46 DE                  mov         byte ptr -0x22[bp],al 
1470    1E                        push        ds 
1471    68 BF 06                  push        offset DGROUP:L$313 
1474    E8 00 00                  call        _cprintf 
1477    83 C4 04                  add         sp,0x0004 
147A    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
147D    30 E4                     xor         ah,ah 
147F    E8 00 00                  call        setup_fixed_ 
1482    88 46 E4                  mov         byte ptr -0x1c[bp],al 
1485    8A 46 E5                  mov         al,byte ptr -0x1b[bp] 
1488    24 0F                     and         al,0x0f 
148A    30 E4                     xor         ah,ah 
148C    31 D2                     xor         dx,dx 
148E    E8 00 00                  call        setup_dide_ 
1491    89 46 FE                  mov         word ptr -0x2[bp],ax 
1494    8A 46 E5                  mov         al,byte ptr -0x1b[bp] 
1497    30 E4                     xor         ah,ah 
1499    C1 F8 04                  sar         ax,0x04 
149C    BA 01 00                  mov         dx,0x0001 
149F    E8 00 00                  call        setup_dide_ 
14A2    C0 E0 04                  shl         al,0x04 
14A5    8A 66 FE                  mov         ah,byte ptr -0x2[bp] 
14A8    08 C4                     or          ah,al 
14AA    88 66 E5                  mov         byte ptr -0x1b[bp],ah 
14AD    8A 46 E6                  mov         al,byte ptr -0x1a[bp] 
14B0    30 E4                     xor         ah,ah 
14B2    E8 00 00                  call        setup_SDcard_ 
14B5    88 46 E6                  mov         byte ptr -0x1a[bp],al 
14B8    8A 46 E2                  mov         al,byte ptr -0x1e[bp] 
14BB    30 E4                     xor         ah,ah 
14BD    E8 00 00                  call        setup_boot_sig_check_ 
14C0    88 46 E2                  mov         byte ptr -0x1e[bp],al 
14C3    8A 46 E3                  mov         al,byte ptr -0x1d[bp] 
14C6    30 E4                     xor         ah,ah 
14C8    E8 00 00                  call        setup_serial_ 
14CB    88 46 E3                  mov         byte ptr -0x1d[bp],al 
14CE    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
14D3    30 C0                     xor         al,al 
14D5                          L$215:
14D5    8B 76 FE                  mov         si,word ptr -0x2[bp] 
14D8    2A 42 DE                  sub         al,byte ptr -0x22[bp+si] 
14DB    FF 46 FE                  inc         word ptr -0x2[bp] 
14DE    83 7E FE 1E               cmp         word ptr -0x2[bp],0x001e 
14E2    7C F1                     jl          L$215 
14E4    04 5A                     add         al,0x5a 
14E6    88 46 FC                  mov         byte ptr -0x4[bp],al 
14E9    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
14EE                          L$216:
14EE    8B 76 FE                  mov         si,word ptr -0x2[bp] 
14F1    8A 52 DE                  mov         dl,byte ptr -0x22[bp+si] 
14F4    30 F6                     xor         dh,dh 
14F6    89 F0                     mov         ax,si 
14F8    80 CC 80                  or          ah,0x80 
14FB    E8 00 00                  call        @rtc_set_loc 
14FE    FF 46 FE                  inc         word ptr -0x2[bp] 
1501    83 7E FE 1F               cmp         word ptr -0x2[bp],0x001f 
1505    7C E7                     jl          L$216 
1507    BA 80 00                  mov         dx,0x0080 
150A    B8 07 00                  mov         ax,0x0007 
150D    E8 00 00                  call        @rtc_set_loc 
1510    C9                        leave       
1511    5E                        pop         si 
1512    C3                        ret         

Routine Size: 311 bytes,    Routine Base: _TEXT + 13DC

1513                          @nvram_get_video:
1513    56                        push        si 
1514    89 C6                     mov         si,ax 
1516    E8 00 00                  call        @nvram_check 
1519    85 C0                     test        ax,ax 
151B    74 04                     je          L$217 
151D    89 F0                     mov         ax,si 
151F    EB 08                     jmp         L$218 
1521                          L$217:
1521    B8 05 80                  mov         ax,0x8005 
1524    E8 00 00                  call        @rtc_get_loc 
1527    30 E4                     xor         ah,ah 
1529                          L$218:
1529    3D 07 00                  cmp         ax,0x0007 
152C    7E 02                     jle         L$219 
152E    89 F0                     mov         ax,si 
1530                          L$219:
1530    5E                        pop         si 
1531    C3                        ret         

Routine Size: 31 bytes,    Routine Base: _TEXT + 1513

No disassembly errors

Segment: CONST WORD USE16 000006D4 bytes
0000                          L$220:
0000    53 75 6E 00                                     Sun.
0004                          L$221:
0004    4D 6F 6E 00                                     Mon.
0008                          L$222:
0008    54 75 65 00                                     Tue.
000C                          L$223:
000C    57 65 64 00                                     Wed.
0010                          L$224:
0010    54 68 75 00                                     Thu.
0014                          L$225:
0014    46 72 69 00                                     Fri.
0018                          L$226:
0018    53 61 74 00                                     Sat.
001C                          L$227:
001C    3F 3F 3F 00                                     ???.
0020                          L$228:
0020    4A 61 6E 00                                     Jan.
0024                          L$229:
0024    46 65 62 00                                     Feb.
0028                          L$230:
0028    4D 61 72 00                                     Mar.
002C                          L$231:
002C    41 70 72 00                                     Apr.
0030                          L$232:
0030    4D 61 79 00                                     May.
0034                          L$233:
0034    4A 75 6E 00                                     Jun.
0038                          L$234:
0038    4A 75 6C 00                                     Jul.
003C                          L$235:
003C    41 75 67 00                                     Aug.
0040                          L$236:
0040    53 65 70 00                                     Sep.
0044                          L$237:
0044    4F 63 74 00                                     Oct.
0048                          L$238:
0048    4E 6F 76 00                                     Nov.
004C                          L$239:
004C    44 65 63 00                                     Dec.
0050                          L$240:
0050    31 32 30 30 00                                  1200.
0055                          L$241:
0055    32 34 30 30 00                                  2400.
005A                          L$242:
005A    34 38 30 30 00                                  4800.
005F                          L$243:
005F    39 36 30 30 00                                  9600.
0064                          L$244:
0064    31 39 32 30 30 00                               19200.
006A                          L$245:
006A    33 38 34 30 30 00                               38400.
0070                          L$246:
0070    35 37 36 30 30 00                               57600.
0076                          L$247:
0076    31 31 35 32 30 30 00                            115200.
007D                          L$248:
007D    45 6E 00                                        En.
0080                          L$249:
0080    44 69 73 00                                     Dis.
0084                          L$250:
0084    54 72 69 63 6B 6C 65 20 63 68 61 72 67 65 20 62 Trickle charge b
0094    61 63 6B 75 70 20 69 73 20 25 73 61 62 6C 65 64 ackup is %sabled
00A4    2E 0A 00                                        ...
00A7                          L$251:
00A7    6E 00                                           n.
00A9                          L$252:
00A9    00                                              .
00AA                          L$253:
00AA    20 69 73 00                                      is.
00AE                          L$254:
00AE    73 20 61 72 65 00                               s are.
00B4                          L$255:
00B4    20 20 20 25 64 20 64 69 6F 64 65 25 73 20 75 73    %d diode%s us
00C4    65 64 2E 20 20 41 25 73 20 25 64 4B 20 72 65 73 ed.  A%s %dK res
00D4    69 73 74 6F 72 20 69 73 20 73 65 6C 65 63 74 65 istor is selecte
00E4    64 2E 0A 00                                     d...
00E8                          L$256:
00E8    44 69 6F 64 65 20 28 30 2C 31 2C 32 29 20 26 20 Diode (0,1,2) & 
00F8    52 65 73 69 73 74 6F 72 20 28 32 2C 34 2C 38 29 Resistor (2,4,8)
0108    20 5B 64 5B 2B 72 5D 5D 3A 20 00                 [d[+r]]: .
0113                          L$257:
0113    44 61 74 65 20 72 65 61 64 3A 20 20 25 73 20 25 Date read:  %s %
0123    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
0133    78 0A 00                                        x..
0136                          L$258:
0136    44 61 74 65 20 5B 6D 6D 2F 64 64 2F 79 79 79 79 Date [mm/dd/yyyy
0146    5D 3A 20 00                                     ]: .
014A                          L$259:
014A    42 69 6E 61 72 79 20 64 61 74 65 3A 20 20 25 64 Binary date:  %d
015A    2F 25 64 2F 25 64 0A 00                         /%d/%d..
0162                          L$260:
0162    49 6E 76 61 6C 69 64 20 64 61 74 65 20 65 6E 74 Invalid date ent
0172    65 72 65 64 2E 20 20 28 63 6F 64 65 20 25 64 29 ered.  (code %d)
0182    0A 00                                           ..
0184                          L$261:
0184    42 43 44 20 64 61 74 65 20 74 6F 20 62 65 20 73 BCD date to be s
0194    65 74 20 74 6F 20 44 53 31 33 30 32 3A 20 20 25 et to DS1302:  %
01A4    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
01B4    78 20 20 64 6F 77 28 25 78 29 0A 00             x  dow(%x)..
01C0                          L$262:
01C0    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 73 74 6F The clock is sto
01D0    70 70 65 64 2E 0A 00                            pped...
01D7                          L$263:
01D7    54 69 6D 65 20 72 65 61 64 3A 20 20 25 30 32 78 Time read:  %02x
01E7    3A 25 30 32 78 3A 25 30 32 78 0A 00             :%02x:%02x..
01F3                          L$264:
01F3    54 69 6D 65 20 5B 68 68 3A 6D 6D 5B 3A 73 73 5D Time [hh:mm[:ss]
0203    5D 3A 20 00                                     ]: .
0207                          L$265:
0207    52 65 61 64 20 69 6E 20 25 64 3A 25 30 32 64 3A Read in %d:%02d:
0217    25 30 32 64 0A 00                               %02d..
021D                          L$266:
021D    53 65 72 69 61 6C 20 70 6F 72 74 20 62 61 75 64 Serial port baud
022D    20 72 61 74 65 20 28 4B 62 69 74 2F 73 65 63 29  rate (Kbit/sec)
023D    20 5B 25 73 5D 3A 00                             [%s]:.
0244                          L$267:
0244    49 6E 76 61 6C 69 64 20 73 65 6C 65 63 74 69 6F Invalid selectio
0254    6E 2C 20 73 75 70 70 6F 72 74 65 64 20 76 61 6C n, supported val
0264    75 65 73 20 61 72 65 3A 00                      ues are:.
026D                          L$268:
026D    20 25 73 00                                      %s.
0271                          L$269:
0271    0A 00                                           ..
0273                          L$270:
0273    44 72 69 76 65 20 25 63 3A 20 64 69 73 6B 20 74 Drive %c: disk t
0283    79 70 65 20 5B 25 64 5D 3A 20 00                ype [%d]: .
028E                          L$271:
028E    46 6C 6F 70 70 79 20 54 79 70 65 73 20 61 72 65 Floppy Types are
029E    3A 0A 20 20 20 20 30 20 3D 20 6E 6F 74 20 70 72 :.    0 = not pr
02AE    65 73 65 6E 74 0A 20 20 20 20 31 20 3D 20 33 36 esent.    1 = 36
02BE    30 4B 20 35 2E 32 35 22 0A 20 20 20 20 32 20 3D 0K 5.25".    2 =
02CE    20 31 2E 32 4D 20 35 2E 32 35 22 0A 20 20 20 20  1.2M 5.25".    
02DE    33 20 3D 20 20 37 32 30 4B 20 33 2E 35 22 0A 20 3 =  720K 3.5". 
02EE    20 20 20 34 20 3D 20 31 2E 34 34 4D 20 33 2E 35    4 = 1.44M 3.5
02FE    22 0A 00                                        "..
0301                          L$272:
0301    2A 2A 2A 20 57 69 74 68 20 74 77 6F 20 66 6C 6F *** With two flo
0311    70 70 69 65 73 2C 20 61 6E 20 49 42 4D 20 63 61 ppies, an IBM ca
0321    62 6C 65 20 77 69 74 68 20 61 74 20 74 77 69 73 ble with at twis
0331    74 20 69 73 20 4D 41 4E 44 41 54 4F 52 59 2E 20 t is MANDATORY. 
0341    2A 2A 2A 0A 00                                  ***..
0346                          L$273:
0346    43 6F 6E 6E 65 63 74 20 61 20 73 69 6E 67 6C 65 Connect a single
0356    20 66 6C 6F 70 70 79 20 77 69 74 68 20 61 20 63  floppy with a c
0366    61 62 6C 65 20 77 69 74 68 20 6E 6F 20 74 77 69 able with no twi
0376    73 74 2E 0A 00                                  st...
037B                          L$274:
037B    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
038B    20 5B 53 42 43 2D 31 38 38 5D 20 50 50 49 44 45  [SBC-188] PPIDE
039B    20 66 69 78 65 64 20 64 69 73 6B 73 20 5B 25 64  fixed disks [%d
03AB    5D 3A 20 00                                     ]: .
03AF                          L$275:
03AF    41 00                                           A.
03B1                          L$276:
03B1    42 00                                           B.
03B3                          L$277:
03B3    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
03C3    20 43 6F 6E 6E 65 63 74 6F 72 2D 25 73 20 44 75  Connector-%s Du
03D3    61 6C 2D 49 44 45 20 66 69 78 65 64 20 64 69 73 al-IDE fixed dis
03E3    6B 73 20 5B 25 64 5D 3A 20 00                   ks [%d]: .
03ED                          L$278:
03ED    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
03FD    20 64 75 61 6C 20 53 44 63 61 72 64 20 73 6C 6F  dual SDcard slo
040D    74 73 20 5B 25 64 5D 3A 20 00                   ts [%d]: .
0417                          L$279:
0417    59 2F 6E 00                                     Y/n.
041B                          L$280:
041B    4E 2F 79 00                                     N/y.
041F                          L$281:
041F    43 68 65 63 6B 20 44 4F 53 20 62 6F 6F 74 20 73 Check DOS boot s
042F    69 67 6E 61 74 75 72 65 20 5B 25 73 5D 3A 20 00 ignature [%s]: .
043F                          L$282:
043F    25 73 00                                        %s.
0442                          L$283:
0442    50 50 49 44 45 00                               PPIDE.
0448                          L$284:
0448    44 49 44 45 30 00                               DIDE0.
044E                          L$285:
044E    44 49 44 45 31 00                               DIDE1.
0454                          L$286:
0454    20 20 20 25 73 20 66 69 78 65 64 20 64 69 73 6B    %s fixed disk
0464    20 25 63 3A 20 20 20 20 28 30 78 25 78 29 0A 00  %c:    (0x%x)..
0474                          L$287:
0474    4D 6F 64 65 6C 3A 20 00                         Model: .
047C                          L$288:
047C    0A 53 65 72 69 61 6C 3A 20 00                   .Serial: .
0486                          L$289:
0486    0A 46 69 72 6D 77 61 72 65 3A 20 00             .Firmware: .
0492                          L$290:
0492    6F 75 74 00                                     out.
0496                          L$291:
0496    0A 47 65 6F 6D 65 74 72 79 3A 20 20 25 75 3A 25 .Geometry:  %u:%
04A6    75 3A 25 75 20 20 20 77 69 74 68 25 73 20 4C 42 u:%u   with%s LB
04B6    41 20 73 75 70 70 6F 72 74 0A 00                A support..
04C1                          L$292:
04C1    43 75 72 72 65 6E 74 3A 20 20 20 25 75 3A 25 75 Current:   %u:%u
04D1    3A 25 75 20 20 20 63 61 70 61 63 69 74 79 3A 20 :%u   capacity: 
04E1    20 25 6C 75 0A 00                                %lu..
04E7                          L$293:
04E7    4C 42 41 20 53 65 63 74 6F 72 73 3A 20 20 25 6C LBA Sectors:  %l
04F7    75 00                                           u.
04F9                          L$294:
04F9    20 20 20 28 34 38 2D 62 69 74 29 3A 20 20 30 78    (48-bit):  0x
0509    25 6C 78 25 30 38 6C 78 0A 00                   %lx%08lx..
0513                          L$295:
0513    54 72 61 6E 73 6C 61 74 65 64 20 67 65 6F 6D 65 Translated geome
0523    74 72 79 3A 20 20 25 75 3A 25 75 3A 25 75 20 20 try:  %u:%u:%u  
0533    20 63 61 70 61 63 69 74 79 3A 20 20 25 6C 64 0A  capacity:  %ld.
0543    00                                              .
0544                          L$296:
0544    53 44 20 63 61 72 64 5B 25 64 5D 3A 20 20 00    SD card[%d]:  .
0553                          L$297:
0553    6E 6F 20 63 61 72 64 0A 0A 00                   no card...
055D                          L$298:
055D    20 20 00                                          .
0560                          L$299:
0560    0A 43 53 44 20 76 65 72 73 69 6F 6E 20 25 64 2E .CSD version %d.
0570    30 20 20 20 00                                  0   .
0575                          L$300:
0575    43 6F 6D 6D 61 6E 64 20 43 6C 61 73 73 65 73 3A Command Classes:
0585    20 20 30 78 25 30 33 58 20 28 25 30 35 6F 29 0A   0x%03X (%05o).
0595    00                                              .
0596                          L$301:
0596    73 2F 6E 3A 25 32 30 6C 64 20 20 20 66 6D 77 3A s/n:%20ld   fmw:
05A6    20 20 25 64 2E 25 64 20 20 20 64 2F 63 3A 20 20   %d.%d   d/c:  
05B6    25 64 2D 25 30 32 64 0A 00                      %d-%02d..
05BF                          L$302:
05BF    4C 42 41 53 75 70 70 6F 72 74 65 64 20 20 20 20 LBASupported    
05CF    55 73 65 72 41 64 64 72 65 73 73 61 62 6C 65 53 UserAddressableS
05DF    65 63 74 6F 72 73 20 25 6C 64 0A 00             ectors %ld..
05EB                          L$303:
05EB    20 20 20 43 3D 25 64 20 20 20 48 3D 25 64 20 20    C=%d   H=%d  
05FB    20 53 3D 25 64 0A 00                             S=%d..
0602                          L$304:
0602    53 44 63 61 72 64 00                            SDcard.
0609                          L$305:
0609    46 6C 6F 70 70 79 20 25 63 3A 20 74 79 70 65 20 Floppy %c: type 
0619    25 64 0A 00                                     %d..
061D                          L$306:
061D    0A 50 50 49 3D 25 64 20 20 44 49 44 45 30 3D 25 .PPI=%d  DIDE0=%
062D    64 20 20 44 49 44 45 31 3D 25 64 20 20 44 53 44 d  DIDE1=%d  DSD
063D    3D 25 64 20 20 55 6E 69 74 73 3D 25 64 20 20 20 =%d  Units=%d   
064D    62 64 69 73 6B 3D 25 30 32 78 0A 00             bdisk=%02x..
0659                          L$307:
0659    0A 46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 3A .Fixed_Disk_Tab:
0669    20 00                                            .
066B                          L$308:
066B    20 25 30 32 78 00                                %02x.
0671                          L$309:
0671    0A 0A 00                                        ...
0674                          L$310:
0674    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
0684    73 20 69 6E 76 61 6C 69 64 0A 00                s invalid..
068F                          L$311:
068F    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
069F    73 20 76 61 6C 69 64 0A 00                      s valid..
06A8                          L$312:
06A8    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 72 75 6E The clock is run
06B8    6E 69 6E 67 2E 0A 00                            ning...
06BF                          L$313:
06BF    20 20 20 46 69 78 65 64 20 44 69 73 6B 20 53 65    Fixed Disk Se
06CF    74 75 70 0A 00                                  tup..

Segment: CONST2 WORD USE16 0000007E bytes
0000                          _dpm0:
0000    1F 1E 1F 1E 1F 1F 1E 1F 1E 1F 1F 1C             ............
000C                          _dow:
000C    00 00 00 00                                     DD	DGROUP:L$220
0010    04 00 00 00                                     DD	DGROUP:L$221
0014    08 00 00 00                                     DD	DGROUP:L$222
0018    0C 00 00 00                                     DD	DGROUP:L$223
001C    10 00 00 00                                     DD	DGROUP:L$224
0020    14 00 00 00                                     DD	DGROUP:L$225
0024    18 00 00 00                                     DD	DGROUP:L$226
0028    1C 00 00 00                                     DD	DGROUP:L$227
002C                          _month:
002C    20 00 00 00                                     DD	DGROUP:L$228
0030    24 00 00 00                                     DD	DGROUP:L$229
0034    28 00 00 00                                     DD	DGROUP:L$230
0038    2C 00 00 00                                     DD	DGROUP:L$231
003C    30 00 00 00                                     DD	DGROUP:L$232
0040    34 00 00 00                                     DD	DGROUP:L$233
0044    38 00 00 00                                     DD	DGROUP:L$234
0048    3C 00 00 00                                     DD	DGROUP:L$235
004C    40 00 00 00                                     DD	DGROUP:L$236
0050    44 00 00 00                                     DD	DGROUP:L$237
0054    48 00 00 00                                     DD	DGROUP:L$238
0058    4C 00 00 00                                     DD	DGROUP:L$239
005C                          _rates:
005C    50 00 00 00                                     DD	DGROUP:L$240
0060    55 00 00 00                                     DD	DGROUP:L$241
0064    5A 00 00 00                                     DD	DGROUP:L$242
0068    5F 00 00 00                                     DD	DGROUP:L$243
006C    64 00 00 00                                     DD	DGROUP:L$244
0070    6A 00 00 00                                     DD	DGROUP:L$245
0074    70 00 00 00                                     DD	DGROUP:L$246
0078    76 00 00 00                                     DD	DGROUP:L$247
007C                          _ftype_OK:
007C    1F 00                                           ..

Segment: _DATA WORD USE16 00000000 bytes

