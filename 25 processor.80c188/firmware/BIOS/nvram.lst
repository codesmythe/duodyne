Module: /mnt/fileserver/Vintage/Projects/duodyne/25 processor.80c188/firmware/BIOS/nvram.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT BYTE USE16 00001511 bytes
0000                          set_battery_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    52                        push        dx 
0003    56                        push        si 
0004    C8 56 00 00               enter       0x0056,0x00 
0008    B8 08 00                  mov         ax,0x0008 
000B    E8 00 00                  call        @rtc_get_loc 
000E    88 46 FC                  mov         byte ptr -0x4[bp],al 
0011    24 F0                     and         al,0xf0 
0013    3C A0                     cmp         al,0xa0 
0015    75 05                     jne         L$1 
0017    BE 01 00                  mov         si,0x0001 
001A    EB 02                     jmp         L$2 
001C                          L$1:
001C    31 F6                     xor         si,si 
001E                          L$2:
001E    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0021    30 E4                     xor         ah,ah 
0023    89 C3                     mov         bx,ax 
0025    C1 FB 02                  sar         bx,0x02 
0028    83 E3 03                  and         bx,0x0003 
002B    88 5E FE                  mov         byte ptr -0x2[bp],bl 
002E    24 03                     and         al,0x03 
0030    88 46 FA                  mov         byte ptr -0x6[bp],al 
0033    80 FB 01                  cmp         bl,0x01 
0036    74 05                     je          L$3 
0038    80 FB 02                  cmp         bl,0x02 
003B    75 05                     jne         L$4 
003D                          L$3:
003D    B8 01 00                  mov         ax,0x0001 
0040    EB 02                     jmp         L$5 
0042                          L$4:
0042    30 C0                     xor         al,al 
0044                          L$5:
0044    21 C6                     and         si,ax 
0046    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
004A    74 05                     je          L$6 
004C    BA 01 00                  mov         dx,0x0001 
004F    EB 02                     jmp         L$7 
0051                          L$6:
0051    31 D2                     xor         dx,dx 
0053                          L$7:
0053    21 D6                     and         si,dx 
0055    74 0C                     je          L$8 
0057    8A 4E FA                  mov         cl,byte ptr -0x6[bp] 
005A    B0 01                     mov         al,0x01 
005C    D2 E0                     shl         al,cl 
005E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0061    EB 04                     jmp         L$9 
0063                          L$8:
0063    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
0067                          L$9:
0067    85 F6                     test        si,si 
0069    74 05                     je          L$10 
006B    B8 7D 00                  mov         ax,offset DGROUP:L$245 
006E    EB 03                     jmp         L$11 
0070                          L$10:
0070    B8 80 00                  mov         ax,offset DGROUP:L$246 
0073                          L$11:
0073    8C DB                     mov         bx,ds 
0075    53                        push        bx 
0076    50                        push        ax 
0077    1E                        push        ds 
0078    68 84 00                  push        offset DGROUP:L$247 
007B    E8 00 00                  call        _cprintf 
007E    83 C4 08                  add         sp,0x0008 
0081    85 F6                     test        si,si 
0083    74 38                     je          L$16 
0085    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0088    30 E4                     xor         ah,ah 
008A    50                        push        ax 
008B    3C 08                     cmp         al,0x08 
008D    75 05                     jne         L$12 
008F    B8 A7 00                  mov         ax,offset DGROUP:L$248 
0092    EB 03                     jmp         L$13 
0094                          L$12:
0094    B8 A9 00                  mov         ax,offset DGROUP:L$249 
0097                          L$13:
0097    8C DB                     mov         bx,ds 
0099    53                        push        bx 
009A    50                        push        ax 
009B    80 7E FE 01               cmp         byte ptr -0x2[bp],0x01 
009F    75 05                     jne         L$14 
00A1    BA AA 00                  mov         dx,offset DGROUP:L$250 
00A4    EB 03                     jmp         L$15 
00A6                          L$14:
00A6    BA AE 00                  mov         dx,offset DGROUP:L$251 
00A9                          L$15:
00A9    8C DB                     mov         bx,ds 
00AB    53                        push        bx 
00AC    52                        push        dx 
00AD    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
00B0    30 F6                     xor         dh,dh 
00B2    52                        push        dx 
00B3    1E                        push        ds 
00B4    68 B4 00                  push        offset DGROUP:L$252 
00B7    E8 00 00                  call        _cprintf 
00BA    83 C4 10                  add         sp,0x0010 
00BD                          L$16:
00BD    BE 01 00                  mov         si,0x0001 
00C0                          L$17:
00C0    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00C3    30 E4                     xor         ah,ah 
00C5    50                        push        ax 
00C6    1E                        push        ds 
00C7    68 E8 00                  push        offset DGROUP:L$253 
00CA    E8 00 00                  call        _cprintf 
00CD    83 C4 06                  add         sp,0x0006 
00D0    BB 50 00                  mov         bx,0x0050 
00D3    8C D2                     mov         dx,ss 
00D5    8D 46 AA                  lea         ax,-0x56[bp] 
00D8    E8 00 00                  call        getline_ 
00DB    16                        push        ss 
00DC    07                        pop         es 
00DD    8D 5E AA                  lea         bx,-0x56[bp] 
00E0                          L$18:
00E0    26 8A 07                  mov         al,byte ptr es:[bx] 
00E3    3C 20                     cmp         al,0x20 
00E5    74 04                     je          L$19 
00E7    3C 09                     cmp         al,0x09 
00E9    75 03                     jne         L$20 
00EB                          L$19:
00EB    43                        inc         bx 
00EC    EB F2                     jmp         L$18 
00EE                          L$20:
00EE    84 C0                     test        al,al 
00F0    74 0A                     je          L$21 
00F2    89 D8                     mov         ax,bx 
00F4    8C C2                     mov         dx,es 
00F6    E8 00 00                  call        atoi_ 
00F9    88 46 FE                  mov         byte ptr -0x2[bp],al 
00FC                          L$21:
00FC    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00FF    84 C0                     test        al,al 
0101    75 05                     jne         L$22 
0103    88 46 FC                  mov         byte ptr -0x4[bp],al 
0106    EB 12                     jmp         L$24 
0108                          L$22:
0108    3C 01                     cmp         al,0x01 
010A    75 06                     jne         L$23 
010C    C6 46 FC A5               mov         byte ptr -0x4[bp],0xa5 
0110    EB 08                     jmp         L$24 
0112                          L$23:
0112    3C 02                     cmp         al,0x02 
0114    75 AA                     jne         L$17 
0116    C6 46 FC AA               mov         byte ptr -0x4[bp],0xaa 
011A                          L$24:
011A    85 F6                     test        si,si 
011C    7C A2                     jl          L$17 
011E    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
0121    30 F6                     xor         dh,dh 
0123    B8 08 00                  mov         ax,0x0008 
0126    E8 00 00                  call        @rtc_set_loc 
0129    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
012C    E9 AC 05                  jmp         L$86 

Routine Size: 303 bytes,    Routine Base: _TEXT + 0000

012F                          idow_:
012F    51                        push        cx 
0130    56                        push        si 
0131    57                        push        di 
0132    C8 10 00 00               enter       0x0010,0x00 
0136    50                        push        ax 
0137    52                        push        dx 
0138    89 DE                     mov         si,bx 
013A    BB 64 00                  mov         bx,0x0064 
013D    89 F0                     mov         ax,si 
013F    99                        cwd         
0140    F7 FB                     idiv        bx 
0142    31 FF                     xor         di,di 
0144                          L$25:
0144    8A 85 00 00               mov         al,byte ptr _dpm0[di] 
0148    88 43 F0                  mov         byte ptr -0x10[bp+di],al 
014B    47                        inc         di 
014C    83 FF 0C                  cmp         di,0x000c 
014F    7C F3                     jl          L$25 
0151    81 FE 2F 06               cmp         si,0x062f 
0155    7C 19                     jl          L$26 
0157    81 FE 0F 27               cmp         si,0x270f 
015B    7F 13                     jg          L$26 
015D    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0160    3D 01 00                  cmp         ax,0x0001 
0163    7C 0B                     jl          L$26 
0165    3D 0C 00                  cmp         ax,0x000c 
0168    7F 06                     jg          L$26 
016A    83 7E EE 01               cmp         word ptr -0x12[bp],0x0001 
016E    7D 06                     jge         L$27 
0170                          L$26:
0170    B8 63 00                  mov         ax,0x0063 
0173    E9 B4 00                  jmp         L$36 
0176                          L$27:
0176    89 D0                     mov         ax,dx 
0178    C1 F8 0F                  sar         ax,0x0f 
017B    89 D3                     mov         bx,dx 
017D    31 C3                     xor         bx,ax 
017F    29 C3                     sub         bx,ax 
0181    83 E3 03                  and         bx,0x0003 
0184    31 C3                     xor         bx,ax 
0186    29 C3                     sub         bx,ax 
0188    75 04                     jne         L$28 
018A    85 D2                     test        dx,dx 
018C    75 0C                     jne         L$29 
018E                          L$28:
018E    BB 90 01                  mov         bx,0x0190 
0191    89 F0                     mov         ax,si 
0193    99                        cwd         
0194    F7 FB                     idiv        bx 
0196    85 D2                     test        dx,dx 
0198    75 05                     jne         L$30 
019A                          L$29:
019A    BB 01 00                  mov         bx,0x0001 
019D    EB 02                     jmp         L$31 
019F                          L$30:
019F    31 DB                     xor         bx,bx 
01A1                          L$31:
01A1    89 5E FE                  mov         word ptr -0x2[bp],bx 
01A4    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
01A7    00 46 FB                  add         byte ptr -0x5[bp],al 
01AA    83 6E EC 03               sub         word ptr -0x14[bp],0x0003 
01AE    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
01B2    7D 05                     jge         L$32 
01B4    83 46 EC 0C               add         word ptr -0x14[bp],0x000c 
01B8    4E                        dec         si 
01B9                          L$32:
01B9    8B 7E EC                  mov         di,word ptr -0x14[bp] 
01BC    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01BF    30 E4                     xor         ah,ah 
01C1    3B 46 EE                  cmp         ax,word ptr -0x12[bp] 
01C4    7D 05                     jge         L$33 
01C6    B8 62 00                  mov         ax,0x0062 
01C9    EB 5F                     jmp         L$36 
01CB                          L$33:
01CB    BB 64 00                  mov         bx,0x0064 
01CE    89 F0                     mov         ax,si 
01D0    99                        cwd         
01D1    F7 FB                     idiv        bx 
01D3    89 46 FC                  mov         word ptr -0x4[bp],ax 
01D6    89 F0                     mov         ax,si 
01D8    99                        cwd         
01D9    F7 FB                     idiv        bx 
01DB    89 D6                     mov         si,dx 
01DD    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
01E2                          L$34:
01E2    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
01E5    3B 5E EC                  cmp         bx,word ptr -0x14[bp] 
01E8    7D 0F                     jge         L$35 
01EA    89 DF                     mov         di,bx 
01EC    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01EF    30 E4                     xor         ah,ah 
01F1    01 46 EE                  add         word ptr -0x12[bp],ax 
01F4    FF 46 FE                  inc         word ptr -0x2[bp] 
01F7    EB E9                     jmp         L$34 
01F9                          L$35:
01F9    6B 5E FC 05               imul        bx,word ptr -0x4[bp],0x0005 
01FD    01 F3                     add         bx,si 
01FF    89 F0                     mov         ax,si 
0201    99                        cwd         
0202    B1 02                     mov         cl,0x02 
0204    D3 E2                     shl         dx,cl 
0206    1B C2                     sbb         ax,dx 
0208    D3 F8                     sar         ax,cl 
020A    01 C3                     add         bx,ax 
020C    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
020F    99                        cwd         
0210    B1 02                     mov         cl,0x02 
0212    D3 E2                     shl         dx,cl 
0214    1B C2                     sbb         ax,dx 
0216    D3 F8                     sar         ax,cl 
0218    01 D8                     add         ax,bx 
021A    40                        inc         ax 
021B    40                        inc         ax 
021C    01 46 EE                  add         word ptr -0x12[bp],ax 
021F    BB 07 00                  mov         bx,0x0007 
0222    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0225    99                        cwd         
0226    F7 FB                     idiv        bx 
0228    89 D0                     mov         ax,dx 
022A                          L$36:
022A    C9                        leave       
022B    5F                        pop         di 
022C    5E                        pop         si 
022D    59                        pop         cx 
022E    C3                        ret         

Routine Size: 256 bytes,    Routine Base: _TEXT + 012F

022F                          Date_:
022F    53                        push        bx 
0230    51                        push        cx 
0231    56                        push        si 
0232    57                        push        di 
0233    C8 6E 00 00               enter       0x006e,0x00 
0237    50                        push        ax 
0238    52                        push        dx 
0239    B8 03 00                  mov         ax,0x0003 
023C    E8 00 00                  call        @rtc_get_loc 
023F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0242    B8 04 00                  mov         ax,0x0004 
0245    E8 00 00                  call        @rtc_get_loc 
0248    88 46 F8                  mov         byte ptr -0x8[bp],al 
024B    B8 05 00                  mov         ax,0x0005 
024E    E8 00 00                  call        @rtc_get_loc 
0251    88 46 F6                  mov         byte ptr -0xa[bp],al 
0254    88 46 FA                  mov         byte ptr -0x6[bp],al 
0257    B8 06 00                  mov         ax,0x0006 
025A    E8 00 00                  call        @rtc_get_loc 
025D    88 46 F4                  mov         byte ptr -0xc[bp],al 
0260    B8 01 80                  mov         ax,0x8001 
0263    E8 00 00                  call        @rtc_get_loc 
0266    88 46 FC                  mov         byte ptr -0x4[bp],al 
0269    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
026C    3C 01                     cmp         al,0x01 
026E    72 04                     jb          L$37 
0270    3C 07                     cmp         al,0x07 
0272    76 04                     jbe         L$38 
0274                          L$37:
0274    C6 46 FA 08               mov         byte ptr -0x6[bp],0x08 
0278                          L$38:
0278    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
027B    84 C0                     test        al,al 
027D    75 16                     jne         L$39 
027F    B0 01                     mov         al,0x01 
0281    88 46 F8                  mov         byte ptr -0x8[bp],al 
0284    88 46 FE                  mov         byte ptr -0x2[bp],al 
0287    C6 46 FA 03               mov         byte ptr -0x6[bp],0x03 
028B    C6 46 F4 80               mov         byte ptr -0xc[bp],0x80 
028F    C6 46 FC 19               mov         byte ptr -0x4[bp],0x19 
0293    EB 0A                     jmp         L$40 
0295                          L$39:
0295    8E 46 8E                  mov         es,word ptr -0x72[bp] 
0298    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
029B    26 88 47 01               mov         byte ptr es:0x1[bx],al 
029F                          L$40:
029F    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
02A2    30 E4                     xor         ah,ah 
02A4    50                        push        ax 
02A5    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
02A8    50                        push        ax 
02A9    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02AC    50                        push        ax 
02AD    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
02B0    50                        push        ax 
02B1    8A 5E FA                  mov         bl,byte ptr -0x6[bp] 
02B4    30 FF                     xor         bh,bh 
02B6    C1 E3 02                  shl         bx,0x02 
02B9    FF B7 FE FF               push        word ptr _dow-0x2[bx] 
02BD    FF B7 FC FF               push        word ptr _dow-0x4[bx] 
02C1    1E                        push        ds 
02C2    68 2F 01                  push        offset DGROUP:L$254 
02C5    E8 00 00                  call        _cprintf 
02C8    83 C4 10                  add         sp,0x0010 
02CB    1E                        push        ds 
02CC    68 52 01                  push        offset DGROUP:L$255 
02CF    E8 00 00                  call        _cprintf 
02D2    83 C4 04                  add         sp,0x0004 
02D5    BB 50 00                  mov         bx,0x0050 
02D8    8C D2                     mov         dx,ss 
02DA    8D 46 92                  lea         ax,-0x6e[bp] 
02DD    E8 00 00                  call        getline_ 
02E0    8A 46 92                  mov         al,byte ptr -0x6e[bp] 
02E3    84 C0                     test        al,al 
02E5    75 05                     jne         L$41 
02E7    30 E4                     xor         ah,ah 
02E9    E9 E9 01                  jmp         L$60 
02EC                          L$41:
02EC    B1 2F                     mov         cl,0x2f 
02EE    8C D2                     mov         dx,ss 
02F0    8D 76 92                  lea         si,-0x6e[bp] 
02F3    1E                        push        ds 
02F4    8E DA                     mov         ds,dx 
02F6                          L$42:
02F6    8A 04                     mov         al,byte ptr [si] 
02F8    3A C1                     cmp         al,cl 
02FA    74 09                     je          L$43 
02FC    46                        inc         si 
02FD    3C 00                     cmp         al,0x00 
02FF    75 F5                     jne         L$42 
0301    2B F6                     sub         si,si 
0303    2B D2                     sub         dx,dx 
0305                          L$43:
0305    1F                        pop         ds 
0306    89 56 E2                  mov         word ptr -0x1e[bp],dx 
0309    85 D2                     test        dx,dx 
030B    75 09                     jne         L$45 
030D    85 F6                     test        si,si 
030F    75 05                     jne         L$45 
0311                          L$44:
0311    31 C0                     xor         ax,ax 
0313    E9 BF 01                  jmp         L$60 
0316                          L$45:
0316    8E C2                     mov         es,dx 
0318    26 C6 04 00               mov         byte ptr es:[si],0x00 
031C    8D 5C 01                  lea         bx,0x1[si] 
031F    8C D2                     mov         dx,ss 
0321    8D 46 92                  lea         ax,-0x6e[bp] 
0324    E8 00 00                  call        atoi_ 
0327    89 C7                     mov         di,ax 
0329    89 DE                     mov         si,bx 
032B    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
032E    1E                        push        ds 
032F    8E DA                     mov         ds,dx 
0331                          L$46:
0331    8A 04                     mov         al,byte ptr [si] 
0333    3A C1                     cmp         al,cl 
0335    74 09                     je          L$47 
0337    46                        inc         si 
0338    3C 00                     cmp         al,0x00 
033A    75 F5                     jne         L$46 
033C    2B F6                     sub         si,si 
033E    2B D2                     sub         dx,dx 
0340                          L$47:
0340    1F                        pop         ds 
0341    89 D1                     mov         cx,dx 
0343    85 D2                     test        dx,dx 
0345    75 04                     jne         L$48 
0347    85 F6                     test        si,si 
0349    74 C6                     je          L$44 
034B                          L$48:
034B    8E C2                     mov         es,dx 
034D    26 C6 04 00               mov         byte ptr es:[si],0x00 
0351    46                        inc         si 
0352    89 D8                     mov         ax,bx 
0354    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
0357    E8 00 00                  call        atoi_ 
035A    89 46 E4                  mov         word ptr -0x1c[bp],ax 
035D    89 F0                     mov         ax,si 
035F    89 CA                     mov         dx,cx 
0361    E8 00 00                  call        atoi_ 
0364    89 C6                     mov         si,ax 
0366    3D 63 00                  cmp         ax,0x0063 
0369    7F 0C                     jg          L$50 
036B    3D 50 00                  cmp         ax,0x0050 
036E    7D 03                     jge         L$49 
0370    83 C6 64                  add         si,0x0064 
0373                          L$49:
0373    81 C6 6C 07               add         si,0x076c 
0377                          L$50:
0377    56                        push        si 
0378    FF 76 E4                  push        word ptr -0x1c[bp] 
037B    57                        push        di 
037C    1E                        push        ds 
037D    68 66 01                  push        offset DGROUP:L$256 
0380    E8 00 00                  call        _cprintf 
0383    83 C4 0A                  add         sp,0x000a 
0386    83 FF 64                  cmp         di,0x0064 
0389    7D 16                     jge         L$51 
038B    89 F8                     mov         ax,di 
038D    99                        cwd         
038E    BB 0A 00                  mov         bx,0x000a 
0391    F7 FB                     idiv        bx 
0393    89 C1                     mov         cx,ax 
0395    C1 E1 04                  shl         cx,0x04 
0398    89 F8                     mov         ax,di 
039A    99                        cwd         
039B    F7 FB                     idiv        bx 
039D    09 D1                     or          cx,dx 
039F    EB 03                     jmp         L$52 
03A1                          L$51:
03A1    B9 FF 00                  mov         cx,0x00ff 
03A4                          L$52:
03A4    88 4E F8                  mov         byte ptr -0x8[bp],cl 
03A7    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03AA    3D 64 00                  cmp         ax,0x0064 
03AD    7D 15                     jge         L$53 
03AF    99                        cwd         
03B0    BB 0A 00                  mov         bx,0x000a 
03B3    F7 FB                     idiv        bx 
03B5    89 C1                     mov         cx,ax 
03B7    C1 E1 04                  shl         cx,0x04 
03BA    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03BD    99                        cwd         
03BE    F7 FB                     idiv        bx 
03C0    09 D1                     or          cx,dx 
03C2    EB 03                     jmp         L$54 
03C4                          L$53:
03C4    B9 FF 00                  mov         cx,0x00ff 
03C7                          L$54:
03C7    88 4E FE                  mov         byte ptr -0x2[bp],cl 
03CA    89 F0                     mov         ax,si 
03CC    99                        cwd         
03CD    BB 64 00                  mov         bx,0x0064 
03D0    F7 FB                     idiv        bx 
03D2    89 C1                     mov         cx,ax 
03D4    39 D8                     cmp         ax,bx 
03D6    7D 1B                     jge         L$55 
03D8    99                        cwd         
03D9    BB 0A 00                  mov         bx,0x000a 
03DC    F7 FB                     idiv        bx 
03DE    C1 E0 04                  shl         ax,0x04 
03E1    89 46 EA                  mov         word ptr -0x16[bp],ax 
03E4    89 C8                     mov         ax,cx 
03E6    99                        cwd         
03E7    F7 FB                     idiv        bx 
03E9    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
03EC    09 D0                     or          ax,dx 
03EE    89 46 F2                  mov         word ptr -0xe[bp],ax 
03F1    EB 05                     jmp         L$56 
03F3                          L$55:
03F3    C7 46 F2 FF 00            mov         word ptr -0xe[bp],0x00ff 
03F8                          L$56:
03F8    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
03FB    88 46 FC                  mov         byte ptr -0x4[bp],al 
03FE    89 F0                     mov         ax,si 
0400    99                        cwd         
0401    BB 64 00                  mov         bx,0x0064 
0404    F7 FB                     idiv        bx 
0406    89 D1                     mov         cx,dx 
0408    39 DA                     cmp         dx,bx 
040A    7D 1D                     jge         L$57 
040C    89 D0                     mov         ax,dx 
040E    99                        cwd         
040F    BB 0A 00                  mov         bx,0x000a 
0412    F7 FB                     idiv        bx 
0414    C1 E0 04                  shl         ax,0x04 
0417    89 46 EA                  mov         word ptr -0x16[bp],ax 
041A    89 C8                     mov         ax,cx 
041C    99                        cwd         
041D    F7 FB                     idiv        bx 
041F    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0422    09 D0                     or          ax,dx 
0424    89 46 F0                  mov         word ptr -0x10[bp],ax 
0427    EB 05                     jmp         L$58 
0429                          L$57:
0429    C7 46 F0 FF 00            mov         word ptr -0x10[bp],0x00ff 
042E                          L$58:
042E    89 F3                     mov         bx,si 
0430    89 FA                     mov         dx,di 
0432    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
0435    E8 00 00                  call        idow_ 
0438    3C 07                     cmp         al,0x07 
043A    76 10                     jbe         L$59 
043C    30 E4                     xor         ah,ah 
043E    50                        push        ax 
043F    1E                        push        ds 
0440    68 7E 01                  push        offset DGROUP:L$257 
0443    E8 00 00                  call        _cprintf 
0446    83 C4 06                  add         sp,0x0006 
0449    E9 C5 FE                  jmp         L$44 
044C                          L$59:
044C    FE C0                     inc         al 
044E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0451    88 46 EA                  mov         byte ptr -0x16[bp],al 
0454    C6 46 EB 00               mov         byte ptr -0x15[bp],0x00 
0458    FF 76 EA                  push        word ptr -0x16[bp] 
045B    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
045E    88 46 E6                  mov         byte ptr -0x1a[bp],al 
0461    C6 46 E7 00               mov         byte ptr -0x19[bp],0x00 
0465    FF 76 E6                  push        word ptr -0x1a[bp] 
0468    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
046B    88 46 E8                  mov         byte ptr -0x18[bp],al 
046E    C6 46 E9 00               mov         byte ptr -0x17[bp],0x00 
0472    FF 76 E8                  push        word ptr -0x18[bp] 
0475    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0478    88 46 EC                  mov         byte ptr -0x14[bp],al 
047B    C6 46 ED 00               mov         byte ptr -0x13[bp],0x00 
047F    FF 76 EC                  push        word ptr -0x14[bp] 
0482    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0485    88 46 EE                  mov         byte ptr -0x12[bp],al 
0488    C6 46 EF 00               mov         byte ptr -0x11[bp],0x00 
048C    FF 76 EE                  push        word ptr -0x12[bp] 
048F    1E                        push        ds 
0490    68 A0 01                  push        offset DGROUP:L$258 
0493    E8 00 00                  call        _cprintf 
0496    83 C4 0E                  add         sp,0x000e 
0499    31 D2                     xor         dx,dx 
049B    B8 07 00                  mov         ax,0x0007 
049E    E8 00 00                  call        @rtc_set_loc 
04A1    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
04A4    B8 03 00                  mov         ax,0x0003 
04A7    E8 00 00                  call        @rtc_set_loc 
04AA    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
04AD    B8 04 00                  mov         ax,0x0004 
04B0    E8 00 00                  call        @rtc_set_loc 
04B3    8B 56 EA                  mov         dx,word ptr -0x16[bp] 
04B6    B8 05 00                  mov         ax,0x0005 
04B9    E8 00 00                  call        @rtc_set_loc 
04BC    8B 56 E6                  mov         dx,word ptr -0x1a[bp] 
04BF    B8 06 00                  mov         ax,0x0006 
04C2    E8 00 00                  call        @rtc_set_loc 
04C5    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
04C8    8E 46 8E                  mov         es,word ptr -0x72[bp] 
04CB    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
04CE    26 88 47 01               mov         byte ptr es:0x1[bx],al 
04D2    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
04D5                          L$60:
04D5    C9                        leave       
04D6    5F                        pop         di 
04D7                          L$61:
04D7    5E                        pop         si 
04D8    59                        pop         cx 
04D9    5B                        pop         bx 
04DA    C3                        ret         

Routine Size: 684 bytes,    Routine Base: _TEXT + 022F

04DB                          Time_:
04DB    53                        push        bx 
04DC    51                        push        cx 
04DD    52                        push        dx 
04DE    56                        push        si 
04DF    57                        push        di 
04E0    C8 5A 00 00               enter       0x005a,0x00 
04E4    31 C0                     xor         ax,ax 
04E6    E8 00 00                  call        @rtc_get_loc 
04E9    88 46 F6                  mov         byte ptr -0xa[bp],al 
04EC    C6 46 F7 00               mov         byte ptr -0x9[bp],0x00 
04F0    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
04F3    89 46 FA                  mov         word ptr -0x6[bp],ax 
04F6    B8 01 00                  mov         ax,0x0001 
04F9    E8 00 00                  call        @rtc_get_loc 
04FC    88 46 FC                  mov         byte ptr -0x4[bp],al 
04FF    C6 46 FD 00               mov         byte ptr -0x3[bp],0x00 
0503    8B 7E FC                  mov         di,word ptr -0x4[bp] 
0506    B8 02 00                  mov         ax,0x0002 
0509    E8 00 00                  call        @rtc_get_loc 
050C    88 C3                     mov         bl,al 
050E    30 FF                     xor         bh,bh 
0510    89 5E FE                  mov         word ptr -0x2[bp],bx 
0513    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
0517    74 0C                     je          L$62 
0519    1E                        push        ds 
051A    68 DC 01                  push        offset DGROUP:L$259 
051D    E8 00 00                  call        _cprintf 
0520    83 C4 04                  add         sp,0x0004 
0523    EB 0F                     jmp         L$63 
0525                          L$62:
0525    FF 76 F6                  push        word ptr -0xa[bp] 
0528    57                        push        di 
0529    53                        push        bx 
052A    1E                        push        ds 
052B    68 F3 01                  push        offset DGROUP:L$260 
052E    E8 00 00                  call        _cprintf 
0531    83 C4 0A                  add         sp,0x000a 
0534                          L$63:
0534    1E                        push        ds 
0535    68 0F 02                  push        offset DGROUP:L$261 
0538    E8 00 00                  call        _cprintf 
053B    83 C4 04                  add         sp,0x0004 
053E    BB 50 00                  mov         bx,0x0050 
0541    8C D2                     mov         dx,ss 
0543    8D 46 A6                  lea         ax,-0x5a[bp] 
0546    E8 00 00                  call        getline_ 
0549    80 7E A6 00               cmp         byte ptr -0x5a[bp],0x00 
054D    74 65                     je          L$69 
054F    B1 3A                     mov         cl,0x3a 
0551    8C D2                     mov         dx,ss 
0553    8D 76 A6                  lea         si,-0x5a[bp] 
0556    1E                        push        ds 
0557    8E DA                     mov         ds,dx 
0559                          L$64:
0559    8A 04                     mov         al,byte ptr [si] 
055B    3A C1                     cmp         al,cl 
055D    74 09                     je          L$65 
055F    46                        inc         si 
0560    3C 00                     cmp         al,0x00 
0562    75 F5                     jne         L$64 
0564    2B F6                     sub         si,si 
0566    2B D2                     sub         dx,dx 
0568                          L$65:
0568    1F                        pop         ds 
0569    89 D3                     mov         bx,dx 
056B    85 D2                     test        dx,dx 
056D    75 04                     jne         L$66 
056F    85 F6                     test        si,si 
0571    74 69                     je          L$73 
0573                          L$66:
0573    8E C2                     mov         es,dx 
0575    26 C6 04 00               mov         byte ptr es:[si],0x00 
0579    89 56 F8                  mov         word ptr -0x8[bp],dx 
057C    8D 7C 01                  lea         di,0x1[si] 
057F    8C D2                     mov         dx,ss 
0581    8D 46 A6                  lea         ax,-0x5a[bp] 
0584    E8 00 00                  call        atoi_ 
0587    89 46 FE                  mov         word ptr -0x2[bp],ax 
058A    89 FE                     mov         si,di 
058C    89 DA                     mov         dx,bx 
058E    1E                        push        ds 
058F    8E DA                     mov         ds,dx 
0591                          L$67:
0591    8A 04                     mov         al,byte ptr [si] 
0593    3A C1                     cmp         al,cl 
0595    74 09                     je          L$68 
0597    46                        inc         si 
0598    3C 00                     cmp         al,0x00 
059A    75 F5                     jne         L$67 
059C    2B F6                     sub         si,si 
059E    2B D2                     sub         dx,dx 
05A0                          L$68:
05A0    1F                        pop         ds 
05A1    89 F1                     mov         cx,si 
05A3    89 D3                     mov         bx,dx 
05A5    85 D2                     test        dx,dx 
05A7    75 0E                     jne         L$70 
05A9    85 F6                     test        si,si 
05AB    75 0A                     jne         L$70 
05AD    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
05B2    EB 0C                     jmp         L$71 
05B4                          L$69:
05B4    E9 E5 00                  jmp         L$82 
05B7                          L$70:
05B7    8E C2                     mov         es,dx 
05B9    26 C6 04 00               mov         byte ptr es:[si],0x00 
05BD    8D 4C 01                  lea         cx,0x1[si] 
05C0                          L$71:
05C0    89 F8                     mov         ax,di 
05C2    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
05C5    E8 00 00                  call        atoi_ 
05C8    89 C7                     mov         di,ax 
05CA    85 DB                     test        bx,bx 
05CC    75 04                     jne         L$72 
05CE    85 C9                     test        cx,cx 
05D0    74 0A                     je          L$73 
05D2                          L$72:
05D2    89 C8                     mov         ax,cx 
05D4    89 DA                     mov         dx,bx 
05D6    E8 00 00                  call        atoi_ 
05D9    89 46 FA                  mov         word ptr -0x6[bp],ax 
05DC                          L$73:
05DC    83 7E FE 17               cmp         word ptr -0x2[bp],0x0017 
05E0    76 03                     jbe         L$75 
05E2                          L$74:
05E2    E9 4F FF                  jmp         L$63 
05E5                          L$75:
05E5    83 FF 3B                  cmp         di,0x003b 
05E8    77 F8                     ja          L$74 
05EA    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
05ED    3D 3B 00                  cmp         ax,0x003b 
05F0    77 F0                     ja          L$74 
05F2    50                        push        ax 
05F3    57                        push        di 
05F4    FF 76 FE                  push        word ptr -0x2[bp] 
05F7    1E                        push        ds 
05F8    68 23 02                  push        offset DGROUP:L$262 
05FB    E8 00 00                  call        _cprintf 
05FE    83 C4 0A                  add         sp,0x000a 
0601    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0604    3D 64 00                  cmp         ax,0x0064 
0607    73 19                     jae         L$76 
0609    31 D2                     xor         dx,dx 
060B    BB 0A 00                  mov         bx,0x000a 
060E    F7 F3                     div         bx 
0610    89 C1                     mov         cx,ax 
0612    C1 E1 04                  shl         cx,0x04 
0615    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0618    31 D2                     xor         dx,dx 
061A    F7 F3                     div         bx 
061C    89 CB                     mov         bx,cx 
061E    09 D3                     or          bx,dx 
0620    EB 03                     jmp         L$77 
0622                          L$76:
0622    BB FF 00                  mov         bx,0x00ff 
0625                          L$77:
0625    88 DA                     mov         dl,bl 
0627    30 F6                     xor         dh,dh 
0629    89 56 FA                  mov         word ptr -0x6[bp],dx 
062C    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
062F    80 CA 80                  or          dl,0x80 
0632    31 C0                     xor         ax,ax 
0634    E8 00 00                  call        @rtc_set_loc 
0637    83 FF 64                  cmp         di,0x0064 
063A    73 1B                     jae         L$78 
063C    89 F8                     mov         ax,di 
063E    31 D2                     xor         dx,dx 
0640    BB 0A 00                  mov         bx,0x000a 
0643    F7 F3                     div         bx 
0645    89 C3                     mov         bx,ax 
0647    C1 E3 04                  shl         bx,0x04 
064A    89 F8                     mov         ax,di 
064C    31 D2                     xor         dx,dx 
064E    B9 0A 00                  mov         cx,0x000a 
0651    F7 F1                     div         cx 
0653    09 D3                     or          bx,dx 
0655    EB 03                     jmp         L$79 
0657                          L$78:
0657    BB FF 00                  mov         bx,0x00ff 
065A                          L$79:
065A    88 DA                     mov         dl,bl 
065C    30 F6                     xor         dh,dh 
065E    B8 01 00                  mov         ax,0x0001 
0661    E8 00 00                  call        @rtc_set_loc 
0664    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0667    3D 64 00                  cmp         ax,0x0064 
066A    73 19                     jae         L$80 
066C    31 D2                     xor         dx,dx 
066E    BB 0A 00                  mov         bx,0x000a 
0671    F7 F3                     div         bx 
0673    89 C1                     mov         cx,ax 
0675    C1 E1 04                  shl         cx,0x04 
0678    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
067B    31 D2                     xor         dx,dx 
067D    F7 F3                     div         bx 
067F    89 CB                     mov         bx,cx 
0681    09 D3                     or          bx,dx 
0683    EB 03                     jmp         L$81 
0685                          L$80:
0685    BB FF 00                  mov         bx,0x00ff 
0688                          L$81:
0688    88 DA                     mov         dl,bl 
068A    30 F6                     xor         dh,dh 
068C    B8 02 00                  mov         ax,0x0002 
068F    E8 00 00                  call        @rtc_set_loc 
0692    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0695    30 F6                     xor         dh,dh 
0697    31 C0                     xor         ax,ax 
0699    E8 00 00                  call        @rtc_set_loc 
069C                          L$82:
069C    C9                        leave       
069D    5F                        pop         di 
069E    EB 3C                     jmp         L$87 

Routine Size: 453 bytes,    Routine Base: _TEXT + 04DB

06A0                          setup_spp_:
06A0    53                        push        bx 
06A1    51                        push        cx 
06A2    52                        push        dx 
06A3    56                        push        si 
06A4    C8 14 00 00               enter       0x0014,0x00 
06A8    89 C6                     mov         si,ax 
06AA                          L$83:
06AA    56                        push        si 
06AB    1E                        push        ds 
06AC    68 39 02                  push        offset DGROUP:L$263 
06AF    E8 00 00                  call        _cprintf 
06B2    83 C4 06                  add         sp,0x0006 
06B5    BB 14 00                  mov         bx,0x0014 
06B8    8C D2                     mov         dx,ss 
06BA    8D 46 EC                  lea         ax,-0x14[bp] 
06BD    E8 00 00                  call        getline_ 
06C0    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
06C4    74 0A                     je          L$84 
06C6    8C D2                     mov         dx,ss 
06C8    8D 46 EC                  lea         ax,-0x14[bp] 
06CB    E8 00 00                  call        atoi_ 
06CE    89 C6                     mov         si,ax 
06D0                          L$84:
06D0    85 F6                     test        si,si 
06D2    7C D6                     jl          L$83 
06D4    83 FE 01                  cmp         si,0x0001 
06D7    7F D1                     jg          L$83 
06D9                          L$85:
06D9    89 F0                     mov         ax,si 
06DB                          L$86:
06DB    C9                        leave       
06DC                          L$87:
06DC    5E                        pop         si 
06DD                          L$88:
06DD    5A                        pop         dx 
06DE    59                        pop         cx 
06DF    5B                        pop         bx 
06E0    C3                        ret         

Routine Size: 65 bytes,    Routine Base: _TEXT + 06A0

06E1                          setup_spp_b_:
06E1    53                        push        bx 
06E2    51                        push        cx 
06E3    52                        push        dx 
06E4    C8 02 00 00               enter       0x0002,0x00 
06E8    C7 46 FE 06 00            mov         word ptr -0x2[bp],0x0006 
06ED    68 C0 04                  push        0x04c0 
06F0    1E                        push        ds 
06F1    68 6A 02                  push        offset DGROUP:L$264 
06F4    E8 00 00                  call        _cprintf 
06F7    83 C4 06                  add         sp,0x0006 
06FA    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
06FD    C9                        leave       
06FE    EB DD                     jmp         L$88 

Routine Size: 31 bytes,    Routine Base: _TEXT + 06E1

0700                          setup_serial_:
0700    53                        push        bx 
0701    51                        push        cx 
0702    52                        push        dx 
0703    56                        push        si 
0704    57                        push        di 
0705    C8 0E 00 00               enter       0x000e,0x00 
0709    88 46 FE                  mov         byte ptr -0x2[bp],al 
070C                          L$89:
070C    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
070F    30 FF                     xor         bh,bh 
0711    C1 E3 02                  shl         bx,0x02 
0714    FF B7 02 00               push        word ptr _rates+0x2[bx] 
0718    FF B7 00 00               push        word ptr _rates[bx] 
071C    1E                        push        ds 
071D    68 91 02                  push        offset DGROUP:L$265 
0720    E8 00 00                  call        _cprintf 
0723    83 C4 08                  add         sp,0x0008 
0726    BB 0A 00                  mov         bx,0x000a 
0729    8C D2                     mov         dx,ss 
072B    8D 46 F2                  lea         ax,-0xe[bp] 
072E    E8 00 00                  call        getline_ 
0731    80 7E F2 00               cmp         byte ptr -0xe[bp],0x00 
0735    74 07                     je          L$90 
0737    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
073C    EB 0C                     jmp         L$92 
073E                          L$90:
073E    E9 79 00                  jmp         L$97 
0741                          L$91:
0741    FF 46 FC                  inc         word ptr -0x4[bp] 
0744    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
0748    7D 2D                     jge         L$95 
074A                          L$92:
074A    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
074D    C1 E3 02                  shl         bx,0x02 
0750    C4 BF 00 00               les         di,dword ptr _rates[bx] 
0754    8C D6                     mov         si,ss 
0756    8D 46 F2                  lea         ax,-0xe[bp] 
0759    1E                        push        ds 
075A    96                        xchg        ax,si 
075B    8E D8                     mov         ds,ax 
075D                          L$93:
075D    AC                        lodsb       
075E    26 8A 25                  mov         ah,byte ptr es:[di] 
0761    2A C4                     sub         al,ah 
0763    75 05                     jne         L$94 
0765    47                        inc         di 
0766    3A C4                     cmp         al,ah 
0768    75 F3                     jne         L$93 
076A                          L$94:
076A    18 E4                     sbb         ah,ah 
076C    1F                        pop         ds 
076D    85 C0                     test        ax,ax 
076F    75 D0                     jne         L$91 
0771    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0774    88 46 FE                  mov         byte ptr -0x2[bp],al 
0777                          L$95:
0777    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
077B    75 3D                     jne         L$97 
077D    1E                        push        ds 
077E    68 BC 02                  push        offset DGROUP:L$266 
0781    E8 00 00                  call        _cprintf 
0784    83 C4 04                  add         sp,0x0004 
0787    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
078C                          L$96:
078C    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
078F    C1 E3 02                  shl         bx,0x02 
0792    FF B7 02 00               push        word ptr _rates+0x2[bx] 
0796    FF B7 00 00               push        word ptr _rates[bx] 
079A    1E                        push        ds 
079B    68 E5 02                  push        offset DGROUP:L$267 
079E    E8 00 00                  call        _cprintf 
07A1    83 C4 08                  add         sp,0x0008 
07A4    FF 46 FC                  inc         word ptr -0x4[bp] 
07A7    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
07AB    7C DF                     jl          L$96 
07AD    1E                        push        ds 
07AE    68 E9 02                  push        offset DGROUP:L$268 
07B1    E8 00 00                  call        _cprintf 
07B4    83 C4 04                  add         sp,0x0004 
07B7    E9 52 FF                  jmp         L$89 
07BA                          L$97:
07BA    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
07BD    E9 DC FE                  jmp         L$82 

Routine Size: 192 bytes,    Routine Base: _TEXT + 0700

07C0                          floppy_ask_:
07C0    51                        push        cx 
07C1    56                        push        si 
07C2    57                        push        di 
07C3    C8 1A 00 00               enter       0x001a,0x00 
07C7    89 C6                     mov         si,ax 
07C9    89 D7                     mov         di,dx 
07CB    89 5E FA                  mov         word ptr -0x6[bp],bx 
07CE    8D 47 02                  lea         ax,0x2[bx] 
07D1    01 C6                     add         si,ax 
07D3    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
07D6    04 41                     add         al,0x41 
07D8    88 46 FC                  mov         byte ptr -0x4[bp],al 
07DB                          L$98:
07DB    8E C7                     mov         es,di 
07DD    26 8A 04                  mov         al,byte ptr es:[si] 
07E0    24 0F                     and         al,0x0f 
07E2    88 46 FE                  mov         byte ptr -0x2[bp],al 
07E5    30 E4                     xor         ah,ah 
07E7    50                        push        ax 
07E8    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
07EB    50                        push        ax 
07EC    1E                        push        ds 
07ED    68 EB 02                  push        offset DGROUP:L$269 
07F0    E8 00 00                  call        _cprintf 
07F3    83 C4 08                  add         sp,0x0008 
07F6    BB 14 00                  mov         bx,0x0014 
07F9    8C D2                     mov         dx,ss 
07FB    8D 46 E6                  lea         ax,-0x1a[bp] 
07FE    E8 00 00                  call        getline_ 
0801    80 7E E6 00               cmp         byte ptr -0x1a[bp],0x00 
0805    74 0B                     je          L$99 
0807    8C D2                     mov         dx,ss 
0809    8D 46 E6                  lea         ax,-0x1a[bp] 
080C    E8 00 00                  call        atoi_ 
080F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0812                          L$99:
0812    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
0815    B8 01 00                  mov         ax,0x0001 
0818    D3 E0                     shl         ax,cl 
081A    85 06 00 00               test        word ptr _ftype_OK,ax 
081E    74 BB                     je          L$98 
0820    8E C7                     mov         es,di 
0822    26 88 0C                  mov         byte ptr es:[si],cl 
0825    84 C9                     test        cl,cl 
0827    75 0A                     jne         L$100 
0829    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
082D    75 04                     jne         L$100 
082F    26 88 4C 01               mov         byte ptr es:0x1[si],cl 
0833                          L$100:
0833    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0836    30 E4                     xor         ah,ah 
0838    E9 EF F9                  jmp         L$36 

Routine Size: 123 bytes,    Routine Base: _TEXT + 07C0

083B                          Floppy_:
083B    53                        push        bx 
083C    51                        push        cx 
083D    56                        push        si 
083E    57                        push        di 
083F    C8 02 00 00               enter       0x0002,0x00 
0843    89 C7                     mov         di,ax 
0845    89 56 FE                  mov         word ptr -0x2[bp],dx 
0848    31 F6                     xor         si,si 
084A    1E                        push        ds 
084B    68 06 03                  push        offset DGROUP:L$270 
084E    E8 00 00                  call        _cprintf 
0851    83 C4 04                  add         sp,0x0004 
0854    31 C9                     xor         cx,cx 
0856    EB 0C                     jmp         L$102 
0858                          L$101:
0858    01 C6                     add         si,ax 
085A    41                        inc         cx 
085B    85 D2                     test        dx,dx 
085D    74 1A                     je          L$103 
085F    83 F9 02                  cmp         cx,0x0002 
0862    7D 15                     jge         L$103 
0864                          L$102:
0864    89 CB                     mov         bx,cx 
0866    89 F8                     mov         ax,di 
0868    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
086B    E8 00 00                  call        floppy_ask_ 
086E    89 C2                     mov         dx,ax 
0870    85 C0                     test        ax,ax 
0872    74 E4                     je          L$101 
0874    B8 01 00                  mov         ax,0x0001 
0877    EB DF                     jmp         L$101 
0879                          L$103:
0879    83 FE 01                  cmp         si,0x0001 
087C    76 06                     jbe         L$104 
087E    1E                        push        ds 
087F    68 79 03                  push        offset DGROUP:L$271 
0882    EB 0B                     jmp         L$107 
0884                          L$104:
0884    85 F6                     test        si,si 
0886    75 03                     jne         L$106 
0888                          L$105:
0888    E9 4A FC                  jmp         L$60 
088B                          L$106:
088B    1E                        push        ds 
088C    68 BE 03                  push        offset DGROUP:L$272 
088F                          L$107:
088F    E8 00 00                  call        _cprintf 
0892    83 C4 04                  add         sp,0x0004 
0895    EB F1                     jmp         L$105 

Routine Size: 92 bytes,    Routine Base: _TEXT + 083B

0897                          @nvram_check:
0897    56                        push        si 
0898    57                        push        di 
0899    C8 04 00 00               enter       0x0004,0x00 
089D    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
08A1    BE 00 00                  mov         si,offset _unique 
08A4    BF 00 00                  mov         di,seg _unique 
08A7                          L$108:
08A7    8E C7                     mov         es,di 
08A9    26 8A 04                  mov         al,byte ptr es:[si] 
08AC    46                        inc         si 
08AD    84 C0                     test        al,al 
08AF    74 0F                     je          L$109 
08B1    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
08B4    30 F6                     xor         dh,dh 
08B6    30 E4                     xor         ah,ah 
08B8    E8 00 00                  call        @stepCRC7 
08BB    88 46 FE                  mov         byte ptr -0x2[bp],al 
08BE    EB E7                     jmp         L$108 
08C0                          L$109:
08C0    31 F6                     xor         si,si 
08C2                          L$110:
08C2    89 F0                     mov         ax,si 
08C4    80 CC 80                  or          ah,0x80 
08C7    E8 00 00                  call        @rtc_get_loc 
08CA    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
08CD    30 F6                     xor         dh,dh 
08CF    30 E4                     xor         ah,ah 
08D1    E8 00 00                  call        @stepCRC7 
08D4    88 46 FC                  mov         byte ptr -0x4[bp],al 
08D7    88 46 FE                  mov         byte ptr -0x2[bp],al 
08DA    46                        inc         si 
08DB    83 FE 1D                  cmp         si,0x001d 
08DE    7C E2                     jl          L$110 
08E0    B8 1E 80                  mov         ax,0x801e 
08E3    E8 00 00                  call        @rtc_get_loc 
08E6    3A 46 FC                  cmp         al,byte ptr -0x4[bp] 
08E9    74 05                     je          L$111 
08EB    B8 01 00                  mov         ax,0x0001 
08EE    EB 02                     jmp         L$112 
08F0                          L$111:
08F0    31 C0                     xor         ax,ax 
08F2                          L$112:
08F2    C9                        leave       
08F3    5F                        pop         di 
08F4    5E                        pop         si 
08F5    C3                        ret         

Routine Size: 95 bytes,    Routine Base: _TEXT + 0897

08F6                          @compute_nvram_checksum:
08F6    56                        push        si 
08F7    57                        push        di 
08F8    55                        push        bp 
08F9    89 E5                     mov         bp,sp 
08FB    30 C0                     xor         al,al 
08FD    BE 00 00                  mov         si,offset _unique 
0900    BF 00 00                  mov         di,seg _unique 
0903                          L$113:
0903    8E C7                     mov         es,di 
0905    26 8A 24                  mov         ah,byte ptr es:[si] 
0908    46                        inc         si 
0909    84 E4                     test        ah,ah 
090B    74 0D                     je          L$114 
090D    88 C2                     mov         dl,al 
090F    30 F6                     xor         dh,dh 
0911    88 E0                     mov         al,ah 
0913    30 E4                     xor         ah,ah 
0915    E8 00 00                  call        @stepCRC7 
0918    EB E9                     jmp         L$113 
091A                          L$114:
091A    31 F6                     xor         si,si 
091C                          L$115:
091C    88 C2                     mov         dl,al 
091E    30 F6                     xor         dh,dh 
0920    C4 5E 08                  les         bx,dword ptr 0x8[bp] 
0923    01 F3                     add         bx,si 
0925    26 8A 07                  mov         al,byte ptr es:[bx] 
0928    30 E4                     xor         ah,ah 
092A    E8 00 00                  call        @stepCRC7 
092D    88 C4                     mov         ah,al 
092F    46                        inc         si 
0930    83 FE 1D                  cmp         si,0x001d 
0933    7C E7                     jl          L$115 
0935    30 C4                     xor         ah,al 
0937    5D                        pop         bp 
0938    5F                        pop         di 
0939    5E                        pop         si 
093A    C2 04 00                  ret         0x0004 

Routine Size: 71 bytes,    Routine Base: _TEXT + 08F6

093D                          setup_ppide_:
093D    53                        push        bx 
093E    51                        push        cx 
093F    52                        push        dx 
0940    56                        push        si 
0941    C8 14 00 00               enter       0x0014,0x00 
0945    89 C6                     mov         si,ax 
0947                          L$116:
0947    56                        push        si 
0948    1E                        push        ds 
0949    68 F3 03                  push        offset DGROUP:L$273 
094C    E8 00 00                  call        _cprintf 
094F    83 C4 06                  add         sp,0x0006 
0952    BB 14 00                  mov         bx,0x0014 
0955    8C D2                     mov         dx,ss 
0957    8D 46 EC                  lea         ax,-0x14[bp] 
095A    E8 00 00                  call        getline_ 
095D    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
0961    74 0A                     je          L$117 
0963    8C D2                     mov         dx,ss 
0965    8D 46 EC                  lea         ax,-0x14[bp] 
0968    E8 00 00                  call        atoi_ 
096B    89 C6                     mov         si,ax 
096D                          L$117:
096D    85 F6                     test        si,si 
096F    7C D6                     jl          L$116 
0971    83 FE 02                  cmp         si,0x0002 
0974    7F D1                     jg          L$116 
0976    E9 60 FD                  jmp         L$85 

Routine Size: 60 bytes,    Routine Base: _TEXT + 093D

0979                          setup_fixed_boot_:
0979    53                        push        bx 
097A    51                        push        cx 
097B    56                        push        si 
097C    57                        push        di 
097D    C8 16 00 00               enter       0x0016,0x00 
0981    89 C1                     mov         cx,ax 
0983    8E C2                     mov         es,dx 
0985    89 C3                     mov         bx,ax 
0987    26 8A 47 0C               mov         al,byte ptr es:0xc[bx] 
098B    30 E4                     xor         ah,ah 
098D    89 C7                     mov         di,ax 
098F    31 F6                     xor         si,si 
0991    C7 46 FE 06 00            mov         word ptr -0x2[bp],0x0006 
0996    8E C2                     mov         es,dx 
0998                          L$118:
0998    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
099B    01 CB                     add         bx,cx 
099D    26 8A 07                  mov         al,byte ptr es:[bx] 
09A0    30 E4                     xor         ah,ah 
09A2    01 C6                     add         si,ax 
09A4    FF 46 FE                  inc         word ptr -0x2[bp] 
09A7    83 7E FE 0C               cmp         word ptr -0x2[bp],0x000c 
09AB    7C EB                     jl          L$118 
09AD    B8 01 00                  mov         ax,0x0001 
09B0    89 46 FE                  mov         word ptr -0x2[bp],ax 
09B3    83 FE 04                  cmp         si,0x0004 
09B6    7E 05                     jle         L$119 
09B8    BE 04 00                  mov         si,0x0004 
09BB    EB 0B                     jmp         L$120 
09BD                          L$119:
09BD    39 C6                     cmp         si,ax 
09BF    7F 07                     jg          L$120 
09C1    89 F7                     mov         di,si 
09C3    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
09C8                          L$120:
09C8    39 F7                     cmp         di,si 
09CA    7F 04                     jg          L$121 
09CC    85 FF                     test        di,di 
09CE    75 03                     jne         L$122 
09D0                          L$121:
09D0    BF 01 00                  mov         di,0x0001 
09D3                          L$122:
09D3    83 7E FE 00               cmp         word ptr -0x2[bp],0x0000 
09D7    74 2F                     je          L$123 
09D9    57                        push        di 
09DA    56                        push        si 
09DB    1E                        push        ds 
09DC    68 27 04                  push        offset DGROUP:L$274 
09DF    E8 00 00                  call        _cprintf 
09E2    83 C4 08                  add         sp,0x0008 
09E5    BB 14 00                  mov         bx,0x0014 
09E8    8C D2                     mov         dx,ss 
09EA    8D 46 EA                  lea         ax,-0x16[bp] 
09ED    E8 00 00                  call        getline_ 
09F0    80 7E EA 00               cmp         byte ptr -0x16[bp],0x00 
09F4    74 12                     je          L$123 
09F6    8C D2                     mov         dx,ss 
09F8    8D 46 EA                  lea         ax,-0x16[bp] 
09FB    E8 00 00                  call        atoi_ 
09FE    89 C7                     mov         di,ax 
0A00    85 C0                     test        ax,ax 
0A02    7E CF                     jle         L$122 
0A04    39 F0                     cmp         ax,si 
0A06    7F CB                     jg          L$122 
0A08                          L$123:
0A08    89 F8                     mov         ax,di 
0A0A    E9 C8 FA                  jmp         L$60 

Routine Size: 148 bytes,    Routine Base: _TEXT + 0979

0A0D                          setup_boot_sig_check_:
0A0D    53                        push        bx 
0A0E    51                        push        cx 
0A0F    52                        push        dx 
0A10    56                        push        si 
0A11    C8 14 00 00               enter       0x0014,0x00 
0A15    50                        push        ax 
0A16    F6 46 EA 02               test        byte ptr -0x16[bp],0x02 
0A1A    75 05                     jne         L$124 
0A1C    BE 01 00                  mov         si,0x0001 
0A1F    EB 02                     jmp         L$125 
0A21                          L$124:
0A21    31 F6                     xor         si,si 
0A23                          L$125:
0A23    85 F6                     test        si,si 
0A25    74 05                     je          L$127 
0A27                          L$126:
0A27    BA 4D 04                  mov         dx,offset DGROUP:L$275 
0A2A    EB 03                     jmp         L$128 
0A2C                          L$127:
0A2C    BA 51 04                  mov         dx,offset DGROUP:L$276 
0A2F                          L$128:
0A2F    8C D8                     mov         ax,ds 
0A31    50                        push        ax 
0A32    52                        push        dx 
0A33    1E                        push        ds 
0A34    68 55 04                  push        offset DGROUP:L$277 
0A37    E8 00 00                  call        _cprintf 
0A3A    83 C4 08                  add         sp,0x0008 
0A3D    BB 14 00                  mov         bx,0x0014 
0A40    8C D2                     mov         dx,ss 
0A42    8D 46 EC                  lea         ax,-0x14[bp] 
0A45    E8 00 00                  call        getline_ 
0A48    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
0A4B    84 C0                     test        al,al 
0A4D    74 21                     je          L$131 
0A4F    3C 4E                     cmp         al,0x4e 
0A51    72 10                     jb          L$129 
0A53    76 24                     jbe         L$132 
0A55    3C 79                     cmp         al,0x79 
0A57    74 26                     je          L$133 
0A59    3C 6E                     cmp         al,0x6e 
0A5B    74 1C                     je          L$132 
0A5D    3C 59                     cmp         al,0x59 
0A5F    74 1E                     je          L$133 
0A61    EB 08                     jmp         L$130 
0A63                          L$129:
0A63    3C 31                     cmp         al,0x31 
0A65    74 18                     je          L$133 
0A67    3C 30                     cmp         al,0x30 
0A69    74 0E                     je          L$132 
0A6B                          L$130:
0A6B    BE 02 00                  mov         si,0x0002 
0A6E    EB B7                     jmp         L$126 
0A70                          L$131:
0A70    83 FE 01                  cmp         si,0x0001 
0A73    77 AE                     ja          L$125 
0A75    85 F6                     test        si,si 
0A77    75 06                     jne         L$133 
0A79                          L$132:
0A79    80 4E EA 02               or          byte ptr -0x16[bp],0x02 
0A7D    EB 04                     jmp         L$134 
0A7F                          L$133:
0A7F    80 66 EA FD               and         byte ptr -0x16[bp],0xfd 
0A83                          L$134:
0A83    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0A86    E9 52 FC                  jmp         L$86 

Routine Size: 124 bytes,    Routine Base: _TEXT + 0A0D

0A89                          putstring_:
0A89    51                        push        cx 
0A8A    56                        push        si 
0A8B    57                        push        di 
0A8C    C8 82 00 00               enter       0x0082,0x00 
0A90    89 C6                     mov         si,ax 
0A92    89 56 FE                  mov         word ptr -0x2[bp],dx 
0A95    89 DA                     mov         dx,bx 
0A97    8C D7                     mov         di,ss 
0A99    8D 9E 7E FF               lea         bx,-0x82[bp] 
0A9D    31 C0                     xor         ax,ax 
0A9F                          L$135:
0A9F    39 D0                     cmp         ax,dx 
0AA1    7D 1F                     jge         L$136 
0AA3    46                        inc         si 
0AA4    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0AA7    26 8A 0C                  mov         cl,byte ptr es:[si] 
0AAA    8E C7                     mov         es,di 
0AAC    26 88 0F                  mov         byte ptr es:[bx],cl 
0AAF    43                        inc         bx 
0AB0    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0AB3    26 8A 4C FF               mov         cl,byte ptr es:-0x1[si] 
0AB7    8E C7                     mov         es,di 
0AB9    26 88 0F                  mov         byte ptr es:[bx],cl 
0ABC    43                        inc         bx 
0ABD    46                        inc         si 
0ABE    40                        inc         ax 
0ABF    40                        inc         ax 
0AC0    EB DD                     jmp         L$135 
0AC2                          L$136:
0AC2    8E C7                     mov         es,di 
0AC4    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0AC8    8E C7                     mov         es,di 
0ACA                          L$137:
0ACA    8D 86 7E FF               lea         ax,-0x82[bp] 
0ACE    39 C3                     cmp         bx,ax 
0AD0    76 0E                     jbe         L$138 
0AD2    26 80 7F FF 20            cmp         byte ptr es:-0x1[bx],0x20 
0AD7    77 07                     ja          L$138 
0AD9    4B                        dec         bx 
0ADA    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0ADE    EB EA                     jmp         L$137 
0AE0                          L$138:
0AE0    8C D7                     mov         di,ss 
0AE2    8D 9E 7E FF               lea         bx,-0x82[bp] 
0AE6    8E C7                     mov         es,di 
0AE8                          L$139:
0AE8    26 8A 07                  mov         al,byte ptr es:[bx] 
0AEB    84 C0                     test        al,al 
0AED    74 07                     je          L$140 
0AEF    3C 20                     cmp         al,0x20 
0AF1    77 03                     ja          L$140 
0AF3    43                        inc         bx 
0AF4    EB F2                     jmp         L$139 
0AF6                          L$140:
0AF6    57                        push        di 
0AF7    53                        push        bx 
0AF8    1E                        push        ds 
0AF9    68 75 04                  push        offset DGROUP:L$278 
0AFC    E8 00 00                  call        _cprintf 
0AFF    83 C4 08                  add         sp,0x0008 
0B02    E9 25 F7                  jmp         L$36 

Routine Size: 124 bytes,    Routine Base: _TEXT + 0A89

0B05                          p_bda_fx_:
0B05    53                        push        bx 
0B06    51                        push        cx 
0B07    56                        push        si 
0B08    C8 02 00 00               enter       0x0002,0x00 
0B0C    88 C1                     mov         cl,al 
0B0E    A1 00 00                  mov         ax,word ptr _bios_data_area_ptr 
0B11    8B 36 02 00               mov         si,word ptr _bios_data_area_ptr+0x2 
0B15    05 B0 00                  add         ax,0x00b0 
0B18    80 F9 80                  cmp         cl,0x80 
0B1B    75 05                     jne         L$141 
0B1D    BB 04 01                  mov         bx,0x0104 
0B20    EB 0C                     jmp         L$143 
0B22                          L$141:
0B22    80 F9 81                  cmp         cl,0x81 
0B25    75 05                     jne         L$142 
0B27    BB 18 01                  mov         bx,0x0118 
0B2A    EB 02                     jmp         L$143 
0B2C                          L$142:
0B2C    31 DB                     xor         bx,bx 
0B2E                          L$143:
0B2E    31 D2                     xor         dx,dx 
0B30    80 E1 0F                  and         cl,0x0f 
0B33    88 4E FE                  mov         byte ptr -0x2[bp],cl 
0B36    C6 46 FF 00               mov         byte ptr -0x1[bp],0x00 
0B3A    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0B3D    C1 E1 04                  shl         cx,0x04 
0B40    01 C8                     add         ax,cx 
0B42    89 D1                     mov         cx,dx 
0B44    09 D9                     or          cx,bx 
0B46    74 09                     je          L$144 
0B48    8E C2                     mov         es,dx 
0B4A    26 89 07                  mov         word ptr es:[bx],ax 
0B4D    26 89 77 02               mov         word ptr es:0x2[bx],si 
0B51                          L$144:
0B51    89 F2                     mov         dx,si 
0B53    C9                        leave       
0B54    E9 80 F9                  jmp         L$61 

Routine Size: 82 bytes,    Routine Base: _TEXT + 0B05

0B57                          @setup_fixed_disk:
0B57    56                        push        si 
0B58    57                        push        di 
0B59    C8 14 02 00               enter       0x0214,0x00 
0B5D    88 C6                     mov         dh,al 
0B5F    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0B62    88 5E F8                  mov         byte ptr -0x8[bp],bl 
0B65    8A 46 08                  mov         al,byte ptr 0x8[bp] 
0B68    C0 E0 04                  shl         al,0x04 
0B6B    88 46 FC                  mov         byte ptr -0x4[bp],al 
0B6E    88 D0                     mov         al,dl 
0B70    30 E4                     xor         ah,ah 
0B72    50                        push        ax 
0B73    88 F0                     mov         al,dh 
0B75    50                        push        ax 
0B76    80 FB 02                  cmp         bl,0x02 
0B79    75 05                     jne         L$145 
0B7B    BA 78 04                  mov         dx,offset DGROUP:L$279 
0B7E    EB 03                     jmp         L$146 
0B80                          L$145:
0B80    BA 7E 04                  mov         dx,offset DGROUP:L$280 
0B83                          L$146:
0B83    8C D8                     mov         ax,ds 
0B85    50                        push        ax 
0B86    52                        push        dx 
0B87    1E                        push        ds 
0B88    68 86 04                  push        offset DGROUP:L$281 
0B8B    E8 00 00                  call        _cprintf 
0B8E    83 C4 0C                  add         sp,0x000c 
0B91    80 7E F8 02               cmp         byte ptr -0x8[bp],0x02 
0B95    75 12                     jne         L$147 
0B97    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0B9A    30 E4                     xor         ah,ah 
0B9C    50                        push        ax 
0B9D    8D 96 EC FD               lea         dx,-0x214[bp] 
0BA1    16                        push        ss 
0BA2    52                        push        dx 
0BA3    E8 00 00                  call        _PPIDE_READ_ID 
0BA6    83 C4 06                  add         sp,0x0006 
0BA9                          L$147:
0BA9    1E                        push        ds 
0BAA    68 A6 04                  push        offset DGROUP:L$282 
0BAD    E8 00 00                  call        _cprintf 
0BB0    83 C4 04                  add         sp,0x0004 
0BB3    BB 28 00                  mov         bx,0x0028 
0BB6    8C D2                     mov         dx,ss 
0BB8    8D 86 22 FE               lea         ax,-0x1de[bp] 
0BBC    E8 00 00                  call        putstring_ 
0BBF    1E                        push        ds 
0BC0    68 AE 04                  push        offset DGROUP:L$283 
0BC3    E8 00 00                  call        _cprintf 
0BC6    83 C4 04                  add         sp,0x0004 
0BC9    BB 14 00                  mov         bx,0x0014 
0BCC    8C D2                     mov         dx,ss 
0BCE    8D 86 00 FE               lea         ax,-0x200[bp] 
0BD2    E8 00 00                  call        putstring_ 
0BD5    1E                        push        ds 
0BD6    68 B8 04                  push        offset DGROUP:L$284 
0BD9    E8 00 00                  call        _cprintf 
0BDC    83 C4 04                  add         sp,0x0004 
0BDF    BB 08 00                  mov         bx,0x0008 
0BE2    8C D2                     mov         dx,ss 
0BE4    8D 86 1A FE               lea         ax,-0x1e6[bp] 
0BE8    E8 00 00                  call        putstring_ 
0BEB    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0BF0    74 05                     je          L$148 
0BF2    BA A9 00                  mov         dx,offset DGROUP:L$249 
0BF5    EB 03                     jmp         L$149 
0BF7                          L$148:
0BF7    BA C4 04                  mov         dx,offset DGROUP:L$285 
0BFA                          L$149:
0BFA    8C D8                     mov         ax,ds 
0BFC    50                        push        ax 
0BFD    52                        push        dx 
0BFE    FF B6 F8 FD               push        word ptr -0x208[bp] 
0C02    FF B6 F2 FD               push        word ptr -0x20e[bp] 
0C06    FF B6 EE FD               push        word ptr -0x212[bp] 
0C0A    1E                        push        ds 
0C0B    68 C8 04                  push        offset DGROUP:L$286 
0C0E    E8 00 00                  call        _cprintf 
0C11    83 C4 0E                  add         sp,0x000e 
0C14    FF B6 60 FE               push        word ptr -0x1a0[bp] 
0C18    FF B6 5E FE               push        word ptr -0x1a2[bp] 
0C1C    FF B6 5C FE               push        word ptr -0x1a4[bp] 
0C20    FF B6 5A FE               push        word ptr -0x1a6[bp] 
0C24    FF B6 58 FE               push        word ptr -0x1a8[bp] 
0C28    1E                        push        ds 
0C29    68 F3 04                  push        offset DGROUP:L$287 
0C2C    E8 00 00                  call        _cprintf 
0C2F    83 C4 0E                  add         sp,0x000e 
0C32    FF B6 66 FE               push        word ptr -0x19a[bp] 
0C36    FF B6 64 FE               push        word ptr -0x19c[bp] 
0C3A    1E                        push        ds 
0C3B    68 19 05                  push        offset DGROUP:L$288 
0C3E    E8 00 00                  call        _cprintf 
0C41    83 C4 08                  add         sp,0x0008 
0C44    FF B6 B6 FE               push        word ptr -0x14a[bp] 
0C48    FF B6 B4 FE               push        word ptr -0x14c[bp] 
0C4C    FF B6 BA FE               push        word ptr -0x146[bp] 
0C50    FF B6 B8 FE               push        word ptr -0x148[bp] 
0C54    1E                        push        ds 
0C55    68 2B 05                  push        offset DGROUP:L$289 
0C58    E8 00 00                  call        _cprintf 
0C5B    83 C4 0C                  add         sp,0x000c 
0C5E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0C61    30 E4                     xor         ah,ah 
0C63    E8 00 00                  call        p_bda_fx_ 
0C66    89 C3                     mov         bx,ax 
0C68    8E C2                     mov         es,dx 
0C6A    89 C6                     mov         si,ax 
0C6C    89 56 F6                  mov         word ptr -0xa[bp],dx 
0C6F    8B BE EE FD               mov         di,word ptr -0x212[bp] 
0C73    C7 46 EE 00 00            mov         word ptr -0x12[bp],0x0000 
0C78    26 89 7F 09               mov         word ptr es:0x9[bx],di 
0C7C    8B 86 F2 FD               mov         ax,word ptr -0x20e[bp] 
0C80    89 46 F0                  mov         word ptr -0x10[bp],ax 
0C83    8A 86 F2 FD               mov         al,byte ptr -0x20e[bp] 
0C87    26 88 47 0B               mov         byte ptr es:0xb[bx],al 
0C8B    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
0C8F    89 46 EC                  mov         word ptr -0x14[bp],ax 
0C92    8A 86 F8 FD               mov         al,byte ptr -0x208[bp] 
0C96    26 88 47 04               mov         byte ptr es:0x4[bx],al 
0C9A    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0C9D    84 C0                     test        al,al 
0C9F    74 05                     je          L$150 
0CA1    B8 10 00                  mov         ax,0x0010 
0CA4    EB 02                     jmp         L$151 
0CA6                          L$150:
0CA6    30 E4                     xor         ah,ah 
0CA8                          L$151:
0CA8    0C A0                     or          al,0xa0 
0CAA    89 C2                     mov         dx,ax 
0CAC    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0CAF    30 E4                     xor         ah,ah 
0CB1    09 D0                     or          ax,dx 
0CB3    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0CB6    26 88 44 08               mov         byte ptr es:0x8[si],al 
0CBA    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0CBF    74 25                     je          L$152 
0CC1    8B 86 64 FE               mov         ax,word ptr -0x19c[bp] 
0CC5    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0CC9    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0CCD    80 E4 0F                  and         ah,0x0f 
0CD0    26 89 44 05               mov         word ptr es:0x5[si],ax 
0CD4    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0CD8    C1 E8 0C                  shr         ax,0x0c 
0CDB    26 88 44 07               mov         byte ptr es:0x7[si],al 
0CDF    26 80 4C 08 40            or          byte ptr es:0x8[si],0x40 
0CE4    EB 13                     jmp         L$153 
0CE6                          L$152:
0CE6    8B 86 5E FE               mov         ax,word ptr -0x1a2[bp] 
0CEA    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0CEE    8B 86 60 FE               mov         ax,word ptr -0x1a0[bp] 
0CF2    80 E4 0F                  and         ah,0x0f 
0CF5    26 89 44 05               mov         word ptr es:0x5[si],ax 
0CF9                          L$153:
0CF9    C6 46 FA 00               mov         byte ptr -0x6[bp],0x00 
0CFD    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0D00    09 F8                     or          ax,di 
0D02    75 07                     jne         L$154 
0D04    31 FF                     xor         di,di 
0D06    C7 46 EE 01 00            mov         word ptr -0x12[bp],0x0001 
0D0B                          L$154:
0D0B    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D0E    89 F8                     mov         ax,di 
0D10    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0D13    E8 00 00                  call        @mulLS 
0D16    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0D19    E8 00 00                  call        @mulLS 
0D1C    89 46 F2                  mov         word ptr -0xe[bp],ax 
0D1F    89 56 F4                  mov         word ptr -0xc[bp],dx 
0D22                          L$155:
0D22    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0D26    75 06                     jne         L$156 
0D28    81 FF 00 04               cmp         di,0x0400 
0D2C    76 33                     jbe         L$158 
0D2E                          L$156:
0D2E    81 7E F0 FF 00            cmp         word ptr -0x10[bp],0x00ff 
0D33    73 2C                     jae         L$158 
0D35    D1 66 F0                  shl         word ptr -0x10[bp],0x01 
0D38    81 7E F0 FF 00            cmp         word ptr -0x10[bp],0x00ff 
0D3D    76 05                     jbe         L$157 
0D3F    C7 46 F0 FF 00            mov         word ptr -0x10[bp],0x00ff 
0D44                          L$157:
0D44    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0D47    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0D4A    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0D4D    E8 00 00                  call        @divLS 
0D50    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D53    E8 00 00                  call        @divLS 
0D56    89 C7                     mov         di,ax 
0D58    89 56 EE                  mov         word ptr -0x12[bp],dx 
0D5B    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D5F    EB C1                     jmp         L$155 
0D61                          L$158:
0D61    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0D65    75 06                     jne         L$159 
0D67    81 FF 00 04               cmp         di,0x0400 
0D6B    76 26                     jbe         L$160 
0D6D                          L$159:
0D6D    83 7E EC 3F               cmp         word ptr -0x14[bp],0x003f 
0D71    73 20                     jae         L$160 
0D73    B8 3F 00                  mov         ax,0x003f 
0D76    89 46 EC                  mov         word ptr -0x14[bp],ax 
0D79    89 C3                     mov         bx,ax 
0D7B    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0D7E    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0D81    E8 00 00                  call        @divLS 
0D84    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D87    E8 00 00                  call        @divLS 
0D8A    89 C7                     mov         di,ax 
0D8C    89 56 EE                  mov         word ptr -0x12[bp],dx 
0D8F    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D93                          L$160:
0D93    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0D97    75 06                     jne         L$161 
0D99    81 FF 00 04               cmp         di,0x0400 
0D9D    76 08                     jbe         L$162 
0D9F                          L$161:
0D9F    BF 00 04                  mov         di,0x0400 
0DA2    C7 46 EE 00 00            mov         word ptr -0x12[bp],0x0000 
0DA7                          L$162:
0DA7    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0DAA    26 89 3C                  mov         word ptr es:[si],di 
0DAD    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0DB0    26 88 44 02               mov         byte ptr es:0x2[si],al 
0DB4    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
0DB7    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0DBB    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0DBE    26 88 44 03               mov         byte ptr es:0x3[si],al 
0DC2    3C A0                     cmp         al,0xa0 
0DC4    75 24                     jne         L$163 
0DC6    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0DC9    89 F8                     mov         ax,di 
0DCB    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0DCE    E8 00 00                  call        @mulLS 
0DD1    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0DD4    E8 00 00                  call        @mulLS 
0DD7    52                        push        dx 
0DD8    50                        push        ax 
0DD9    FF 76 EC                  push        word ptr -0x14[bp] 
0DDC    FF 76 F0                  push        word ptr -0x10[bp] 
0DDF    57                        push        di 
0DE0    1E                        push        ds 
0DE1    68 45 05                  push        offset DGROUP:L$290 
0DE4    E8 00 00                  call        _cprintf 
0DE7    83 C4 0E                  add         sp,0x000e 
0DEA                          L$163:
0DEA    89 F2                     mov         dx,si 
0DEC    8B 7E F6                  mov         di,word ptr -0xa[bp] 
0DEF    30 C0                     xor         al,al 
0DF1    88 46 FC                  mov         byte ptr -0x4[bp],al 
0DF4    30 E4                     xor         ah,ah 
0DF6    8E C7                     mov         es,di 
0DF8                          L$164:
0DF8    89 D3                     mov         bx,dx 
0DFA    42                        inc         dx 
0DFB    26 8A 1F                  mov         bl,byte ptr es:[bx] 
0DFE    00 5E FC                  add         byte ptr -0x4[bp],bl 
0E01    40                        inc         ax 
0E02    3D 0F 00                  cmp         ax,0x000f 
0E05    72 F1                     jb          L$164 
0E07    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0E0A    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0E0D    26 88 44 0F               mov         byte ptr es:0xf[si],al 
0E11    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
0E15    1E                        push        ds 
0E16    68 E9 02                  push        offset DGROUP:L$268 
0E19    E8 00 00                  call        _cprintf 
0E1C    83 C4 04                  add         sp,0x0004 
0E1F    C9                        leave       
0E20    5F                        pop         di 
0E21                          L$165:
0E21    5E                        pop         si 
0E22    C2 02 00                  ret         0x0002 

Routine Size: 718 bytes,    Routine Base: _TEXT + 0B57

0E25                          put_char_array_:
0E25    51                        push        cx 
0E26    56                        push        si 
0E27    57                        push        di 
0E28    C8 02 00 00               enter       0x0002,0x00 
0E2C    89 C6                     mov         si,ax 
0E2E    89 D7                     mov         di,dx 
0E30    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0E33                          L$166:
0E33    FE 4E FE                  dec         byte ptr -0x2[bp] 
0E36    80 7E FE FF               cmp         byte ptr -0x2[bp],0xff 
0E3A    75 03                     jne         L$167 
0E3C    E9 EB F3                  jmp         L$36 
0E3F                          L$167:
0E3F    8E C7                     mov         es,di 
0E41    26 8A 04                  mov         al,byte ptr es:[si] 
0E44    30 E4                     xor         ah,ah 
0E46    46                        inc         si 
0E47    E8 00 00                  call        @uart_putchar 
0E4A    EB E7                     jmp         L$166 

Routine Size: 39 bytes,    Routine Base: _TEXT + 0E25

0E4C                          sd_info_:
0E4C    53                        push        bx 
0E4D    51                        push        cx 
0E4E    56                        push        si 
0E4F    57                        push        di 
0E50    C8 3E 00 00               enter       0x003e,0x00 
0E54    50                        push        ax 
0E55    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0E58    E8 00 00                  call        @SDinitcard 
0E5B    89 46 F8                  mov         word ptr -0x8[bp],ax 
0E5E    89 46 F6                  mov         word ptr -0xa[bp],ax 
0E61    8D 56 C2                  lea         dx,-0x3e[bp] 
0E64    16                        push        ss 
0E65    52                        push        dx 
0E66    FF 76 C0                  push        word ptr -0x40[bp] 
0E69    E8 00 00                  call        _DSDgetInfo 
0E6C    83 C4 06                  add         sp,0x0006 
0E6F    8C D6                     mov         si,ss 
0E71    8D 7E C6                  lea         di,-0x3a[bp] 
0E74    8C 56 EE                  mov         word ptr -0x12[bp],ss 
0E77    83 C7 10                  add         di,0x0010 
0E7A    FF 76 C0                  push        word ptr -0x40[bp] 
0E7D    1E                        push        ds 
0E7E    68 76 05                  push        offset DGROUP:L$291 
0E81    E8 00 00                  call        _cprintf 
0E84    83 C4 06                  add         sp,0x0006 
0E87    83 7E F8 FC               cmp         word ptr -0x8[bp],0xfffc 
0E8B    75 10                     jne         L$168 
0E8D    1E                        push        ds 
0E8E    68 85 05                  push        offset DGROUP:L$292 
0E91    E8 00 00                  call        _cprintf 
0E94    83 C4 04                  add         sp,0x0004 
0E97    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0E9A    E9 38 F6                  jmp         L$60 
0E9D                          L$168:
0E9D    8D 45 01                  lea         ax,0x1[di] 
0EA0    BB 02 00                  mov         bx,0x0002 
0EA3    8C D2                     mov         dx,ss 
0EA5    E8 00 00                  call        put_char_array_ 
0EA8    1E                        push        ds 
0EA9    68 8F 05                  push        offset DGROUP:L$293 
0EAC    E8 00 00                  call        _cprintf 
0EAF    83 C4 04                  add         sp,0x0004 
0EB2    8D 45 03                  lea         ax,0x3[di] 
0EB5    BB 05 00                  mov         bx,0x0005 
0EB8    8C D2                     mov         dx,ss 
0EBA    E8 00 00                  call        put_char_array_ 
0EBD    8D 56 C6                  lea         dx,-0x3a[bp] 
0EC0    16                        push        ss 
0EC1    52                        push        dx 
0EC2    68 7E 7F                  push        0x7f7e 
0EC5    E8 00 00                  call        _SDcsd 
0EC8    83 C4 06                  add         sp,0x0006 
0ECB    89 C6                     mov         si,ax 
0ECD    46                        inc         si 
0ECE    56                        push        si 
0ECF    1E                        push        ds 
0ED0    68 92 05                  push        offset DGROUP:L$294 
0ED3    E8 00 00                  call        _cprintf 
0ED6    83 C4 06                  add         sp,0x0006 
0ED9    8D 56 C6                  lea         dx,-0x3a[bp] 
0EDC    16                        push        ss 
0EDD    52                        push        dx 
0EDE    68 54 5F                  push        0x5f54 
0EE1    E8 00 00                  call        _SDcsd 
0EE4    83 C4 06                  add         sp,0x0006 
0EE7    50                        push        ax 
0EE8    50                        push        ax 
0EE9    1E                        push        ds 
0EEA    68 A7 05                  push        offset DGROUP:L$295 
0EED    E8 00 00                  call        _cprintf 
0EF0    83 C4 08                  add         sp,0x0008 
0EF3    83 FE 02                  cmp         si,0x0002 
0EF6    75 47                     jne         L$170 
0EF8    8D 56 C6                  lea         dx,-0x3a[bp] 
0EFB    16                        push        ss 
0EFC    52                        push        dx 
0EFD    68 40 45                  push        0x4540 
0F00    E8 00 00                  call        _SDcsd 
0F03    83 C4 06                  add         sp,0x0006 
0F06    89 C6                     mov         si,ax 
0F08    8D 56 C6                  lea         dx,-0x3a[bp] 
0F0B    16                        push        ss 
0F0C    52                        push        dx 
0F0D    68 30 3F                  push        0x3f30 
0F10    E8 00 00                  call        _SDcsd 
0F13    83 C4 06                  add         sp,0x0006 
0F16    31 D2                     xor         dx,dx 
0F18    31 DB                     xor         bx,bx 
0F1A    01 C3                     add         bx,ax 
0F1C    89 5E EA                  mov         word ptr -0x16[bp],bx 
0F1F    11 D6                     adc         si,dx 
0F21    89 76 EC                  mov         word ptr -0x14[bp],si 
0F24    89 D8                     mov         ax,bx 
0F26    05 01 00                  add         ax,0x0001 
0F29    89 F2                     mov         dx,si 
0F2B    83 D2 00                  adc         dx,0x0000 
0F2E    B9 0A 00                  mov         cx,0x000a 
0F31                          L$169:
0F31    D1 E0                     shl         ax,0x01 
0F33    D1 D2                     rcl         dx,0x01 
0F35    E2 FA                     loop        L$169 
0F37    89 46 EA                  mov         word ptr -0x16[bp],ax 
0F3A    89 56 EC                  mov         word ptr -0x14[bp],dx 
0F3D    EB 32                     jmp         L$172 
0F3F                          L$170:
0F3F    8D 56 C6                  lea         dx,-0x3a[bp] 
0F42    16                        push        ss 
0F43    52                        push        dx 
0F44    68 3E 49                  push        0x493e 
0F47    E8 00 00                  call        _SDcsd 
0F4A    83 C4 06                  add         sp,0x0006 
0F4D    89 46 EA                  mov         word ptr -0x16[bp],ax 
0F50    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0F55    8D 56 C6                  lea         dx,-0x3a[bp] 
0F58    16                        push        ss 
0F59    52                        push        dx 
0F5A    68 2F 31                  push        0x312f 
0F5D    E8 00 00                  call        _SDcsd 
0F60    83 C4 06                  add         sp,0x0006 
0F63    89 C1                     mov         cx,ax 
0F65    41                        inc         cx 
0F66    41                        inc         cx 
0F67    E3 08                     jcxz        L$172 
0F69                          L$171:
0F69    D1 66 EA                  shl         word ptr -0x16[bp],0x01 
0F6C    D1 56 EC                  rcl         word ptr -0x14[bp],0x01 
0F6F    E2 F8                     loop        L$171 
0F71                          L$172:
0F71    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0F74    30 E4                     xor         ah,ah 
0F76    E8 00 00                  call        p_bda_fx_ 
0F79    89 C6                     mov         si,ax 
0F7B    89 56 F0                  mov         word ptr -0x10[bp],dx 
0F7E    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0F81    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0F84    E8 00 00                  call        log2_ 
0F87    89 C3                     mov         bx,ax 
0F89    3D 1C 00                  cmp         ax,0x001c 
0F8C    7E 0D                     jle         L$173 
0F8E    BB 1C 00                  mov         bx,0x001c 
0F91    C7 46 EA FF FF            mov         word ptr -0x16[bp],0xffff 
0F96    C7 46 EC FF 0F            mov         word ptr -0x14[bp],0x0fff 
0F9B                          L$173:
0F9B    83 EB 0A                  sub         bx,0x000a 
0F9E    83 FB 0C                  cmp         bx,0x000c 
0FA1    7E 05                     jle         L$174 
0FA3    BB 0C 00                  mov         bx,0x000c 
0FA6    EB 08                     jmp         L$175 
0FA8                          L$174:
0FA8    83 FB 08                  cmp         bx,0x0008 
0FAB    7D 03                     jge         L$175 
0FAD    BB 08 00                  mov         bx,0x0008 
0FB0                          L$175:
0FB0    89 D8                     mov         ax,bx 
0FB2    99                        cwd         
0FB3    2B C2                     sub         ax,dx 
0FB5    D1 F8                     sar         ax,0x01 
0FB7    3D 05 00                  cmp         ax,0x0005 
0FBA    7E 03                     jle         L$176 
0FBC    B8 05 00                  mov         ax,0x0005 
0FBF                          L$176:
0FBF    89 DA                     mov         dx,bx 
0FC1    29 C2                     sub         dx,ax 
0FC3    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
0FC6    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0FC9    26 89 4C 0C               mov         word ptr es:0xc[si],cx 
0FCD    8B 4E EC                  mov         cx,word ptr -0x14[bp] 
0FD0    26 89 4C 05               mov         word ptr es:0x5[si],cx 
0FD4    88 C1                     mov         cl,al 
0FD6    B0 01                     mov         al,0x01 
0FD8    D2 E0                     shl         al,cl 
0FDA    26 88 44 04               mov         byte ptr es:0x4[si],al 
0FDE    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0FE2    88 D1                     mov         cl,dl 
0FE4    B0 01                     mov         al,0x01 
0FE6    D2 E0                     shl         al,cl 
0FE8    26 88 44 0B               mov         byte ptr es:0xb[si],al 
0FEC    26 88 44 02               mov         byte ptr es:0x2[si],al 
0FF0    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0FF3    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0FF6    89 D9                     mov         cx,bx 
0FF8    E3 06                     jcxz        L$178 
0FFA                          L$177:
0FFA    D1 EA                     shr         dx,0x01 
0FFC    D1 D8                     rcr         ax,0x01 
0FFE    E2 FA                     loop        L$177 
1000                          L$178:
1000    26 89 44 09               mov         word ptr es:0x9[si],ax 
1004    26 89 04                  mov         word ptr es:[si],ax 
1007    8B 46 C0                  mov         ax,word ptr -0x40[bp] 
100A    85 C0                     test        ax,ax 
100C    74 03                     je          L$179 
100E    B8 10 00                  mov         ax,0x0010 
1011                          L$179:
1011    0C E0                     or          al,0xe0 
1013    8E 46 F0                  mov         es,word ptr -0x10[bp] 
1016    26 88 44 08               mov         byte ptr es:0x8[si],al 
101A    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
101F    31 D2                     xor         dx,dx 
1021    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
1024    89 46 FA                  mov         word ptr -0x6[bp],ax 
1027    8D 5D 09                  lea         bx,0x9[di] 
102A    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
102E    8E 46 FA                  mov         es,word ptr -0x6[bp] 
1031                          L$180:
1031    26 8A 07                  mov         al,byte ptr es:[bx] 
1034    88 46 F2                  mov         byte ptr -0xe[bp],al 
1037    C6 46 F3 00               mov         byte ptr -0xd[bp],0x00 
103B    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
103E    B9 08 00                  mov         cx,0x0008 
1041                          L$181:
1041    D1 E0                     shl         ax,0x01 
1043    D1 D2                     rcl         dx,0x01 
1045    E2 FA                     loop        L$181 
1047    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
104A    09 C1                     or          cx,ax 
104C    89 4E F4                  mov         word ptr -0xc[bp],cx 
104F    43                        inc         bx 
1050    FE 46 FC                  inc         byte ptr -0x4[bp] 
1053    80 7E FC 04               cmp         byte ptr -0x4[bp],0x04 
1057    72 D8                     jb          L$180 
1059    8E 46 EE                  mov         es,word ptr -0x12[bp] 
105C    26 8A 45 0D               mov         al,byte ptr es:0xd[di] 
1060    30 E4                     xor         ah,ah 
1062    89 C3                     mov         bx,ax 
1064    C1 E3 04                  shl         bx,0x04 
1067    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
106B    C1 F8 04                  sar         ax,0x04 
106E    09 C3                     or          bx,ax 
1070    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
1074    24 0F                     and         al,0x0f 
1076    30 E4                     xor         ah,ah 
1078    50                        push        ax 
1079    8D 87 D0 07               lea         ax,0x7d0[bx] 
107D    50                        push        ax 
107E    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
1082    24 0F                     and         al,0x0f 
1084    30 E4                     xor         ah,ah 
1086    50                        push        ax 
1087    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
108B    C1 F8 04                  sar         ax,0x04 
108E    50                        push        ax 
108F    52                        push        dx 
1090    51                        push        cx 
1091    1E                        push        ds 
1092    68 C8 05                  push        offset DGROUP:L$296 
1095    E8 00 00                  call        _cprintf 
1098    83 C4 10                  add         sp,0x0010 
109B    FF 76 EC                  push        word ptr -0x14[bp] 
109E    FF 76 EA                  push        word ptr -0x16[bp] 
10A1    1E                        push        ds 
10A2    68 F1 05                  push        offset DGROUP:L$297 
10A5    E8 00 00                  call        _cprintf 
10A8    83 C4 08                  add         sp,0x0008 
10AB    8E 46 F0                  mov         es,word ptr -0x10[bp] 
10AE    26 8A 44 0E               mov         al,byte ptr es:0xe[si] 
10B2    30 E4                     xor         ah,ah 
10B4    50                        push        ax 
10B5    26 8A 44 02               mov         al,byte ptr es:0x2[si] 
10B9    50                        push        ax 
10BA    26 FF 34                  push        word ptr es:[si] 
10BD    1E                        push        ds 
10BE    68 1D 06                  push        offset DGROUP:L$298 
10C1    E8 00 00                  call        _cprintf 
10C4    83 C4 0A                  add         sp,0x000a 
10C7    89 F3                     mov         bx,si 
10C9    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
10CC    89 46 FA                  mov         word ptr -0x6[bp],ax 
10CF    30 C0                     xor         al,al 
10D1    88 46 FC                  mov         byte ptr -0x4[bp],al 
10D4    8E 46 FA                  mov         es,word ptr -0x6[bp] 
10D7                          L$182:
10D7    89 DF                     mov         di,bx 
10D9    43                        inc         bx 
10DA    26 02 05                  add         al,byte ptr es:[di] 
10DD    FE 46 FC                  inc         byte ptr -0x4[bp] 
10E0    80 7E FC 0F               cmp         byte ptr -0x4[bp],0x0f 
10E4    72 F1                     jb          L$182 
10E6    8E 46 F0                  mov         es,word ptr -0x10[bp] 
10E9    26 88 44 0F               mov         byte ptr es:0xf[si],al 
10ED    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
10F1    1E                        push        ds 
10F2    68 E9 02                  push        offset DGROUP:L$268 
10F5    E8 00 00                  call        _cprintf 
10F8    83 C4 04                  add         sp,0x0004 
10FB    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
10FE    E9 D4 F3                  jmp         L$60 

Routine Size: 693 bytes,    Routine Base: _TEXT + 0E4C

1101                          @setup_SD_card:
1101    56                        push        si 
1102    55                        push        bp 
1103    89 E5                     mov         bp,sp 
1105    88 C1                     mov         cl,al 
1107    88 D0                     mov         al,dl 
1109    30 E4                     xor         ah,ah 
110B    89 C6                     mov         si,ax 
110D    50                        push        ax 
110E    88 C8                     mov         al,cl 
1110    50                        push        ax 
1111    1E                        push        ds 
1112    68 34 06                  push        offset DGROUP:L$299 
1115    1E                        push        ds 
1116    68 86 04                  push        offset DGROUP:L$281 
1119    E8 00 00                  call        _cprintf 
111C    83 C4 0C                  add         sp,0x000c 
111F    8A 46 06                  mov         al,byte ptr 0x6[bp] 
1122    30 E4                     xor         ah,ah 
1124    89 F2                     mov         dx,si 
1126    E8 00 00                  call        sd_info_ 
1129    5D                        pop         bp 
112A    E9 F4 FC                  jmp         L$165 

Routine Size: 44 bytes,    Routine Base: _TEXT + 1101

112D                          @nvram_apply:
112D    56                        push        si 
112E    57                        push        di 
112F    C8 08 00 00               enter       0x0008,0x00 
1133    31 F6                     xor         si,si 
1135    1E                        push        ds 
1136    68 E9 02                  push        offset DGROUP:L$268 
1139    E8 00 00                  call        _cprintf 
113C    83 C4 04                  add         sp,0x0004 
113F    B8 12 80                  mov         ax,0x8012 
1142    E8 00 00                  call        @rtc_get_loc 
1145    30 E4                     xor         ah,ah 
1147    85 C0                     test        ax,ax 
1149    75 03                     jne         L$183 
114B    E9 85 00                  jmp         L$184 
114E                          L$183:
114E    B8 13 80                  mov         ax,0x8013 
1151    E8 00 00                  call        @rtc_get_loc 
1154    30 E4                     xor         ah,ah 
1156    C1 E0 05                  shl         ax,0x05 
1159    80 C4 04                  add         ah,0x04 
115C    89 C7                     mov         di,ax 
115E    50                        push        ax 
115F    1E                        push        ds 
1160    68 3B 06                  push        offset DGROUP:L$300 
1163    E8 00 00                  call        _cprintf 
1166    83 C4 06                  add         sp,0x0006 
1169    6A 0C                     push        0x000c 
116B    1E                        push        ds 
116C    68 54 06                  push        offset DGROUP:L$301 
116F    E8 00 00                  call        _cprintf 
1172    83 C4 06                  add         sp,0x0006 
1175    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1179    26 89 3F                  mov         word ptr es:[bx],di 
117C    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1180    89 F8                     mov         ax,di 
1182    05 08 00                  add         ax,0x0008 
1185    89 46 FA                  mov         word ptr -0x6[bp],ax 
1188    26 89 47 02               mov         word ptr es:0x2[bx],ax 
118C    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1190    89 F8                     mov         ax,di 
1192    05 10 00                  add         ax,0x0010 
1195    26 89 47 08               mov         word ptr es:0x8[bx],ax 
1199    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
119D    26 80 67 11 F1            and         byte ptr es:0x11[bx],0xf1 
11A2    26 80 4F 11 04            or          byte ptr es:0x11[bx],0x04 
11A7    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
11AB    26 80 67 11 3F            and         byte ptr es:0x11[bx],0x3f 
11B0    26 80 4F 11 40            or          byte ptr es:0x11[bx],0x40 
11B5    6A 0C                     push        0x000c 
11B7    57                        push        di 
11B8    E8 00 00                  call        _spp_init 
11BB    83 C4 04                  add         sp,0x0004 
11BE    6A 0C                     push        0x000c 
11C0    FF 76 FA                  push        word ptr -0x6[bp] 
11C3    E8 00 00                  call        _spp_init 
11C6    83 C4 04                  add         sp,0x0004 
11C9    1E                        push        ds 
11CA    68 68 06                  push        offset DGROUP:L$302 
11CD    E8 00 00                  call        _cprintf 
11D0    83 C4 04                  add         sp,0x0004 
11D3                          L$184:
11D3    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
11D8    EB 09                     jmp         L$186 
11DA                          L$185:
11DA    FF 46 FE                  inc         word ptr -0x2[bp] 
11DD    83 7E FE 02               cmp         word ptr -0x2[bp],0x0002 
11E1    7D 3C                     jge         L$188 
11E3                          L$186:
11E3    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
11E6    40                        inc         ax 
11E7    40                        inc         ax 
11E8    80 CC 80                  or          ah,0x80 
11EB    E8 00 00                  call        @rtc_get_loc 
11EE    88 C4                     mov         ah,al 
11F0    3C 04                     cmp         al,0x04 
11F2    75 02                     jne         L$187 
11F4    0C 30                     or          al,0x30 
11F6                          L$187:
11F6    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
11FA    03 5E FE                  add         bx,word ptr -0x2[bp] 
11FD    26 88 87 F8 00            mov         byte ptr es:0xf8[bx],al 
1202    84 C0                     test        al,al 
1204    74 D4                     je          L$185 
1206    24 0F                     and         al,0x0f 
1208    30 E4                     xor         ah,ah 
120A    50                        push        ax 
120B    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
120E    05 41 00                  add         ax,0x0041 
1211    50                        push        ax 
1212    1E                        push        ds 
1213    68 7A 06                  push        offset DGROUP:L$303 
1216    E8 00 00                  call        _cprintf 
1219    83 C4 08                  add         sp,0x0008 
121C    46                        inc         si 
121D    EB BB                     jmp         L$185 
121F                          L$188:
121F    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1223    83 C3 10                  add         bx,0x0010 
1226    85 F6                     test        si,si 
1228    74 05                     je          L$189 
122A    B8 01 00                  mov         ax,0x0001 
122D    EB 02                     jmp         L$190 
122F                          L$189:
122F    31 C0                     xor         ax,ax 
1231                          L$190:
1231    25 01 00                  and         ax,0x0001 
1234    26 80 27 FE               and         byte ptr es:[bx],0xfe 
1238    26 09 07                  or          word ptr es:[bx],ax 
123B    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
123F    83 C3 10                  add         bx,0x0010 
1242    85 F6                     test        si,si 
1244    74 01                     je          L$191 
1246    4E                        dec         si 
1247                          L$191:
1247    83 E6 03                  and         si,0x0003 
124A    26 80 27 3F               and         byte ptr es:[bx],0x3f 
124E    C1 E6 06                  shl         si,0x06 
1251    26 09 37                  or          word ptr es:[bx],si 
1254    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
1259    B8 06 80                  mov         ax,0x8006 
125C    E8 00 00                  call        @rtc_get_loc 
125F    30 E4                     xor         ah,ah 
1261    89 C7                     mov         di,ax 
1263    83 E7 03                  and         di,0x0003 
1266    89 7E FC                  mov         word ptr -0x4[bp],di 
1269    30 C0                     xor         al,al 
126B    89 46 F8                  mov         word ptr -0x8[bp],ax 
126E    89 7E F8                  mov         word ptr -0x8[bp],di 
1271    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1275    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
1278    26 88 87 FE 00            mov         byte ptr es:0xfe[bx],al 
127D    89 FE                     mov         si,di 
127F    57                        push        di 
1280    57                        push        di 
1281    57                        push        di 
1282    1E                        push        ds 
1283    68 8E 06                  push        offset DGROUP:L$304 
1286    E8 00 00                  call        _cprintf 
1289    83 C4 0A                  add         sp,0x000a 
128C    1E                        push        ds 
128D    68 E9 02                  push        offset DGROUP:L$268 
1290    E8 00 00                  call        _cprintf 
1293    83 C4 04                  add         sp,0x0004 
1296    83 FF 04                  cmp         di,0x0004 
1299    7E 03                     jle         L$192 
129B    BE 04 00                  mov         si,0x0004 
129E                          L$192:
129E    31 C0                     xor         ax,ax 
12A0    89 46 FE                  mov         word ptr -0x2[bp],ax 
12A3                          L$193:
12A3    3B 46 FC                  cmp         ax,word ptr -0x4[bp] 
12A6    73 1C                     jae         L$194 
12A8    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
12AB    7E 17                     jle         L$194 
12AD    88 C1                     mov         cl,al 
12AF    80 C9 02                  or          cl,0x02 
12B2    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12B6    03 5E FE                  add         bx,word ptr -0x2[bp] 
12B9    26 88 8F A9 00            mov         byte ptr es:0xa9[bx],cl 
12BE    40                        inc         ax 
12BF    FF 46 FE                  inc         word ptr -0x2[bp] 
12C2    EB DF                     jmp         L$193 
12C4                          L$194:
12C4    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
12C7    3D 04 00                  cmp         ax,0x0004 
12CA    7D 11                     jge         L$195 
12CC    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12D0    01 C3                     add         bx,ax 
12D2    26 C6 87 A9 00 00         mov         byte ptr es:0xa9[bx],0x00 
12D8    FF 46 FE                  inc         word ptr -0x2[bp] 
12DB    EB E7                     jmp         L$194 
12DD                          L$195:
12DD    1E                        push        ds 
12DE    68 AD 06                  push        offset DGROUP:L$305 
12E1    E8 00 00                  call        _cprintf 
12E4    83 C4 04                  add         sp,0x0004 
12E7    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
12EC                          L$196:
12EC    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12F0    03 5E FE                  add         bx,word ptr -0x2[bp] 
12F3    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
12F8    30 E4                     xor         ah,ah 
12FA    50                        push        ax 
12FB    1E                        push        ds 
12FC    68 BF 06                  push        offset DGROUP:L$306 
12FF    E8 00 00                  call        _cprintf 
1302    83 C4 06                  add         sp,0x0006 
1305    FF 46 FE                  inc         word ptr -0x2[bp] 
1308    83 7E FE 04               cmp         word ptr -0x2[bp],0x0004 
130C    7C DE                     jl          L$196 
130E    1E                        push        ds 
130F    68 C5 06                  push        offset DGROUP:L$307 
1312    E8 00 00                  call        _cprintf 
1315    83 C4 04                  add         sp,0x0004 
1318    B8 0C 80                  mov         ax,0x800c 
131B    E8 00 00                  call        @rtc_get_loc 
131E    30 E4                     xor         ah,ah 
1320    3D 01 00                  cmp         ax,0x0001 
1323    7E 38                     jle         L$199 
1325    39 F0                     cmp         ax,si 
1327    7F 34                     jg          L$199 
1329    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
132D    89 C7                     mov         di,ax 
132F    4F                        dec         di 
1330    01 FB                     add         bx,di 
1332    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
1337    89 46 FE                  mov         word ptr -0x2[bp],ax 
133A                          L$197:
133A    85 FF                     test        di,di 
133C    74 13                     je          L$198 
133E    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1342    01 FB                     add         bx,di 
1344    26 8A 87 A8 00            mov         al,byte ptr es:0xa8[bx] 
1349    26 88 87 A9 00            mov         byte ptr es:0xa9[bx],al 
134E    4F                        dec         di 
134F    EB E9                     jmp         L$197 
1351                          L$198:
1351    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1355    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1358    26 88 87 A9 00            mov         byte ptr es:0xa9[bx],al 
135D                          L$199:
135D    1E                        push        ds 
135E    68 C8 06                  push        offset DGROUP:L$308 
1361    E8 00 00                  call        _cprintf 
1364    83 C4 04                  add         sp,0x0004 
1367    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
136C                          L$200:
136C    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1370    03 5E FE                  add         bx,word ptr -0x2[bp] 
1373    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
1378    30 E4                     xor         ah,ah 
137A    50                        push        ax 
137B    1E                        push        ds 
137C    68 BF 06                  push        offset DGROUP:L$306 
137F    E8 00 00                  call        _cprintf 
1382    83 C4 06                  add         sp,0x0006 
1385    FF 46 FE                  inc         word ptr -0x2[bp] 
1388    83 7E FE 04               cmp         word ptr -0x2[bp],0x0004 
138C    7C DE                     jl          L$200 
138E    1E                        push        ds 
138F    68 C5 06                  push        offset DGROUP:L$307 
1392    E8 00 00                  call        _cprintf 
1395    83 C4 04                  add         sp,0x0004 
1398    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
139D                          L$201:
139D    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
13A0    39 C6                     cmp         si,ax 
13A2    7F 03                     jg          L$202 
13A4    E9 4B F5                  jmp         L$112 
13A7                          L$202:
13A7    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
13AB    01 C3                     add         bx,ax 
13AD    26 8A 9F A9 00            mov         bl,byte ptr es:0xa9[bx] 
13B2    30 FF                     xor         bh,bh 
13B4    89 DA                     mov         dx,bx 
13B6    80 E2 01                  and         dl,0x01 
13B9    89 D8                     mov         ax,bx 
13BB    29 D0                     sub         ax,dx 
13BD    8A 6E FE                  mov         ch,byte ptr -0x2[bp] 
13C0    80 C5 43                  add         ch,0x43 
13C3    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
13C6    80 C1 80                  add         cl,0x80 
13C9    3D 08 00                  cmp         ax,0x0008 
13CC    75 0E                     jne         L$203 
13CE    52                        push        dx 
13CF    88 C3                     mov         bl,al 
13D1    88 CA                     mov         dl,cl 
13D3    88 E8                     mov         al,ch 
13D5    30 E4                     xor         ah,ah 
13D7    E8 00 00                  call        @setup_SD_card 
13DA    EB 0C                     jmp         L$204 
13DC                          L$203:
13DC    52                        push        dx 
13DD    88 C3                     mov         bl,al 
13DF    88 CA                     mov         dl,cl 
13E1    88 E8                     mov         al,ch 
13E3    30 E4                     xor         ah,ah 
13E5    E8 00 00                  call        @setup_fixed_disk 
13E8                          L$204:
13E8    FF 46 FE                  inc         word ptr -0x2[bp] 
13EB    EB B0                     jmp         L$201 

Routine Size: 704 bytes,    Routine Base: _TEXT + 112D

13ED                          @nvram_setup:
13ED    56                        push        si 
13EE    C8 20 00 00               enter       0x0020,0x00 
13F2    E8 00 00                  call        @nvram_check 
13F5    85 C0                     test        ax,ax 
13F7    74 1C                     je          L$206 
13F9    1E                        push        ds 
13FA    68 DA 06                  push        offset DGROUP:L$309 
13FD    E8 00 00                  call        _cprintf 
1400    83 C4 04                  add         sp,0x0004 
1403    31 F6                     xor         si,si 
1405                          L$205:
1405    C6 42 E0 00               mov         byte ptr -0x20[bp+si],0x00 
1409    46                        inc         si 
140A    83 FE 1F                  cmp         si,0x001f 
140D    7C F6                     jl          L$205 
140F    C6 46 E5 03               mov         byte ptr -0x1b[bp],0x03 
1413    EB 1D                     jmp         L$208 
1415                          L$206:
1415    1E                        push        ds 
1416    68 F5 06                  push        offset DGROUP:L$310 
1419    E8 00 00                  call        _cprintf 
141C    83 C4 04                  add         sp,0x0004 
141F    31 F6                     xor         si,si 
1421                          L$207:
1421    89 F0                     mov         ax,si 
1423    80 CC 80                  or          ah,0x80 
1426    E8 00 00                  call        @rtc_get_loc 
1429    88 42 E0                  mov         byte ptr -0x20[bp+si],al 
142C    46                        inc         si 
142D    83 FE 1F                  cmp         si,0x001f 
1430    7C EF                     jl          L$207 
1432                          L$208:
1432    31 C0                     xor         ax,ax 
1434    E8 00 00                  call        @rtc_get_loc 
1437    24 80                     and         al,0x80 
1439    74 06                     je          L$209 
143B    1E                        push        ds 
143C    68 DC 01                  push        offset DGROUP:L$259 
143F    EB 04                     jmp         L$210 
1441                          L$209:
1441    1E                        push        ds 
1442    68 0E 07                  push        offset DGROUP:L$311 
1445                          L$210:
1445    E8 00 00                  call        _cprintf 
1448    83 C4 04                  add         sp,0x0004 
144B    31 D2                     xor         dx,dx 
144D    B8 07 00                  mov         ax,0x0007 
1450    E8 00 00                  call        @rtc_set_loc 
1453    8C D2                     mov         dx,ss 
1455    8D 46 E0                  lea         ax,-0x20[bp] 
1458    E8 00 00                  call        Date_ 
145B    E8 00 00                  call        Time_ 
145E    31 C0                     xor         ax,ax 
1460    E8 00 00                  call        set_battery_ 
1463    88 46 E0                  mov         byte ptr -0x20[bp],al 
1466    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
1469    30 E4                     xor         ah,ah 
146B    E8 00 00                  call        setup_spp_ 
146E    88 46 F2                  mov         byte ptr -0xe[bp],al 
1471    85 C0                     test        ax,ax 
1473    7E 0E                     jle         L$211 
1475    8A 46 F3                  mov         al,byte ptr -0xd[bp] 
1478    30 E4                     xor         ah,ah 
147A    E8 00 00                  call        setup_spp_b_ 
147D    30 E4                     xor         ah,ah 
147F    89 C2                     mov         dx,ax 
1481    EB 02                     jmp         L$212 
1483                          L$211:
1483    31 D2                     xor         dx,dx 
1485                          L$212:
1485    88 56 F3                  mov         byte ptr -0xd[bp],dl 
1488    8C D2                     mov         dx,ss 
148A    8D 46 E0                  lea         ax,-0x20[bp] 
148D    E8 00 00                  call        Floppy_ 
1490    1E                        push        ds 
1491    68 25 07                  push        offset DGROUP:L$312 
1494    E8 00 00                  call        _cprintf 
1497    83 C4 04                  add         sp,0x0004 
149A    8A 46 E6                  mov         al,byte ptr -0x1a[bp] 
149D    30 E4                     xor         ah,ah 
149F    E8 00 00                  call        setup_ppide_ 
14A2    88 46 E6                  mov         byte ptr -0x1a[bp],al 
14A5    8C D2                     mov         dx,ss 
14A7    8D 46 E0                  lea         ax,-0x20[bp] 
14AA    E8 00 00                  call        setup_fixed_boot_ 
14AD    88 46 EC                  mov         byte ptr -0x14[bp],al 
14B0    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
14B3    30 E4                     xor         ah,ah 
14B5    E8 00 00                  call        setup_boot_sig_check_ 
14B8    88 46 E4                  mov         byte ptr -0x1c[bp],al 
14BB    8A 46 E5                  mov         al,byte ptr -0x1b[bp] 
14BE    30 E4                     xor         ah,ah 
14C0    E8 00 00                  call        setup_serial_ 
14C3    88 46 E5                  mov         byte ptr -0x1b[bp],al 
14C6    8D 56 E0                  lea         dx,-0x20[bp] 
14C9    16                        push        ss 
14CA    52                        push        dx 
14CB    E8 00 00                  call        @compute_nvram_checksum 
14CE    88 46 FE                  mov         byte ptr -0x2[bp],al 
14D1    31 F6                     xor         si,si 
14D3                          L$213:
14D3    8A 52 E0                  mov         dl,byte ptr -0x20[bp+si] 
14D6    30 F6                     xor         dh,dh 
14D8    89 F0                     mov         ax,si 
14DA    80 CC 80                  or          ah,0x80 
14DD    E8 00 00                  call        @rtc_set_loc 
14E0    46                        inc         si 
14E1    83 FE 1F                  cmp         si,0x001f 
14E4    7C ED                     jl          L$213 
14E6    BA 80 00                  mov         dx,0x0080 
14E9    B8 07 00                  mov         ax,0x0007 
14EC    E8 00 00                  call        @rtc_set_loc 
14EF    C9                        leave       
14F0    5E                        pop         si 
14F1    C3                        ret         

Routine Size: 261 bytes,    Routine Base: _TEXT + 13ED

14F2                          @nvram_get_video:
14F2    56                        push        si 
14F3    89 C6                     mov         si,ax 
14F5    E8 00 00                  call        @nvram_check 
14F8    85 C0                     test        ax,ax 
14FA    74 04                     je          L$214 
14FC    89 F0                     mov         ax,si 
14FE    EB 08                     jmp         L$215 
1500                          L$214:
1500    B8 05 80                  mov         ax,0x8005 
1503    E8 00 00                  call        @rtc_get_loc 
1506    30 E4                     xor         ah,ah 
1508                          L$215:
1508    3D 07 00                  cmp         ax,0x0007 
150B    7E 02                     jle         L$216 
150D    89 F0                     mov         ax,si 
150F                          L$216:
150F    5E                        pop         si 
1510    C3                        ret         

Routine Size: 31 bytes,    Routine Base: _TEXT + 14F2

No disassembly errors

Segment: CONST WORD USE16 0000073A bytes
0000                          L$217:
0000    53 75 6E 00                                     Sun.
0004                          L$218:
0004    4D 6F 6E 00                                     Mon.
0008                          L$219:
0008    54 75 65 00                                     Tue.
000C                          L$220:
000C    57 65 64 00                                     Wed.
0010                          L$221:
0010    54 68 75 00                                     Thu.
0014                          L$222:
0014    46 72 69 00                                     Fri.
0018                          L$223:
0018    53 61 74 00                                     Sat.
001C                          L$224:
001C    3F 3F 3F 00                                     ???.
0020                          L$225:
0020    4A 61 6E 00                                     Jan.
0024                          L$226:
0024    46 65 62 00                                     Feb.
0028                          L$227:
0028    4D 61 72 00                                     Mar.
002C                          L$228:
002C    41 70 72 00                                     Apr.
0030                          L$229:
0030    4D 61 79 00                                     May.
0034                          L$230:
0034    4A 75 6E 00                                     Jun.
0038                          L$231:
0038    4A 75 6C 00                                     Jul.
003C                          L$232:
003C    41 75 67 00                                     Aug.
0040                          L$233:
0040    53 65 70 00                                     Sep.
0044                          L$234:
0044    4F 63 74 00                                     Oct.
0048                          L$235:
0048    4E 6F 76 00                                     Nov.
004C                          L$236:
004C    44 65 63 00                                     Dec.
0050                          L$237:
0050    31 32 30 30 00                                  1200.
0055                          L$238:
0055    32 34 30 30 00                                  2400.
005A                          L$239:
005A    34 38 30 30 00                                  4800.
005F                          L$240:
005F    39 36 30 30 00                                  9600.
0064                          L$241:
0064    31 39 32 30 30 00                               19200.
006A                          L$242:
006A    33 38 34 30 30 00                               38400.
0070                          L$243:
0070    35 37 36 30 30 00                               57600.
0076                          L$244:
0076    31 31 35 32 30 30 00                            115200.
007D                          L$245:
007D    45 6E 00                                        En.
0080                          L$246:
0080    44 69 73 00                                     Dis.
0084                          L$247:
0084    54 72 69 63 6B 6C 65 20 63 68 61 72 67 65 20 62 Trickle charge b
0094    61 63 6B 75 70 20 69 73 20 25 73 61 62 6C 65 64 ackup is %sabled
00A4    2E 0A 00                                        ...
00A7                          L$248:
00A7    6E 00                                           n.
00A9                          L$249:
00A9    00                                              .
00AA                          L$250:
00AA    20 69 73 00                                      is.
00AE                          L$251:
00AE    73 20 61 72 65 00                               s are.
00B4                          L$252:
00B4    20 20 20 25 64 20 64 69 6F 64 65 25 73 20 75 73    %d diode%s us
00C4    65 64 2E 20 20 41 25 73 20 25 64 4B 20 72 65 73 ed.  A%s %dK res
00D4    69 73 74 6F 72 20 69 73 20 73 65 6C 65 63 74 65 istor is selecte
00E4    64 2E 0A 00                                     d...
00E8                          L$253:
00E8    4E 56 52 41 4D 20 62 61 63 6B 75 70 3A 20 20 30 NVRAM backup:  0
00F8    3D 64 69 73 61 62 6C 65 2C 20 31 3D 53 75 70 65 =disable, 1=Supe
0108    72 63 61 70 28 34 2E 33 76 29 2C 20 32 3D 4E 69 rcap(4.3v), 2=Ni
0118    63 61 64 2F 4C 69 49 6F 6E 28 33 2E 36 76 29 20 cad/LiIon(3.6v) 
0128    5B 25 64 5D 3A 20 00                            [%d]: .
012F                          L$254:
012F    44 61 74 65 20 72 65 61 64 3A 20 20 25 73 20 25 Date read:  %s %
013F    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
014F    78 0A 00                                        x..
0152                          L$255:
0152    44 61 74 65 20 5B 6D 6D 2F 64 64 2F 79 79 79 79 Date [mm/dd/yyyy
0162    5D 3A 20 00                                     ]: .
0166                          L$256:
0166    42 69 6E 61 72 79 20 64 61 74 65 3A 20 20 25 64 Binary date:  %d
0176    2F 25 64 2F 25 64 0A 00                         /%d/%d..
017E                          L$257:
017E    49 6E 76 61 6C 69 64 20 64 61 74 65 20 65 6E 74 Invalid date ent
018E    65 72 65 64 2E 20 20 28 63 6F 64 65 20 25 64 29 ered.  (code %d)
019E    0A 00                                           ..
01A0                          L$258:
01A0    42 43 44 20 64 61 74 65 20 74 6F 20 62 65 20 73 BCD date to be s
01B0    65 74 20 74 6F 20 44 53 31 33 30 32 3A 20 20 25 et to DS1302:  %
01C0    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
01D0    78 20 20 64 6F 77 28 25 78 29 0A 00             x  dow(%x)..
01DC                          L$259:
01DC    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 73 74 6F The clock is sto
01EC    70 70 65 64 2E 0A 00                            pped...
01F3                          L$260:
01F3    54 69 6D 65 20 72 65 61 64 3A 20 20 25 30 32 78 Time read:  %02x
0203    3A 25 30 32 78 3A 25 30 32 78 0A 00             :%02x:%02x..
020F                          L$261:
020F    54 69 6D 65 20 5B 68 68 3A 6D 6D 5B 3A 73 73 5D Time [hh:mm[:ss]
021F    5D 3A 20 00                                     ]: .
0223                          L$262:
0223    52 65 61 64 20 69 6E 20 25 64 3A 25 30 32 64 3A Read in %d:%02d:
0233    25 30 32 64 0A 00                               %02d..
0239                          L$263:
0239    4E 75 6D 62 65 72 20 28 30 2E 2E 31 29 20 6F 66 Number (0..1) of
0249    20 32 53 31 50 20 4D 75 6C 74 69 70 6F 72 74 20  2S1P Multiport 
0259    49 4F 20 42 6F 61 72 64 73 20 5B 25 64 5D 3A 20 IO Boards [%d]: 
0269    00                                              .
026A                          L$264:
026A    32 53 31 50 20 62 6F 61 72 64 20 62 61 73 65 20 2S1P board base 
027A    61 64 64 72 65 73 73 20 73 65 74 20 74 6F 20 30 address set to 0
028A    78 25 30 34 58 0A 00                            x%04X..
0291                          L$265:
0291    53 65 72 69 61 6C 20 63 6F 6E 73 6F 6C 65 20 70 Serial console p
02A1    6F 72 74 20 73 70 65 65 64 20 28 62 69 74 73 2F ort speed (bits/
02B1    73 65 63 29 20 5B 25 73 5D 3A 00                sec) [%s]:.
02BC                          L$266:
02BC    49 6E 76 61 6C 69 64 20 73 65 6C 65 63 74 69 6F Invalid selectio
02CC    6E 2C 20 73 75 70 70 6F 72 74 65 64 20 76 61 6C n, supported val
02DC    75 65 73 20 61 72 65 3A 00                      ues are:.
02E5                          L$267:
02E5    20 25 73 00                                      %s.
02E9                          L$268:
02E9    0A 00                                           ..
02EB                          L$269:
02EB    44 72 69 76 65 20 25 63 3A 20 64 69 73 6B 20 74 Drive %c: disk t
02FB    79 70 65 20 5B 25 64 5D 3A 20 00                ype [%d]: .
0306                          L$270:
0306    46 6C 6F 70 70 79 20 54 79 70 65 73 20 61 72 65 Floppy Types are
0316    3A 0A 20 20 20 20 30 20 3D 20 6E 6F 74 20 70 72 :.    0 = not pr
0326    65 73 65 6E 74 0A 20 20 20 20 31 20 3D 20 33 36 esent.    1 = 36
0336    30 4B 20 35 2E 32 35 22 0A 20 20 20 20 32 20 3D 0K 5.25".    2 =
0346    20 31 2E 32 4D 20 35 2E 32 35 22 0A 20 20 20 20  1.2M 5.25".    
0356    33 20 3D 20 20 37 32 30 4B 20 33 2E 35 22 0A 20 3 =  720K 3.5". 
0366    20 20 20 34 20 3D 20 31 2E 34 34 4D 20 33 2E 35    4 = 1.44M 3.5
0376    22 0A 00                                        "..
0379                          L$271:
0379    2A 2A 2A 20 57 69 74 68 20 74 77 6F 20 66 6C 6F *** With two flo
0389    70 70 69 65 73 2C 20 61 6E 20 49 42 4D 20 63 61 ppies, an IBM ca
0399    62 6C 65 20 77 69 74 68 20 61 74 20 74 77 69 73 ble with at twis
03A9    74 20 69 73 20 4D 41 4E 44 41 54 4F 52 59 2E 20 t is MANDATORY. 
03B9    2A 2A 2A 0A 00                                  ***..
03BE                          L$272:
03BE    43 6F 6E 6E 65 63 74 20 61 20 73 69 6E 67 6C 65 Connect a single
03CE    20 66 6C 6F 70 70 79 20 77 69 74 68 20 61 20 63  floppy with a c
03DE    61 62 6C 65 20 77 69 74 68 20 6E 6F 20 74 77 69 able with no twi
03EE    73 74 2E 0A 00                                  st...
03F3                          L$273:
03F3    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
0403    20 5B 53 42 43 2D 31 38 38 5D 20 50 50 49 44 45  [SBC-188] PPIDE
0413    20 66 69 78 65 64 20 64 69 73 6B 73 20 5B 25 64  fixed disks [%d
0423    5D 3A 20 00                                     ]: .
0427                          L$274:
0427    4D 61 6B 65 20 64 69 73 6B 20 5B 31 2E 2E 25 64 Make disk [1..%d
0437    5D 20 74 68 65 20 43 3A 20 64 72 69 76 65 20 5B ] the C: drive [
0447    25 64 5D 3A 20 00                               %d]: .
044D                          L$275:
044D    59 2F 6E 00                                     Y/n.
0451                          L$276:
0451    4E 2F 79 00                                     N/y.
0455                          L$277:
0455    43 68 65 63 6B 20 44 4F 53 20 62 6F 6F 74 20 73 Check DOS boot s
0465    69 67 6E 61 74 75 72 65 20 5B 25 73 5D 3A 20 00 ignature [%s]: .
0475                          L$278:
0475    25 73 00                                        %s.
0478                          L$279:
0478    50 50 49 44 45 00                               PPIDE.
047E                          L$280:
047E    55 4E 4B 4E 4F 57 4E 00                         UNKNOWN.
0486                          L$281:
0486    20 20 20 25 73 20 66 69 78 65 64 20 64 69 73 6B    %s fixed disk
0496    20 25 63 3A 20 20 20 20 28 30 78 25 78 29 0A 00  %c:    (0x%x)..
04A6                          L$282:
04A6    4D 6F 64 65 6C 3A 20 00                         Model: .
04AE                          L$283:
04AE    0A 53 65 72 69 61 6C 3A 20 00                   .Serial: .
04B8                          L$284:
04B8    0A 46 69 72 6D 77 61 72 65 3A 20 00             .Firmware: .
04C4                          L$285:
04C4    6F 75 74 00                                     out.
04C8                          L$286:
04C8    0A 47 65 6F 6D 65 74 72 79 3A 20 20 25 75 3A 25 .Geometry:  %u:%
04D8    75 3A 25 75 20 20 20 77 69 74 68 25 73 20 4C 42 u:%u   with%s LB
04E8    41 20 73 75 70 70 6F 72 74 0A 00                A support..
04F3                          L$287:
04F3    43 75 72 72 65 6E 74 3A 20 20 20 25 75 3A 25 75 Current:   %u:%u
0503    3A 25 75 20 20 20 63 61 70 61 63 69 74 79 3A 20 :%u   capacity: 
0513    20 25 6C 75 0A 00                                %lu..
0519                          L$288:
0519    4C 42 41 20 53 65 63 74 6F 72 73 3A 20 20 25 6C LBA Sectors:  %l
0529    75 00                                           u.
052B                          L$289:
052B    20 20 20 28 34 38 2D 62 69 74 29 3A 20 20 30 78    (48-bit):  0x
053B    25 6C 78 25 30 38 6C 78 0A 00                   %lx%08lx..
0545                          L$290:
0545    54 72 61 6E 73 6C 61 74 65 64 20 67 65 6F 6D 65 Translated geome
0555    74 72 79 3A 20 20 25 75 3A 25 75 3A 25 75 20 20 try:  %u:%u:%u  
0565    20 63 61 70 61 63 69 74 79 3A 20 20 25 6C 64 0A  capacity:  %ld.
0575    00                                              .
0576                          L$291:
0576    53 44 20 63 61 72 64 5B 25 64 5D 3A 20 20 00    SD card[%d]:  .
0585                          L$292:
0585    6E 6F 20 63 61 72 64 0A 0A 00                   no card...
058F                          L$293:
058F    20 20 00                                          .
0592                          L$294:
0592    0A 43 53 44 20 76 65 72 73 69 6F 6E 20 25 64 2E .CSD version %d.
05A2    30 20 20 20 00                                  0   .
05A7                          L$295:
05A7    43 6F 6D 6D 61 6E 64 20 43 6C 61 73 73 65 73 3A Command Classes:
05B7    20 20 30 78 25 30 33 58 20 28 25 30 35 6F 29 0A   0x%03X (%05o).
05C7    00                                              .
05C8                          L$296:
05C8    73 2F 6E 3A 25 32 30 6C 64 20 20 20 66 6D 77 3A s/n:%20ld   fmw:
05D8    20 20 25 64 2E 25 64 20 20 20 64 2F 63 3A 20 20   %d.%d   d/c:  
05E8    25 64 2D 25 30 32 64 0A 00                      %d-%02d..
05F1                          L$297:
05F1    4C 42 41 53 75 70 70 6F 72 74 65 64 20 20 20 20 LBASupported    
0601    55 73 65 72 41 64 64 72 65 73 73 61 62 6C 65 53 UserAddressableS
0611    65 63 74 6F 72 73 20 25 6C 64 0A 00             ectors %ld..
061D                          L$298:
061D    20 20 20 43 3D 25 64 20 20 20 48 3D 25 64 20 20    C=%d   H=%d  
062D    20 53 3D 25 64 0A 00                             S=%d..
0634                          L$299:
0634    53 44 63 61 72 64 00                            SDcard.
063B                          L$300:
063B    53 50 50 20 42 61 73 65 20 61 64 64 72 65 73 73 SPP Base address
064B    20 30 78 25 30 34 78 0A 00                       0x%04x..
0654                          L$301:
0654    53 50 50 20 44 69 76 69 73 6F 72 20 30 78 25 30 SPP Divisor 0x%0
0664    34 78 0A 00                                     4x..
0668                          L$302:
0668    53 50 50 20 49 6E 69 74 69 61 6C 69 7A 65 64 0A SPP Initialized.
0678    0A 00                                           ..
067A                          L$303:
067A    46 6C 6F 70 70 79 20 25 63 3A 20 74 79 70 65 20 Floppy %c: type 
068A    25 64 0A 00                                     %d..
068E                          L$304:
068E    50 50 49 3D 25 64 20 20 55 6E 69 74 73 3D 25 64 PPI=%d  Units=%d
069E    20 20 20 62 64 69 73 6B 3D 25 30 32 78 0A 00       bdisk=%02x..
06AD                          L$305:
06AD    46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 31 3A Fixed_Disk_Tab1:
06BD    20 00                                            .
06BF                          L$306:
06BF    20 25 30 32 78 00                                %02x.
06C5                          L$307:
06C5    0A 0A 00                                        ...
06C8                          L$308:
06C8    46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 32 3A Fixed_Disk_Tab2:
06D8    20 00                                            .
06DA                          L$309:
06DA    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
06EA    73 20 69 6E 76 61 6C 69 64 0A 00                s invalid..
06F5                          L$310:
06F5    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
0705    73 20 76 61 6C 69 64 0A 00                      s valid..
070E                          L$311:
070E    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 72 75 6E The clock is run
071E    6E 69 6E 67 2E 0A 00                            ning...
0725                          L$312:
0725    20 20 20 46 69 78 65 64 20 44 69 73 6B 20 53 65    Fixed Disk Se
0735    74 75 70 0A 00                                  tup..

Segment: CONST2 WORD USE16 0000007E bytes
0000                          _dpm0:
0000    1F 1E 1F 1E 1F 1F 1E 1F 1E 1F 1F 1C             ............
000C                          _dow:
000C    00 00 00 00                                     DD	DGROUP:L$217
0010    04 00 00 00                                     DD	DGROUP:L$218
0014    08 00 00 00                                     DD	DGROUP:L$219
0018    0C 00 00 00                                     DD	DGROUP:L$220
001C    10 00 00 00                                     DD	DGROUP:L$221
0020    14 00 00 00                                     DD	DGROUP:L$222
0024    18 00 00 00                                     DD	DGROUP:L$223
0028    1C 00 00 00                                     DD	DGROUP:L$224
002C                          _month:
002C    20 00 00 00                                     DD	DGROUP:L$225
0030    24 00 00 00                                     DD	DGROUP:L$226
0034    28 00 00 00                                     DD	DGROUP:L$227
0038    2C 00 00 00                                     DD	DGROUP:L$228
003C    30 00 00 00                                     DD	DGROUP:L$229
0040    34 00 00 00                                     DD	DGROUP:L$230
0044    38 00 00 00                                     DD	DGROUP:L$231
0048    3C 00 00 00                                     DD	DGROUP:L$232
004C    40 00 00 00                                     DD	DGROUP:L$233
0050    44 00 00 00                                     DD	DGROUP:L$234
0054    48 00 00 00                                     DD	DGROUP:L$235
0058    4C 00 00 00                                     DD	DGROUP:L$236
005C                          _rates:
005C    50 00 00 00                                     DD	DGROUP:L$237
0060    55 00 00 00                                     DD	DGROUP:L$238
0064    5A 00 00 00                                     DD	DGROUP:L$239
0068    5F 00 00 00                                     DD	DGROUP:L$240
006C    64 00 00 00                                     DD	DGROUP:L$241
0070    6A 00 00 00                                     DD	DGROUP:L$242
0074    70 00 00 00                                     DD	DGROUP:L$243
0078    76 00 00 00                                     DD	DGROUP:L$244
007C                          _ftype_OK:
007C    1F 00                                           ..

Segment: _DATA WORD USE16 00000000 bytes

