     1                                  ;**********************************************************************
     2                                  ;
     3                                  ; MON88 (c) HT-LAB
     4                                  ;
     5                                  ; - Simple Monitor for 8088/86
     6                                  ; - Some bios calls
     7                                  ; converted to NASM syntax and adapted for Duodyne 80c188 by D.Werner 10/2024
     8                                  ;
     9                                  ;----------------------------------------------------------------------
    10                                  ;
    11                                  ; Copyright (C) 2005 Hans Tiggeler - http://www.ht-lab.com
    12                                  ; Send comments and bugs to : cpu86@ht-lab.com
    13                                  ;
    14                                  ; This program is free software; you can redistribute it and/or modify
    15                                  ; it under the terms of the GNU General Public License as published by
    16                                  ; the Free Software Foundation; either version 2 of the License, or
    17                                  ; (at your option) any later version.
    18                                  ;
    19                                  ; This program is distributed in the hope that it will be useful, but
    20                                  ; WITHOUT ANY WARRANTY; without even the implied warranty of
    21                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    22                                  ; General Public License for more details.
    23                                  ;
    24                                  ; You should have received a copy of the GNU General Public License
    25                                  ; along with this program; if not, write to the Free Software Foundation,
    26                                  ; Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    27                                  ;----------------------------------------------------------------------
    28                                  ;
    29                                  ; Ver 0.1     30 July 2005  H.Tiggeler  WWW.HT-LAB.COM
    30                                  ;**********************************************************************
    31                                          %DEFINE DEBUG   1
    32                                  
    33                                          CPU     186
    34                                  
    35                                          SECTION monitor  start=1F000h vstart=0F0000h
    36                                          GLOBAL  cold_boot
    37                                          GLOBAL  INITMON
    38                                  
    39                                          SEGMENT _TEXT
    40                                  
    41                                  TOS             EQU 0A000h      ; Top of stack
    42                                  
    43                                  LF              EQU 0Ah
    44                                  CR              EQU 0Dh
    45                                  ESC             EQU 01Bh
    46                                  
    47                                  ;----------------------------------------------------------------------
    48                                  ; Used for Load Hex file command
    49                                  ;----------------------------------------------------------------------
    50                                  EOF_REC         EQU 01          ; End of file record
    51                                  DATA_REC        EQU 00          ; Load data record
    52                                  EAD_REC         EQU 02          ; Extended Address Record, use to set CS
    53                                  SSA_REC         EQU 03          ; Execute Address
    54                                  
    55                                  
    56                                  ;------------------------------------------------------------------------------------
    57                                  ; Default Base Segment Pointer
    58                                  ; All MON88 commands operate on the BASE_SEGMENT:xxxx address.
    59                                  ; The base_segment value can be changed by the BS command
    60                                  ;------------------------------------------------------------------------------------
    61                                  BASE_SEGMENT    EQU 0050h
    62                                  
    63                                  ;----------------------------------------------------------------------
    64                                  ; Working Storage values
    65                                  ;----------------------------------------------------------------------
    66                                  ; Interrupt Vectors 0000h-03ffh
    67                                  ;
    68                                  ;----------------------------------------------------------------------
    69                                  ; Save Register values
    70                                  ;----------------------------------------------------------------------
    71                                  UAX             EQU 0400h
    72                                  UBX             EQU 0402h
    73                                  UCX             EQU 0404h
    74                                  UDX             EQU 0406h
    75                                  USP             EQU 0408h
    76                                  UBP             EQU 040ah
    77                                  USI             EQU 040ch
    78                                  UDI             EQU 040eh
    79                                  UDS             EQU 0410h
    80                                  UES             EQU 0412h
    81                                  USS             EQU 0414h
    82                                  UCS             EQU 0416h
    83                                  UIP             EQU 0418h
    84                                  UFL             EQU 041ah
    85                                  ;----------------------------------------------------------------------
    86                                  ; memory dump working storage
    87                                  ;----------------------------------------------------------------------
    88                                  DUMPMEMS        EQU 041ch
    89                                  
    90                                  
    91                                  
    92                                          %IMACRO WRSPACE  0      ; Write space character
    93                                          MOV     AL,' '
    94                                          CALL    TXCHAR
    95                                          %ENDM
    96                                  
    97                                          %IMACRO WREQUAL  0      ; Write = character
    98                                          MOV     AL,'='
    99                                          CALL    TXCHAR
   100                                          %ENDM
   101                                  
   102                                  
   103                                  INITMON:
   104                                  
   105                                          %IFDEF  DEBUG
   106 00000000 B001                                MOV     al,01h          ; Put POST Pattern on Front Panel
   107 00000002 BA30FA                              MOV     dx,front_panel_LEDs
   108 00000005 EE                                  OUT     dx,al
   109                                          %ENDIF
   110                                  
   111 00000006 B800A0                          MOV     AX,TOS          ; Top of Stack
   112 00000009 89C4                            MOV     SP,AX           ; Set Stack pointer
   113                                  
   114                                  ;----------------------------------------------------------------------
   115                                  ; Install Interrupt Vectors
   116                                  ; INT1 & INT3 used for single stepping and breakpoints
   117                                  ; INT# * 4     =
   118                                  ; INT# * 4 + 2 = Segment
   119                                  ;----------------------------------------------------------------------
   120                                  
   121 0000000B 31C0                            XOR     AX,AX           ; Segment=0000
   122 0000000D 8EC0                            MOV     ES,AX
   123                                  
   124                                  ; Point all vectors to unknown handler!
   125 0000000F 31DB                            XOR     BX,BX           ; 256 vectors * 4 bytes
   126                                  NEXTINTS:
   127 00000011 26C707[9106]                    MOV     WORD [ES:BX],   INTX; Spurious Interrupt Handler
   128 00000016 26C7470200F0                    MOV     WORD [ES:BX+2], 0F000h; interrupts in segment 0F0000h (for now)
   129 0000001C 83C304                          ADD     BX,4
   130 0000001F 81FB0004                        CMP     BX,0400h
   131 00000023 75EC                            JNE     NEXTINTS
   132                                  
   133 00000025 26C7064000[F705]                MOV     WORD [ES:64],   INT10; INT10h
   134 0000002C 26C7065800[0A06]                MOV     WORD [ES:88],   INT16; INT16h
   135 00000033 26C7066800[4406]                MOV     WORD [ES:104],  INT1A; INT1A, Timer functions
   136                                  
   137                                          %IFDEF  DEBUG
   138 0000003A B002                                MOV     al,02h          ; Put POST Pattern on Front Panel
   139 0000003C BA30FA                              MOV     dx,front_panel_LEDs
   140 0000003F EE                                  OUT     dx,al
   141                                          %ENDIF
   142                                  
   143 00000040 B80000                          MOV     ax, 0000h       ; Set DS
   144 00000043 8ED8                            MOV     DS,AX           ;
   145                                  ;----------------------------------------------------------------------
   146                                  ; Entry point, Display welcome message
   147                                  ;----------------------------------------------------------------------
   148                                  START:
   149 00000045 FC                              CLD
   150 00000046 BE[9E06]                        MOV     SI,  WELCOME_MESS;   -> SI
   151 00000049 E89E04                          CALL    PUTS            ; String pointed to by CS:[SI]
   152                                  
   153                                          %IFDEF  DEBUG
   154 0000004C B004                                MOV     al,04h          ; Put POST Pattern on Front Panel
   155 0000004E BA30FA                              MOV     dx,front_panel_LEDs
   156 00000051 EE                                  OUT     dx,al
   157                                          %ENDIF
   158                                  
   159 00000052 B85000                          MOV     AX,BASE_SEGMENT ; Get Default Base segment
   160 00000055 8EC0                            MOV     ES,AX
   161                                  
   162                                  ;----------------------------------------------------------------------
   163                                  ; Process commands
   164                                  ;----------------------------------------------------------------------
   165                                  CMD:
   166 00000057 BE[5008]                        MOV     SI,  PROMPT_MESS; Display prompt >
   167 0000005A E88D04                          CALL    PUTS
   168                                  
   169 0000005D E87605                          CALL    RXCHAR          ; Get Command First Byte
   170 00000060 E85505                          CALL    TO_UPPER
   171 00000063 88C6                            MOV     DH,AL
   172                                  
   173 00000065 BB[AD00]                        MOV     BX,  CMDTAB1    ; Single Command?
   174                                  CMPCMD1:
   175 00000068 2E8A07                          MOV     AL,[CS:BX]
   176 0000006B 38F0                            CMP     AL,DH
   177 0000006D 7509                            JNE     NEXTCMD1
   178                                          WRSPACE
    93 0000006F B020                <1>  MOV AL,' '
    94 00000071 E85105              <1>  CALL TXCHAR
   179 00000074 2EFF6702                        JMP     [CS:BX+2]       ; Execute Command
   180                                  
   181                                  NEXTCMD1:
   182 00000078 83C304                          ADD     BX,4
   183 0000007B 81FB[D500]                      CMP     BX,  ENDTAB1
   184 0000007F 75E7                            JNE     CMPCMD1         ; Continue looking
   185                                  
   186 00000081 E85205                          CALL    RXCHAR          ; Get Second Command Byte, DX=command
   187 00000084 E83105                          CALL    TO_UPPER
   188 00000087 88C2                            MOV     DL,AL
   189                                  
   190 00000089 BB[D700]                        MOV     BX,  CMDTAB2
   191                                  CMPCMD2:
   192 0000008C 2E8B07                          MOV     AX,[CS:BX]
   193 0000008F 39D0                            CMP     AX,DX
   194 00000091 7509                            JNE     NEXTCMD2
   195                                          WRSPACE
    93 00000093 B020                <1>  MOV AL,' '
    94 00000095 E82D05              <1>  CALL TXCHAR
   196 00000098 2EFF6702                        JMP     [CS:BX+2]       ; Execute Command
   197                                  
   198                                  NEXTCMD2:
   199 0000009C 83C304                          ADD     BX,4
   200 0000009F 81FB[EF00]                      CMP     BX,  ENDTAB2
   201 000000A3 75E7                            JNE     CMPCMD2         ; Continue looking
   202                                  
   203 000000A5 BE[5708]                        MOV     SI,  ERRCMD_MESS; Display Unknown Command, followed by usage message
   204 000000A8 E83F04                          CALL    PUTS
   205 000000AB EBAA                            JMP     CMD             ; Try again
   206                                  
   207                                  CMDTAB1:
   208 000000AD 4C00[0804]                      DW      'L',LOADHEX     ; Single char Command Jump Table
   209 000000B1 5200[3203]                      DW      'R',DISPREG
   210 000000B5 4700[BE01]                      DW      'G',EXECPROG
   211 000000B9 4800[D004]                      DW      'H',DISPHELP
   212 000000BD 3F00[D004]                      DW      '?',DISPHELP
   213 000000C1 4600[1103]                      DW      'F',FILLMEM     ; Double char Command Jump Table
   214 000000C5 4400[5102]                      DW      'D',DUMPMEM
   215 000000C9 4300[2D01]                      DW      'C',CHANGEREG   ; Change Register
   216 000000CD 4200[AC01]                      DW      'B',CHANGEBS    ; Change Base Segment Address
   217 000000D1 0D00[5700]                      DW      CR ,CMD
   218                                  ENDTAB1:
   219 000000D5 2000                            DW      ' '
   220                                  
   221                                  ; note bytes are reversed . . . . .
   222                                  CMDTAB2:
   223 000000D7 424F[0C02]                      DW      'BO',OUTPORTB
   224 000000DB 574F[1D02]                      DW      'WO',OUTPORTW
   225 000000DF 4249[2E02]                      DW      'BI',INPORTB
   226 000000E3 5749[3F02]                      DW      'WI',INPORTW
   227 000000E7 4257[F100]                      DW      'BW',WRMEMB     ; Write Byte to Memory
   228 000000EB 5757[0F01]                      DW      'WW',WRMEMW     ; Write Word to Memory
   229                                  ENDTAB2:
   230 000000EF 3F3F                            DW      '??'
   231                                  
   232                                  
   233                                  ;----------------------------------------------------------------------
   234                                  ; Write Byte to Memory
   235                                  ;----------------------------------------------------------------------
   236                                  WRMEMB:
   237 000000F1 E84D04                          CALL    GETHEX4         ; Get Address
   238 000000F4 89C3                            MOV     BX,AX           ; Store Address
   239                                          WRSPACE
    93 000000F6 B020                <1>  MOV AL,' '
    94 000000F8 E8CA04              <1>  CALL TXCHAR
   240                                  
   241 000000FB 268A07                          MOV     AL,[ES:BX]      ; Get current value and display it
   242 000000FE E88304                          CALL    PUTHEX2
   243                                          WREQUAL
    98 00000101 B03D                <1>  MOV AL,'='
    99 00000103 E8BF04              <1>  CALL TXCHAR
   244 00000106 E84504                          CALL    GETHEX2         ; Get new value
   245 00000109 268807                          MOV     [ES:BX],AL      ; and write it
   246                                  
   247 0000010C E948FF                          JMP     CMD             ; Next Command
   248                                  
   249                                  ;----------------------------------------------------------------------
   250                                  ; Write Word to Memory
   251                                  ;----------------------------------------------------------------------
   252                                  WRMEMW:
   253 0000010F E82F04                          CALL    GETHEX4         ; Get Address
   254 00000112 89C3                            MOV     BX,AX
   255                                          WRSPACE
    93 00000114 B020                <1>  MOV AL,' '
    94 00000116 E8AC04              <1>  CALL TXCHAR
   256                                  
   257 00000119 268B07                          MOV     AX,[ES:BX]      ; Get current value and display it
   258 0000011C E85A04                          CALL    PUTHEX4
   259                                          WREQUAL
    98 0000011F B03D                <1>  MOV AL,'='
    99 00000121 E8A104              <1>  CALL TXCHAR
   260 00000124 E81A04                          CALL    GETHEX4         ; Get new value
   261 00000127 268907                          MOV     [ES:BX],AX      ; and write it
   262                                  
   263 0000012A E92AFF                          JMP     CMD             ; Next Command
   264                                  
   265                                  ;----------------------------------------------------------------------
   266                                  ; Change Register
   267                                  ; Valid register names: AX,BX,CX,DX,SP,BP,SI,DI,DS,ES,SS,CS,IP,FL (flag)
   268                                  ;----------------------------------------------------------------------
   269                                  CHANGEREG:
   270 0000012D E8A604                          CALL    RXCHAR          ; Get Command First Register character
   271 00000130 E88504                          CALL    TO_UPPER
   272 00000133 88C6                            MOV     DH,AL
   273 00000135 E89E04                          CALL    RXCHAR          ; Get Second Register character, DX=register
   274 00000138 E87D04                          CALL    TO_UPPER
   275 0000013B 88C2                            MOV     DL,AL
   276                                  
   277 0000013D BB[7201]                        MOV     BX,  REGTAB
   278                                  CMPREG:
   279 00000140 2E8B07                          MOV     AX,[CS:BX]
   280 00000143 39D0                            CMP     AX,DX           ; Compare register string with user input
   281 00000145 7519                            JNE     NEXTREG         ; No, continue search
   282                                  
   283                                          WREQUAL
    98 00000147 B03D                <1>  MOV AL,'='
    99 00000149 E87904              <1>  CALL TXCHAR
   284 0000014C E8F203                          CALL    GETHEX4         ; Get new value
   285 0000014F 89C1                            MOV     CX,AX           ; CX=New reg value
   286                                  
   287 00000151 8D3E0004                        LEA     DI,UAX          ; Point to User Register Storage
   288 00000155 2E8A5F02                        MOV     BL,[CS:BX+2]    ; Get
   289 00000159 30FF                            XOR     BH,BH
   290 0000015B 8909                            MOV     [DI+BX],CX
   291 0000015D E9D201                          JMP     DISPREG         ; Display All registers
   292                                  
   293                                  NEXTREG:
   294 00000160 83C304                          ADD     BX,4
   295 00000163 81FB[AA01]                      CMP     BX,  ENDREG
   296 00000167 75D7                            JNE     CMPREG          ; Continue looking
   297                                  
   298 00000169 BE[8308]                        MOV     SI,  ERRREG_MESS; Display Unknown Register Name
   299 0000016C E87B03                          CALL    PUTS
   300                                  
   301 0000016F E9E5FE                          JMP     CMD             ; Try Again
   302                                  
   303                                  REGTAB:
   304 00000172 41580000                        DW      'AX',0          ; register name,
   305 00000176 42580200                        DW      'BX',2
   306 0000017A 43580400                        DW      'CX',4
   307 0000017E 44580600                        DW      'DX',6
   308 00000182 53500800                        DW      'SP',8
   309 00000186 42500A00                        DW      'BP',10
   310 0000018A 53490C00                        DW      'SI',12
   311 0000018E 44490E00                        DW      'DI',14
   312 00000192 44531000                        DW      'DS',16
   313 00000196 45531200                        DW      'ES',18
   314 0000019A 53531400                        DW      'SS',20
   315 0000019E 43531600                        DW      'CS',22
   316 000001A2 49501800                        DW      'IP',24
   317 000001A6 464C1A00                        DW      'FL',26
   318                                  ENDREG:
   319 000001AA 3F3F                            DW      '??'
   320                                  
   321                                  
   322                                  ;----------------------------------------------------------------------
   323                                  ; Change Base Segment pointer
   324                                  ; Dump/Fill/Load operate on BASE_SEGMENT:[USER INPUT ADDRESS]
   325                                  ; Note: CB command will not update the User Registers!
   326                                  ;----------------------------------------------------------------------
   327                                  CHANGEBS:
   328 000001AC 8CC0                            MOV     AX,ES           ; WORD BASE_SEGMENT
   329 000001AE E8C803                          CALL    PUTHEX4         ; Display current value
   330                                          WRSPACE
    93 000001B1 B020                <1>  MOV AL,' '
    94 000001B3 E80F04              <1>  CALL TXCHAR
   331 000001B6 E88803                          CALL    GETHEX4
   332 000001B9 50                              PUSH    AX
   333 000001BA 07                              POP     ES
   334 000001BB E999FE                          JMP     CMD             ; Next Command
   335                                  
   336                                  
   337                                  ;----------------------------------------------------------------------
   338                                  ; Execute program
   339                                  ; 1) Restore User registers
   340                                  ; 2) Jump to BASE_SEGMENT:USER_
   341                                  ;----------------------------------------------------------------------
   342                                  EXECPROG:
   343 000001BE 8CC0                            MOV     AX,ES           ; Display Segment Address
   344 000001C0 E8B603                          CALL    PUTHEX4
   345 000001C3 B03A                            MOV     AL,':'
   346 000001C5 E8FD03                          CALL    TXCHAR
   347 000001C8 E87603                          CALL    GETHEX4         ; Get new IP
   348 000001CB A31804                          MOV     [UIP],AX        ; Update User IP
   349 000001CE 8CC0                            MOV     AX,ES
   350 000001D0 A31604                          MOV     [UCS],AX
   351                                  
   352 000001D3 A10004                          MOV     AX,[UAX]        ; Restore User Registers
   353 000001D6 8B1E0204                        MOV     BX,[UBX]
   354 000001DA 8B0E0404                        MOV     CX,[UCX]
   355 000001DE 8B160604                        MOV     DX,[UDX]
   356 000001E2 8B2E0A04                        MOV     BP,[UBP]
   357 000001E6 8B360C04                        MOV     SI,[USI]
   358 000001EA 8B3E0E04                        MOV     DI,[UDI]
   359                                  
   360 000001EE 8E061204                        MOV     ES,[UES]
   361 000001F2 FA                              CLI                     ; User User Stack!!
   362 000001F3 8E161404                        MOV     SS,[USS]
   363 000001F7 8B260804                        MOV     SP,[USP]
   364                                  
   365 000001FB FF361A04                        PUSH    word [UFL]
   366 000001FF FF361604                        PUSH    word [UCS]      ; Push CS (Base Segment)
   367 00000203 FF361804                        PUSH    word [UIP]
   368 00000207 8E1E1004                        MOV     DS,[UDS]
   369 0000020B CF                              IRET                    ; Execute!
   370                                  
   371                                  ;----------------------------------------------------------------------
   372                                  ; Write Byte to Output port
   373                                  ;----------------------------------------------------------------------
   374                                  OUTPORTB:
   375 0000020C E83203                          CALL    GETHEX4         ; Get Port address
   376 0000020F 89C2                            MOV     DX,AX
   377                                          WREQUAL
    98 00000211 B03D                <1>  MOV AL,'='
    99 00000213 E8AF03              <1>  CALL TXCHAR
   378 00000216 E83503                          CALL    GETHEX2         ; Get Port value
   379 00000219 EE                              OUT     DX,AL
   380 0000021A E93AFE                          JMP     CMD             ; Next Command
   381                                  
   382                                  ;----------------------------------------------------------------------
   383                                  ; Write Word to Output port
   384                                  ;----------------------------------------------------------------------
   385                                  OUTPORTW:
   386 0000021D E82103                          CALL    GETHEX4         ; Get Port address
   387 00000220 89C2                            MOV     DX,AX
   388                                          WREQUAL
    98 00000222 B03D                <1>  MOV AL,'='
    99 00000224 E89E03              <1>  CALL TXCHAR
   389 00000227 E81703                          CALL    GETHEX4         ; Get Port value
   390 0000022A EF                              OUT     DX,AX
   391 0000022B E929FE                          JMP     CMD             ; Next Command
   392                                  
   393                                  ;----------------------------------------------------------------------
   394                                  ; Read Byte from Input port
   395                                  ;----------------------------------------------------------------------
   396                                  INPORTB:
   397 0000022E E81003                          CALL    GETHEX4         ; Get Port address
   398 00000231 89C2                            MOV     DX,AX
   399                                          WREQUAL
    98 00000233 B03D                <1>  MOV AL,'='
    99 00000235 E88D03              <1>  CALL TXCHAR
   400 00000238 EC                              IN      AL,DX
   401 00000239 E84803                          CALL    PUTHEX2
   402 0000023C E918FE                          JMP     CMD             ; Next Command
   403                                  
   404                                  ;----------------------------------------------------------------------
   405                                  ; Read Word from Input port
   406                                  ;----------------------------------------------------------------------
   407                                  INPORTW:
   408 0000023F E8FF02                          CALL    GETHEX4         ; Get Port address
   409                                          WREQUAL
    98 00000242 B03D                <1>  MOV AL,'='
    99 00000244 E87E03              <1>  CALL TXCHAR
   410 00000247 E87B03                          CALL    TXCHAR
   411 0000024A ED                              IN      AX,DX
   412 0000024B E82B03                          CALL    PUTHEX4
   413 0000024E E906FE                          JMP     CMD             ; Next Command
   414                                  
   415                                  ;----------------------------------------------------------------------
   416                                  ; Display Memory
   417                                  ;----------------------------------------------------------------------
   418                                  DUMPMEM:
   419 00000251 E8DB02                          CALL    GETRANGE        ; Range from BX to DX
   420                                  NEXTDMP:
   421 00000254 BE1C04                          MOV     SI,  DUMPMEMS   ; Store ASCII values
   422                                  
   423 00000257 E8C802                          CALL    NEWLINE
   424 0000025A 8CC0                            MOV     AX,ES
   425 0000025C E81A03                          CALL    PUTHEX4
   426 0000025F B03A                            MOV     AL,':'
   427 00000261 E86103                          CALL    TXCHAR
   428 00000264 89D8                            MOV     AX,BX
   429 00000266 83E0F0                          AND     AX,0FFF0h
   430 00000269 E80D03                          CALL    PUTHEX4
   431                                          WRSPACE                 ; Write Space
    93 0000026C B020                <1>  MOV AL,' '
    94 0000026E E85403              <1>  CALL TXCHAR
   432                                          WRSPACE                 ; Write Space
    93 00000271 B020                <1>  MOV AL,' '
    94 00000273 E84F03              <1>  CALL TXCHAR
   433                                  
   434 00000276 88DC                            MOV     AH,BL           ; Save lsb
   435 00000278 80E40F                          AND     AH,0Fh          ; 16 byte boundary
   436                                  
   437 0000027B E87F00                          CALL    WRNSPACE        ; Write AH spaces
   438 0000027E E87C00                          CALL    WRNSPACE        ; Write AH spaces
   439 00000281 E87900                          CALL    WRNSPACE        ; Write AH spaces
   440                                  
   441                                  DISPBYTE:
   442 00000284 B91000                          MOV     CX,16
   443 00000287 28E1                            SUB     CL,AH
   444                                  
   445                                  LOOPDMP1:
   446 00000289 268A07                          MOV     AL,[ES:BX]      ; Get Byte and display it in HEX
   447 0000028C 3E8804                          MOV     [DS:SI],AL      ; Save it
   448 0000028F E8F202                          CALL    PUTHEX2
   449                                          WRSPACE                 ; Write Space
    93 00000292 B020                <1>  MOV AL,' '
    94 00000294 E82E03              <1>  CALL TXCHAR
   450 00000297 43                              INC     BX
   451 00000298 46                              INC     SI
   452 00000299 39D3                            CMP     BX,DX
   453 0000029B 7309                            JNC     SHOWREM         ; show remaining
   454 0000029D E2EA                            LOOP    LOOPDMP1
   455                                  
   456 0000029F E83300                          CALL    PUTSDMP         ; Display it
   457                                  
   458 000002A2 39DA                            CMP     DX,BX           ; End of memory range?
   459 000002A4 73AE                            JNC     NEXTDMP         ; No, continue with next 16 bytes
   460                                  
   461                                  SHOWREM:
   462 000002A6 BE1C04                          MOV     SI,  DUMPMEMS   ; Stored ASCII values
   463 000002A9 89D8                            MOV     AX,BX
   464 000002AB 83E00F                          AND     AX,0000Fh
   465 000002AE 84C0                            TEST    AL,AL
   466 000002B0 741B                            JZ      SKIPCLR
   467 000002B2 01C6                            ADD     SI,AX           ;
   468 000002B4 B410                            MOV     AH,16
   469 000002B6 28C4                            SUB     AH,AL
   470 000002B8 88E1                            MOV     CL,AH
   471 000002BA 30ED                            XOR     CH,CH
   472 000002BC B020                            MOV     AL,' '          ; Clear non displayed values
   473                                  NEXTCLR:
   474 000002BE 3E8804                          MOV     [DS:SI],AL      ; Save it
   475 000002C1 46                              INC     SI
   476 000002C2 E2FA                            LOOP    NEXTCLR
   477 000002C4 E83600                          CALL    WRNSPACE        ; Write AH spaces
   478 000002C7 E83300                          CALL    WRNSPACE        ; Write AH spaces
   479 000002CA E83000                          CALL    WRNSPACE        ; Write AH spaces
   480                                  SKIPCLR:
   481 000002CD 30E4                            XOR     AH,AH
   482 000002CF E80300                          CALL    PUTSDMP
   483                                  
   484                                  EXITDMP:
   485 000002D2 E982FD                          JMP     CMD             ; Next Command
   486                                  
   487                                  PUTSDMP:
   488 000002D5 BE1C04                          MOV     SI,  DUMPMEMS   ; Stored ASCII values
   489                                          WRSPACE                 ; Add 2 spaces
    93 000002D8 B020                <1>  MOV AL,' '
    94 000002DA E8E802              <1>  CALL TXCHAR
   490                                          WRSPACE
    93 000002DD B020                <1>  MOV AL,' '
    94 000002DF E8E302              <1>  CALL TXCHAR
   491 000002E2 E81800                          CALL    WRNSPACE        ; Write AH spaces
   492 000002E5 B91000                          MOV     CX,16
   493 000002E8 28E1                            SUB     CL,AH           ; Adjust if not started at xxx0
   494                                  NEXTCH:
   495 000002EA AC                              LODSB                   ; Get character AL=DS:[SI++]
   496 000002EB 3C1F                            CMP     AL,01Fh         ; 20..7E printable
   497 000002ED 7606                            JBE     PRINTDOT
   498 000002EF 3C7F                            CMP     AL,07Fh
   499 000002F1 7302                            JAE     PRINTDOT
   500 000002F3 EB02                            JMP     PRINTCH
   501                                  PRINTDOT:
   502 000002F5 B02E                            MOV     AL,'.'
   503                                  PRINTCH:
   504 000002F7 E8CB02                          CALL    TXCHAR
   505 000002FA E2EE                            LOOP    NEXTCH          ; Next Character
   506 000002FC C3                              RET
   507                                  
   508                                  WRNSPACE:
   509 000002FD 50                              PUSH    AX              ; Write AH space, skip if 0
   510 000002FE 51                              PUSH    CX
   511 000002FF 84E4                            TEST    AH,AH
   512 00000301 740B                            JZ      EXITWRNP
   513 00000303 30ED                            XOR     CH,CH           ; Write AH spaces
   514 00000305 88E1                            MOV     CL,AH
   515 00000307 B020                            MOV     AL,' '
   516                                  NEXTDTX:
   517 00000309 E8B902                          CALL    TXCHAR
   518 0000030C E2FB                            LOOP    NEXTDTX
   519                                  EXITWRNP:
   520 0000030E 59                              POP     CX
   521 0000030F 58                              POP     AX
   522 00000310 C3                              RET
   523                                  
   524                                  ;----------------------------------------------------------------------
   525                                  ; Fill Memory
   526                                  ;----------------------------------------------------------------------
   527                                  FILLMEM:
   528 00000311 E81B02                          CALL    GETRANGE        ; First get range BX to DX
   529                                          WRSPACE
    93 00000314 B020                <1>  MOV AL,' '
    94 00000316 E8AC02              <1>  CALL TXCHAR
   530 00000319 E83202                          CALL    GETHEX2
   531 0000031C 50                              PUSH    AX              ; Store fill character
   532 0000031D E80202                          CALL    NEWLINE
   533                                  
   534 00000320 39DA                            CMP     DX,BX
   535 00000322 720B                            JB      EXITFILL
   536                                  DOFILL:
   537 00000324 29DA                            SUB     DX,BX
   538 00000326 89D1                            MOV     CX,DX
   539 00000328 89DF                            MOV     DI,BX           ; [ES:DI]
   540 0000032A 58                              POP     AX              ; Restore fill char
   541                                  NEXTFILL:
   542 0000032B AA                              STOSB
   543 0000032C E2FD                            LOOP    NEXTFILL
   544 0000032E AA                              STOSB                   ; Last byte
   545                                  EXITFILL:
   546 0000032F E925FD                          JMP     CMD             ; Next Command
   547                                  
   548                                  ;----------------------------------------------------------------------
   549                                  ; Display Registers
   550                                  ;
   551                                  ; AX=0001 BX=0002 CX=0003 DX=0004 SP=0005 BP=0006 SI=0007 DI=0008
   552                                  ; DS=0009 ES=000A SS=000B CS=000C IP=0100   ODIT-SZAPC=0000-00000
   553                                  ;----------------------------------------------------------------------
   554                                  DISPREG:
   555 00000332 E8ED01                          CALL    NEWLINE
   556 00000335 BE[C703]                        MOV     SI,  REG_MESS   ;   -> SI
   557 00000338 8D3E0004                        LEA     DI,UAX
   558                                  
   559 0000033C B90800                          MOV     CX,8
   560                                  NEXTDR1:
   561 0000033F E8A801                          CALL    PUTS            ; Point to first "AX=" string
   562 00000342 8B05                            MOV     AX,[DI]         ; DI points to AX value
   563 00000344 E83202                          CALL    PUTHEX4         ; Display AX value
   564 00000347 83C605                          ADD     SI,5            ; point to "BX=" string
   565 0000034A 83C702                          ADD     DI,2            ; Point to BX value
   566 0000034D E2F0                            LOOP    NEXTDR1         ; etc
   567                                  
   568 0000034F E8D001                          CALL    NEWLINE
   569 00000352 B90500                          MOV     CX,5
   570                                  NEXTDR2:
   571 00000355 E89201                          CALL    PUTS            ; Point to first "DS=" string
   572 00000358 8B05                            MOV     AX,[DI]         ; DI points to DS value
   573 0000035A E81C02                          CALL    PUTHEX4         ; Display DS value
   574 0000035D 83C605                          ADD     SI,5            ; point to "ES=" string
   575 00000360 83C702                          ADD     DI,2            ; Point to ES value
   576 00000363 E2F0                            LOOP    NEXTDR2         ; etc
   577                                  
   578 00000365 BE[9809]                        MOV     SI,  FLAG_MESS
   579 00000368 E87F01                          CALL    PUTS
   580 0000036B BE[A709]                        MOV     SI,  FLAG_VALID ; String indicating which bits to display
   581 0000036E 8B1D                            MOV     BX,[DI]         ; get flag value in BX
   582                                  
   583 00000370 B90800                          MOV     CX,8            ; Display first 4 bits
   584                                  NEXTBIT1:
   585 00000373 AC                              LODSB                   ; Get display/notdisplay flag AL=DS:[SI++]
   586 00000374 3C58                            CMP     AL,'X'          ; Display?
   587 00000376 7504                            JNE     SHFTCAR         ; Yes, shift bit into carry and display it
   588 00000378 D1E3                            SAL     BX,1            ; no, ignore bit
   589 0000037A EB0D                            JMP     EXITDISP1
   590                                  SHFTCAR:
   591 0000037C D1E3                            SAL     BX,1
   592 0000037E 7204                            JC      DISP1
   593 00000380 B030                            MOV     AL,'0'
   594 00000382 EB02                            JMP     DISPBIT
   595                                  DISP1:
   596 00000384 B031                            MOV     AL,'1'
   597                                  DISPBIT:
   598 00000386 E83C02                          CALL    TXCHAR
   599                                  EXITDISP1:
   600 00000389 E2E8                            LOOP    NEXTBIT1
   601                                  
   602 0000038B B02D                            MOV     AL,'-'          ; Display seperator 0000-00000
   603 0000038D E83502                          CALL    TXCHAR
   604                                  
   605 00000390 B90800                          MOV     CX,8            ; Display remaining 5 bits
   606                                  NEXTBIT2:
   607 00000393 AC                              LODSB                   ; Get display/notdisplay flag AL=DS:[SI++]
   608 00000394 3C58                            CMP     AL,'X'          ; Display?
   609 00000396 7504                            JNE     SHFTCAR2        ; Yes, shift bit into carry and display it
   610 00000398 D1E3                            SAL     BX,1            ; no, ignore bit
   611 0000039A EB0D                            JMP     EXITDISP2
   612                                  SHFTCAR2:
   613 0000039C D1E3                            SAL     BX,1
   614 0000039E 7204                            JC      DISP2
   615 000003A0 B030                            MOV     AL,'0'
   616 000003A2 EB02                            JMP     DISPBIT2
   617                                  DISP2:
   618 000003A4 B031                            MOV     AL,'1'
   619                                  DISPBIT2:
   620 000003A6 E81C02                          CALL    TXCHAR
   621                                  EXITDISP2:
   622 000003A9 E2E8                            LOOP    NEXTBIT2
   623                                  
   624 000003AB E87401                          CALL    NEWLINE         ; Display CS:IP Instr
   625 000003AE A11604                          MOV     AX,[UCS]
   626 000003B1 E8C501                          CALL    PUTHEX4
   627 000003B4 B03A                            MOV     AL,':'
   628 000003B6 E80C02                          CALL    TXCHAR
   629 000003B9 A11804                          MOV     AX,[UIP]
   630 000003BC E8BA01                          CALL    PUTHEX4
   631                                          WRSPACE
    93 000003BF B020                <1>  MOV AL,' '
    94 000003C1 E80102              <1>  CALL TXCHAR
   632                                  
   633 000003C4 E990FC                          JMP     CMD             ; Next Command
   634                                  
   635                                  REG_MESS:
   636 000003C7 41583D0000                      DB      "AX=",0,0       ; Display Register names table
   637 000003CC 2042583D00                      DB      " BX=",0
   638 000003D1 2043583D00                      DB      " CX=",0
   639 000003D6 2044583D00                      DB      " DX=",0
   640 000003DB 2053503D00                      DB      " SP=",0
   641 000003E0 2042503D00                      DB      " BP=",0
   642 000003E5 2053493D00                      DB      " SI=",0
   643 000003EA 2044493D00                      DB      " DI=",0
   644                                  
   645 000003EF 44533D0000                      DB      "DS=",0,0
   646 000003F4 2045533D00                      DB      " ES=",0
   647 000003F9 2053533D00                      DB      " SS=",0
   648 000003FE 2043533D00                      DB      " CS=",0
   649 00000403 2049503D00                      DB      " IP=",0
   650                                  
   651                                  ;----------------------------------------------------------------------
   652                                  ; Load Hex, terminate when ":00000001FF" is received
   653                                  ; Mon88 may hang if this string is not received
   654                                  ; Print '.' for each valid received frame, exit upon error
   655                                  ; Bytes are loaded at Segment=ES
   656                                  ;----------------------------------------------------------------------
   657                                  LOADHEX:
   658 00000408 BE[D008]                        MOV     SI,  LOAD_MESS  ; Display Ready to receive upload
   659 0000040B E8DC00                          CALL    PUTS
   660                                  
   661 0000040E B03E                            MOV     AL,'>'
   662 00000410 EB33                            JMP     DISPCH
   663                                  
   664                                  RXBYTE:
   665 00000412 86FC                            XCHG    BH,AH           ; save AH register
   666 00000414 E81400                          CALL    RXNIB
   667 00000417 88C4                            MOV     AH,AL
   668 00000419 D0E4                            SHL     AH,1            ; Can't use CL
   669 0000041B D0E4                            SHL     AH,1
   670 0000041D D0E4                            SHL     AH,1
   671 0000041F D0E4                            SHL     AH,1
   672 00000421 E80700                          CALL    RXNIB
   673 00000424 08E0                            OR      AL,AH
   674 00000426 00C3                            ADD     BL,AL           ; Add to check sum
   675 00000428 86FC                            XCHG    BH,AH           ; Restore AH register
   676 0000042A C3                              RET
   677                                  
   678                                  RXNIB:
   679 0000042B E8BA01                          CALL    RXCHARNE        ; Get Hex Character in AL
   680 0000042E 3C30                            CMP     AL,'0'          ; Check to make sure 0-9,A-F
   681 00000430 7211                            JB      ERROR           ;ERRHEX
   682 00000432 3C46                            CMP     AL,'F'
   683 00000434 770D                            JA      ERROR           ;ERRHEX
   684 00000436 3C39                            CMP     AL,'9'
   685 00000438 7606                            JBE     SUB0
   686 0000043A 3C41                            CMP     AL,'A'
   687 0000043C 7205                            JB      ERROR           ; ERRHEX
   688 0000043E 2C07                            SUB     AL,07h          ; Convert to hex
   689                                  SUB0:
   690 00000440 2C30                            SUB     AL,'0'          ; Convert to hex
   691 00000442 C3                              RET
   692                                  
   693                                  
   694                                  ERROR:
   695 00000443 B045                            MOV     AL,'E'
   696                                  DISPCH:
   697 00000445 E87D01                          CALL    TXCHAR
   698                                  
   699                                  WAITLDS:
   700 00000448 E89D01                          CALL    RXCHARNE        ; Wait for ':'
   701 0000044B 3C3A                            CMP     AL,':'
   702 0000044D 75F9                            JNE     WAITLDS
   703                                  
   704 0000044F 31C9                            XOR     CX,CX           ; CL=Byte count
   705 00000451 31DB                            XOR     BX,BX           ; BL=Checksum
   706                                  
   707 00000453 E8BCFF                          CALL    RXBYTE          ; Get length in CX
   708 00000456 88C1                            MOV     CL,AL
   709                                  
   710 00000458 E8B7FF                          CALL    RXBYTE          ; Get Address HIGH
   711 0000045B 88C4                            MOV     AH,AL
   712 0000045D E8B2FF                          CALL    RXBYTE          ; Get Address LOW
   713 00000460 89C7                            MOV     DI,AX           ; DI=Store Address
   714                                  
   715 00000462 E8ADFF                          CALL    RXBYTE          ; Get Record Type
   716 00000465 3C01                            CMP     AL,EOF_REC      ; End Of File Record
   717 00000467 742A                            JE      GOENDLD
   718 00000469 3C00                            CMP     AL,DATA_REC     ; Data Record?
   719 0000046B 7446                            JE      GOLOAD
   720 0000046D 3C02                            CMP     AL,EAD_REC      ; Extended Address Record?
   721 0000046F 744A                            JE      GOEAD
   722 00000471 3C03                            CMP     AL,SSA_REC      ; Start Segment Address Record?
   723 00000473 7402                            JE      GOSSA
   724 00000475 EBCC                            JMP     ERROR           ;ERRREC
   725                                  
   726                                  GOSSA:
   727 00000477 B90200                          MOV     CX,2            ; Get 2 word
   728                                  NEXTW:
   729 0000047A E895FF                          CALL    RXBYTE
   730 0000047D 88C4                            MOV     AH,AL
   731 0000047F E890FF                          CALL    RXBYTE
   732 00000482 50                              PUSH    AX              ; Push CS, IP
   733 00000483 E2F5                            LOOP    NEXTW
   734 00000485 E88AFF                          CALL    RXBYTE          ; Get Checksum
   735 00000488 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   736 0000048A F6D0                            NOT     AL              ; Two's complement
   737 0000048C 0401                            ADD     AL,1
   738 0000048E 38D8                            CMP     AL,BL           ; Checksum held in BL
   739 00000490 75B1                            JNE     ERROR           ;ERRCHKS
   740 00000492 CB                              RETF                    ; Execute loaded file
   741                                  
   742                                  GOENDLD:
   743 00000493 E87CFF                          CALL    RXBYTE
   744 00000496 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   745 00000498 F6D0                            NOT     AL              ; Two's complement
   746 0000049A 0401                            ADD     AL,1
   747 0000049C 38D8                            CMP     AL,BL           ; Checksum held in BL
   748 0000049E 75A3                            JNE     ERROR           ;ERRCHKS
   749 000004A0 EB25                            JMP     LOADOK
   750                                  
   751                                  GOCHECK:
   752 000004A2 E86DFF                          CALL    RXBYTE
   753 000004A5 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   754 000004A7 F6D0                            NOT     AL              ; Two's complement
   755 000004A9 0401                            ADD     AL,1
   756 000004AB 38D8                            CMP     AL,BL           ; Checksum held in BL
   757 000004AD 7594                            JNE     ERROR           ;ERRCHKS
   758 000004AF B02E                            MOV     AL,'.'          ; After each successful record print a '.'
   759 000004B1 EB92                            JMP     DISPCH
   760                                  
   761                                  GOLOAD:
   762 000004B3 E85CFF                          CALL    RXBYTE          ; Read Bytes
   763 000004B6 AA                              STOSB                   ; ES:DI <= AL
   764 000004B7 E2FA                            LOOP    GOLOAD
   765 000004B9 EBE7                            JMP     GOCHECK
   766                                  
   767                                  GOEAD:
   768 000004BB E854FF                          CALL    RXBYTE
   769 000004BE 88C4                            MOV     AH,AL
   770 000004C0 E84FFF                          CALL    RXBYTE
   771 000004C3 8EC0                            MOV     ES,AX           ; Set Segment address (ES)
   772 000004C5 EBDB                            JMP     GOCHECK
   773                                  
   774                                  ;ERRCHKS:    MOV     SI,  LD_CHKS_MESS      ; Display Checksum error
   775                                  ;            JMP     EXITLD                      ; Exit Load Command
   776                                  ;ERRREC:     MOV     SI,  LD_REC_MESS       ; Display unknown record type
   777                                  ;            JMP     EXITLD                      ; Exit Load Command
   778                                  LOADOK:
   779 000004C7 BE[6509]                        MOV     SI,  LD_OK_MESS ; Display Load OK
   780                                  ;            JMP     EXITLD
   781                                  ;ERRHEX:     MOV     SI,  LD_HEX_MESS       ; Display Error hex value
   782                                  EXITLD:
   783 000004CA E81D00                          CALL    PUTS
   784 000004CD E987FB                          JMP     CMD             ; Exit Load Command
   785                                  
   786                                  ;----------------------------------------------------------------------
   787                                  ; Display Help Menu
   788                                  ;----------------------------------------------------------------------
   789                                  DISPHELP:
   790 000004D0 BE[B809]                        MOV     SI,  HELP_MESS  ;   -> SI
   791 000004D3 E81400                          CALL    PUTS            ; String pointed to by DS:[SI]
   792                                  EXITDH:
   793 000004D6 E97EFB                          JMP     CMD             ; Next Command
   794                                  
   795                                  
   796                                  ;======================================================================
   797                                  ; Monitor routines
   798                                  ;======================================================================
   799                                  ;----------------------------------------------------------------------
   800                                  ; Return String Length in AL
   801                                  ; String pointed to by DS:[SI]
   802                                  ;----------------------------------------------------------------------
   803                                  STRLEN:
   804 000004D9 56                              PUSH    SI
   805 000004DA B4FF                            MOV     AH,-1
   806 000004DC FC                              CLD
   807                                  NEXTSL:
   808 000004DD FEC4                            INC     AH
   809 000004DF AC                              LODSB                   ; AL=DS:[SI++]
   810 000004E0 08C0                            OR      AL,AL           ; Zero?
   811 000004E2 75F9                            JNZ     NEXTSL          ; No, continue
   812 000004E4 88E0                            MOV     AL,AH           ; Return Result in AX
   813 000004E6 30E4                            XOR     AH,AH
   814 000004E8 5E                              POP     SI
   815 000004E9 C3                              RET
   816                                  
   817                                  ;----------------------------------------------------------------------
   818                                  ; Write zero terminated string to CONOUT
   819                                  ; String pointed to by CS:[SI]
   820                                  ;----------------------------------------------------------------------
   821                                  PUTS:
   822 000004EA 1E                              PUSH    DS
   823 000004EB 56                              PUSH    SI
   824 000004EC 50                              PUSH    AX
   825                                  
   826 000004ED 50                              PUSH    AX
   827 000004EE 8CC8                            MOV     AX,CS
   828 000004F0 8ED8                            MOV     DS,AX
   829 000004F2 58                              POP     AX
   830                                  
   831 000004F3 FC                              CLD
   832                                  PRINT:
   833 000004F4 AC                              LODSB                   ; AL=DS:[SI++]
   834 000004F5 08C0                            OR      AL,AL           ; Zero?
   835 000004F7 7405                            JZ      PRINT_X         ; then exit
   836 000004F9 E8C900                          CALL    TXCHAR
   837 000004FC EBF6                            JMP     PRINT           ; Next Character
   838                                  PRINT_X:
   839 000004FE 58                              POP     AX
   840 000004FF 5E                              POP     SI
   841 00000500 1F                              POP     DS
   842 00000501 C3                              RET
   843                                  
   844                                  ;----------------------------------------------------------------------
   845                                  ; Write zero terminated string to CONOUT
   846                                  ; String pointed to by DS:[SI]
   847                                  ;----------------------------------------------------------------------
   848                                  PUTSD:
   849 00000502 56                              PUSH    SI
   850 00000503 50                              PUSH    AX
   851 00000504 FC                              CLD
   852                                  PRINTD:
   853 00000505 AC                              LODSB                   ; AL=DS:[SI++]
   854 00000506 08C0                            OR      AL,AL           ; Zero?
   855 00000508 7405                            JZ      PRINTD_X        ; then exit
   856 0000050A E8B800                          CALL    TXCHAR
   857 0000050D EBF6                            JMP     PRINTD          ; Next Character
   858                                  PRINTD_X:
   859 0000050F 58                              POP     AX
   860 00000510 5E                              POP     SI
   861 00000511 C3                              RET
   862                                  
   863                                  
   864                                  ;----------------------------------------------------------------------
   865                                  ; Write string to CONOUT, length in CL
   866                                  ; String pointed to by DS:[SI]
   867                                  ;----------------------------------------------------------------------
   868                                  PUTSF:
   869 00000512 56                              PUSH    SI
   870 00000513 51                              PUSH    CX
   871 00000514 50                              PUSH    AX
   872 00000515 FC                              CLD
   873 00000516 30ED                            XOR     CH,CH
   874                                  PRTF:
   875 00000518 AC                              LODSB                   ; AL=DS:[SI++]
   876 00000519 E8A900                          CALL    TXCHAR
   877 0000051C E2FA                            LOOP    PRTF
   878 0000051E 58                              POP     AX
   879 0000051F 59                              POP     CX
   880 00000520 5E                              POP     SI
   881 00000521 C3                              RET
   882                                  
   883                                  ;----------------------------------------------------------------------
   884                                  ; Write newline
   885                                  ;----------------------------------------------------------------------
   886                                  NEWLINE:
   887 00000522 50                              PUSH    AX
   888 00000523 B00D                            MOV     AL,CR
   889 00000525 E89D00                          CALL    TXCHAR
   890 00000528 B00A                            MOV     AL,LF
   891 0000052A E89800                          CALL    TXCHAR
   892 0000052D 58                              POP     AX
   893 0000052E C3                              RET
   894                                  ;----------------------------------------------------------------------
   895                                  ; Get Address range into BX, DX
   896                                  ;----------------------------------------------------------------------
   897                                  GETRANGE:
   898 0000052F 50                              PUSH    AX
   899 00000530 E80E00                          CALL    GETHEX4
   900 00000533 89C3                            MOV     BX,AX
   901 00000535 B02D                            MOV     AL,'-'
   902 00000537 E88B00                          CALL    TXCHAR
   903 0000053A E80400                          CALL    GETHEX4
   904 0000053D 89C2                            MOV     DX,AX
   905 0000053F 58                              POP     AX
   906 00000540 C3                              RET
   907                                  
   908                                  ;----------------------------------------------------------------------
   909                                  ; Get Hex4,2,1 Into AX, AL, AL
   910                                  ;----------------------------------------------------------------------
   911                                  GETHEX4:
   912 00000541 53                              PUSH    BX
   913 00000542 E80900                          CALL    GETHEX2         ; Get Hex Character in AX
   914 00000545 88C3                            MOV     BL,AL
   915 00000547 E80400                          CALL    GETHEX2
   916 0000054A 88DC                            MOV     AH,BL
   917 0000054C 5B                              POP     BX
   918 0000054D C3                              RET
   919                                  
   920                                  GETHEX2:
   921 0000054E 53                              PUSH    BX
   922 0000054F E81100                          CALL    GETHEX1         ; Get Hex character in AL
   923 00000552 88C3                            MOV     BL,AL
   924 00000554 D0E3                            SHL     BL,1
   925 00000556 D0E3                            SHL     BL,1
   926 00000558 D0E3                            SHL     BL,1
   927 0000055A D0E3                            SHL     BL,1
   928 0000055C E80400                          CALL    GETHEX1
   929 0000055F 08D8                            OR      AL,BL
   930 00000561 5B                              POP     BX
   931 00000562 C3                              RET
   932                                  
   933                                  GETHEX1:
   934 00000563 E87000                          CALL    RXCHAR          ; Get Hex character in AL
   935 00000566 3C1B                            CMP     AL,ESC
   936 00000568 7503                            JNE     OKCHAR
   937 0000056A E9EAFA                          JMP     CMD             ; Abort if ESC is pressed
   938                                  OKCHAR:
   939 0000056D E84800                          CALL    TO_UPPER
   940 00000570 3C39                            CMP     AL,39h          ; 0-9?
   941 00000572 7E02                            JLE     CONVDEC         ; yes, subtract 30
   942 00000574 2C07                            SUB     AL,07h          ; A-F subtract 39
   943                                  CONVDEC:
   944 00000576 2C30                            SUB     AL,30h
   945 00000578 C3                              RET
   946                                  
   947                                  ;----------------------------------------------------------------------
   948                                  ; Display AX/AL in HEX
   949                                  ;----------------------------------------------------------------------
   950                                  PUTHEX4:
   951 00000579 86C4                            XCHG    AL,AH           ; Write AX in hex
   952 0000057B E80600                          CALL    PUTHEX2
   953 0000057E 86C4                            XCHG    AL,AH
   954 00000580 E80100                          CALL    PUTHEX2
   955 00000583 C3                              RET
   956                                  
   957                                  PUTHEX2:
   958 00000584 50                              PUSH    AX              ; Save the working register
   959 00000585 D0E8                            SHR     AL,1
   960 00000587 D0E8                            SHR     AL,1
   961 00000589 D0E8                            SHR     AL,1
   962 0000058B D0E8                            SHR     AL,1
   963 0000058D E80500                          CALL    PUTHEX1         ; Output it
   964 00000590 58                              POP     AX              ; Get the LSD
   965 00000591 E80100                          CALL    PUTHEX1         ; Output
   966 00000594 C3                              RET
   967                                  
   968                                  PUTHEX1:
   969 00000595 50                              PUSH    AX              ; Save the working register
   970 00000596 240F                            AND     AL, 0FH         ; Mask off any unused bits
   971 00000598 3C0A                            CMP     AL, 0AH         ; Test for alpha or numeric
   972 0000059A 7C02                            JL      NUMERIC         ; Take the branch if numeric
   973 0000059C 0407                            ADD     AL, 7           ; Add the adjustment for hex alpha
   974                                  NUMERIC:
   975 0000059E 0430                            ADD     AL, '0'         ; Add the numeric bias
   976 000005A0 E82200                          CALL    TXCHAR          ; Send to the console
   977 000005A3 58                              POP     AX
   978 000005A4 C3                              RET
   979                                  
   980                                  ;----------------------------------------------------------------------
   981                                  ; Convert HEX to BCD
   982                                  ; 3Bh->59
   983                                  ;----------------------------------------------------------------------
   984                                  HEX2BCD:
   985 000005A5 51                              PUSH    CX
   986 000005A6 30E4                            XOR     AH,AH
   987 000005A8 B10A                            MOV     CL,0Ah
   988 000005AA F6F1                            DIV     CL
   989 000005AC D0E0                            SHL     AL,1
   990 000005AE D0E0                            SHL     AL,1
   991 000005B0 D0E0                            SHL     AL,1
   992 000005B2 D0E0                            SHL     AL,1
   993 000005B4 08E0                            OR      AL,AH
   994 000005B6 59                              POP     CX
   995 000005B7 C3                              RET
   996                                  
   997                                  ;----------------------------------------------------------------------
   998                                  ; Convert to Upper Case
   999                                  ; if (c >= 'a' && c <= 'z') c -= 32;
  1000                                  ;----------------------------------------------------------------------
  1001                                  TO_UPPER:
  1002 000005B8 3C61                            CMP     AL,'a'
  1003 000005BA 7D01                            JGE     CHECKZ
  1004 000005BC C3                              RET
  1005                                  CHECKZ:
  1006 000005BD 3C7A                            CMP     AL,'z'
  1007 000005BF 7E01                            JLE     SUB32
  1008 000005C1 C3                              RET
  1009                                  SUB32:
  1010 000005C2 2C20                            SUB     AL,32
  1011 000005C4 C3                              RET
  1012                                  
  1013                                  ;----------------------------------------------------------------------
  1014                                  ; Transmit character in AL
  1015                                  ;----------------------------------------------------------------------
  1016                                  TXCHAR:
  1017 000005C5 52                              PUSH    DX
  1018 000005C6 50                              PUSH    AX              ; Character in AL
  1019 000005C7 BA85FA                          MOV     dx,uart_lsr     ; READ LINE STATUS REGISTER
  1020                                  WAITTX:
  1021 000005CA EC                              IN      AL,DX
  1022 000005CB 2420                            AND     AL,20h          ; And status with user BH mask
  1023 000005CD 74FB                            JZ      WAITTX          ; no, wait
  1024 000005CF BA80FA                          MOV     DX,uart_thr     ; point to data port
  1025 000005D2 58                              POP     AX
  1026 000005D3 EE                              OUT     DX,AL
  1027 000005D4 5A                              POP     DX
  1028 000005D5 C3                              RET
  1029                                  
  1030                                  ;----------------------------------------------------------------------
  1031                                  ; Receive character in AL, blocking
  1032                                  ; AL Changed
  1033                                  ;----------------------------------------------------------------------
  1034                                  RXCHAR:
  1035 000005D6 52                              PUSH    DX
  1036 000005D7 BA85FA                          MOV     DX,uart_lsr
  1037                                  WAITRX:
  1038 000005DA EC                              IN      AL,DX
  1039 000005DB 2401                            AND     AL,01h
  1040 000005DD 74FB                            JZ      WAITRX          ; blocking
  1041 000005DF BA80FA                          MOV     DX,uart_rbr
  1042 000005E2 EC                              IN      AL,DX           ; return result in al
  1043 000005E3 E8DFFF                          CALL    TXCHAR          ; Echo back
  1044 000005E6 5A                              POP     DX
  1045 000005E7 C3                              RET
  1046                                  
  1047                                  ;----------------------------------------------------------------------
  1048                                  ; Receive character in AL, blocking
  1049                                  ; AL Changed
  1050                                  ; No Echo
  1051                                  ;----------------------------------------------------------------------
  1052                                  RXCHARNE:
  1053 000005E8 52                              PUSH    DX
  1054 000005E9 BA85FA                          MOV     DX,uart_lsr
  1055                                  WAITRXNE:
  1056 000005EC EC                              IN      AL,DX
  1057 000005ED 2401                            AND     AL,01h
  1058 000005EF 74FB                            JZ      WAITRXNE        ; blocking
  1059 000005F1 BA80FA                          MOV     DX,uart_rbr
  1060 000005F4 EC                              IN      AL,DX           ; return result in al
  1061 000005F5 5A                              POP     DX
  1062 000005F6 C3                              RET
  1063                                  
  1064                                  ;======================================================================
  1065                                  ; BIOS Services
  1066                                  ;======================================================================
  1067                                  
  1068                                          %INCLUDE "int10.asm"
  1069                              <1> 
  1070                              <1> ;----------------------------------------------------------------------
  1071                              <1> ; Interrupt 10H, video function
  1072                              <1> ; Service   0E   Teletype Output
  1073                              <1> ; Input     AL   Character, BL and BH are ignored
  1074                              <1> ; Output
  1075                              <1> ; Changed
  1076                              <1> ;----------------------------------------------------------------------
  1077                              <1> INT10:
  1078 000005F7 80FC0E              <1>         CMP     AH,0Eh
  1079 000005FA 7505                <1>         JNE     ISR10_X
  1080                              <1> 
  1081 000005FC E8C6FF              <1>         CALL    TXCHAR          ; Transmit character
  1082 000005FF EB08                <1>         JMP     ISR10_RET
  1083                              <1> 
  1084                              <1> ;----------------------------------------------------------------------
  1085                              <1> ; Service Unkown service, display message int and ah value, return to monitor
  1086                              <1> ;----------------------------------------------------------------------
  1087                              <1> ISR10_X:
  1088 00000601 B010                <1>         MOV     AL,10h
  1089 00000603 E86E00              <1>         CALL    DISPSERI        ; Display Int and service number
  1090 00000606 E9F7F9              <1>         JMP     INITMON         ; Jump back to monitor
  1091                              <1> 
  1092                              <1> ISR10_RET:
  1093 00000609 CF                  <1>         IRET
  1069                                          %INCLUDE "int16.asm"
  1070                              <1> ;----------------------------------------------------------------------
  1071                              <1> ; Interrupt 16H, I/O function
  1072                              <1> ; Service   00   Wait for keystroke
  1073                              <1> ; Input
  1074                              <1> ; Output    AL   Character, AH=ScanCode=0
  1075                              <1> ; Changed   AX
  1076                              <1> ;----------------------------------------------------------------------
  1077                              <1> INT16:
  1078 0000060A 52                  <1>         PUSH    DX
  1079 0000060B 55                  <1>         PUSH    BP
  1080 0000060C 89E5                <1>         MOV     BP,SP
  1081                              <1> 
  1082                              <1> ISR16_00:
  1083 0000060E 80FC00              <1>         CMP     AH,00h
  1084 00000611 7507                <1>         JNE     ISR16_01
  1085                              <1> 
  1086 00000613 E8C0FF              <1>         CALL    RXCHAR
  1087 00000616 30E4                <1>         XOR     AH,AH
  1088                              <1> 
  1089 00000618 EB27                <1>         JMP     ISR16_RET
  1090                              <1> 
  1091                              <1> ;----------------------------------------------------------------------
  1092                              <1> ; Interrupt 16H, I/O function
  1093                              <1> ; Service   01   Check for keystroke (kbhit)
  1094                              <1> ; Input
  1095                              <1> ; Output    AL   Character, AH=ScanCode=0 ZF=0 when keystoke available
  1096                              <1> ; Changed   AX
  1097                              <1> ;----------------------------------------------------------------------
  1098                              <1> ISR16_01:
  1099 0000061A 80FC01              <1>         CMP     AH,01h
  1100 0000061D 751A                <1>         JNE     ISR16_X
  1101                              <1> 
  1102 0000061F 30E4                <1>         XOR     AH,AH           ; Clear ScanCode
  1103 00000621 36834E0840          <1>         OR      WORD [SS:BP+8],0040h; SET ZF in stack stored flag
  1104                              <1> 
  1105 00000626 BA85FA              <1>         MOV     DX,uart_lsr
  1106 00000629 EC                  <1>         IN      AL,DX           ; Get Status
  1107 0000062A 2401                <1>         AND     AL,01h
  1108 0000062C 7413                <1>         JZ      ISR16_RET       ; No keystoke
  1109                              <1> 
  1110 0000062E BA80FA              <1>         MOV     DX,uart_rbr
  1111 00000631 EC                  <1>         IN      AL,DX           ; return result in al
  1112 00000632 36836608BF          <1>         AND     WORD [SS:BP+8],0FFBFh; Clear ZF in stack stored flag
  1113                              <1> 
  1114 00000637 EB08                <1>         JMP     ISR16_RET
  1115                              <1> 
  1116                              <1> ;----------------------------------------------------------------------
  1117                              <1> ; Service Unkown service, display message int and ah value, return to monitor
  1118                              <1> ;----------------------------------------------------------------------
  1119                              <1> ISR16_X:
  1120 00000639 B016                <1>         MOV     AL,16h
  1121 0000063B E83600              <1>         CALL    DISPSERI        ; Display Int and service number
  1122 0000063E E9BFF9              <1>         JMP     INITMON         ; Jump back to monitor
  1123                              <1> 
  1124                              <1> ISR16_RET:
  1125 00000641 5D                  <1>         POP     BP
  1126 00000642 5A                  <1>         POP     DX
  1127 00000643 CF                  <1>         IRET
  1070                                          %INCLUDE "int1a.asm"
  1071                              <1> 
  1072                              <1> 
  1073                              <1> ;----------------------------------------------------------------------
  1074                              <1> ;  INT 1AH, timer function
  1075                              <1> ;  AX is not saved!
  1076                              <1> ;        Addr    Function
  1077                              <1> ;====    =========================================;
  1078                              <1> ; 00     current second for real-time clock
  1079                              <1> ; 02     current minute
  1080                              <1> ; 04     current hour
  1081                              <1> ; 07     current date of month
  1082                              <1> ; 08     current month
  1083                              <1> ; 09     current year  (final two digits; eg, 93)
  1084                              <1> ; 0A     Status Register A - Read/Write except UIP
  1085                              <1> ;----------------------------------------------------------------------
  1086                              <1> INT1A:
  1087 00000644 1E                  <1>         PUSH    DS
  1088 00000645 55                  <1>         PUSH    BP
  1089 00000646 89E5                <1>         MOV     BP,SP
  1090                              <1> 
  1091                              <1> ;----------------------------------------------------------------------
  1092                              <1> ; Interrupt 1AH, Time function
  1093                              <1> ; Service   00   Get System Time in ticks
  1094                              <1> ; Input
  1095                              <1> ; Output    CX:DX ticks since midnight
  1096                              <1> ;----------------------------------------------------------------------
  1097                              <1> ISR1A_00:
  1098 00000648 31D2                <1>         XOR     DX,DX
  1099 0000064A 31C9                <1>         XOR     CX,CX
  1100 0000064C EB1E                <1>         JMP     ISR1A_RET       ; exit
  1101                              <1> 
  1102                              <1> 
  1103                              <1> ;----------------------------------------------------------------------
  1104                              <1> ; Interrupt 1AH, Time function
  1105                              <1> ; Service   01   Set System Time from ticks
  1106                              <1> ; Input     CX:DX ticks since midnight
  1107                              <1> ; Output
  1108                              <1> ;----------------------------------------------------------------------
  1109                              <1> ISR1A_01:
  1110 0000064E 31D2                <1>         XOR     DX,DX
  1111 00000650 31C9                <1>         XOR     CX,CX
  1112 00000652 EB18                <1>         JMP     ISR1A_RET       ; exit
  1113                              <1> 
  1114                              <1> 
  1115                              <1> ;----------------------------------------------------------------------
  1116                              <1> ; Interrupt 1AH, Time function
  1117                              <1> ; Service   02   Get RTC time
  1118                              <1> ;   exit :  CF clear if successful, set on error ***NOT YET ADDED***
  1119                              <1> ;           CH = hour (BCD)
  1120                              <1> ;           CL = minutes (BCD)
  1121                              <1> ;           DH = seconds (BCD)
  1122                              <1> ;           DL = daylight savings flag  (!! NOT IMPLEMENTED !!)
  1123                              <1> ;                (00h standard time, 01h daylight time)
  1124                              <1> ;----------------------------------------------------------------------
  1125                              <1> ISR1A_02:
  1126 00000654 31D2                <1>         XOR     DX,DX
  1127 00000656 31C9                <1>         XOR     CX,CX
  1128 00000658 EB12                <1>         JMP     ISR1A_RET       ; exit
  1129                              <1> 
  1130                              <1> ;----------------------------------------------------------------------
  1131                              <1> ; Int 1Ah function 03h - Set RTC time
  1132                              <1> ;   entry:  AH = 03h
  1133                              <1> ;           CH = hour (BCD)
  1134                              <1> ;           CL = minutes (BCD)
  1135                              <1> ;           DH = seconds (BCD)
  1136                              <1> ;           DL = daylight savings flag (as above)
  1137                              <1> ;   exit:   none
  1138                              <1> ;----------------------------------------------------------------------
  1139                              <1> ISR1A_03:
  1140                              <1> 
  1141 0000065A EB10                <1>         JMP     ISR1A_RET
  1142                              <1> 
  1143                              <1> ;----------------------------------------------------------------------
  1144                              <1> ; Int 1Ah function 04h - Get RTC date
  1145                              <1> ;   entry:  AH = 04h
  1146                              <1> ;   exit:   CF clear if successful, set on error
  1147                              <1> ;           CH = century (BCD)
  1148                              <1> ;           CL = year (BCD)
  1149                              <1> ;           DH = month (BCD)
  1150                              <1> ;           DL = day (BCD)
  1151                              <1> ;----------------------------------------------------------------------
  1152                              <1> ISR1A_04:
  1153 0000065C 31D2                <1>         XOR     DX,DX
  1154 0000065E 31C9                <1>         XOR     CX,CX
  1155 00000660 EB0A                <1>         JMP     ISR1A_RET
  1156                              <1> 
  1157                              <1> ;----------------------------------------------------------------------
  1158                              <1> ; Int 1Ah function 05h - Set RTC date
  1159                              <1> ;   entry:  AH = 05h
  1160                              <1> ;           CH = century (BCD)
  1161                              <1> ;           CL = year (BCD)
  1162                              <1> ;           DH = month (BCD)
  1163                              <1> ;           DL = day (BCD)
  1164                              <1> ;   exit:   none
  1165                              <1> ;----------------------------------------------------------------------
  1166                              <1> ISR1A_05:
  1167 00000662 EB08                <1>         JMP     ISR1A_RET
  1168                              <1> 
  1169                              <1> ;----------------------------------------------------------------------
  1170                              <1> ; Interrupt 1Ah
  1171                              <1> ; Service   xx   Unknown service, print message, jump to monitor
  1172                              <1> ;----------------------------------------------------------------------
  1173                              <1> ISR1A_X:
  1174 00000664 B01A                <1>         MOV     AL,1Ah
  1175 00000666 E80B00              <1>         CALL    DISPSERI        ; Display Int and service number
  1176 00000669 E994F9              <1>         JMP     INITMON         ; Jump back to monitor
  1177                              <1> 
  1178                              <1> ISR1A_RET:
  1179 0000066C 36836608FE          <1>         AND     WORD [SS:BP+8],0FFFEh; Clear Carry to indicate no error
  1180 00000671 5D                  <1>         POP     BP
  1181 00000672 1F                  <1>         POP     DS
  1182 00000673 CF                  <1>         IRET
  1071                                  
  1072                                  
  1073                                  ;----------------------------------------------------------------------
  1074                                  ; Unknown Service Handler
  1075                                  ; Display Message, interrupt and service number before jumping back to the monitor
  1076                                  ;----------------------------------------------------------------------
  1077                                  DISPSERI:
  1078 00000674 89C3                            MOV     BX,AX           ; Store int number (AL) and service (AH)
  1079 00000676 B80000                          MOV     ax, 0000h       ; Set DS
  1080 00000679 8ED8                            MOV     DS,AX
  1081 0000067B BE[E30C]                        MOV     SI,  UNKNOWNSER_MESS; Print Error: Unknown Service
  1082 0000067E E869FE                          CALL    PUTS
  1083 00000681 88D8                            MOV     AL,BL
  1084 00000683 E8FEFE                          CALL    PUTHEX2         ; Print Interrupt Number
  1085 00000686 B02C                            MOV     AL,','
  1086 00000688 E83AFF                          CALL    TXCHAR
  1087 0000068B 88F8                            MOV     AL,BH
  1088 0000068D E8F4FE                          CALL    PUTHEX2         ; Write Service number
  1089 00000690 C3                              RET
  1090                                  
  1091                                  ;----------------------------------------------------------------------
  1092                                  ; Spurious Interrupt Handler
  1093                                  ;----------------------------------------------------------------------
  1094                                  INTX:
  1095 00000691 1E                              PUSH    DS
  1096 00000692 56                              PUSH    SI
  1097 00000693 50                              PUSH    AX
  1098                                  
  1099 00000694 BE[C20C]                        MOV     SI,  UNKNOWN_MESS; Print Error: Unknown Service
  1100 00000697 E850FE                          CALL    PUTS
  1101                                  
  1102 0000069A 58                              POP     AX
  1103 0000069B 5E                              POP     SI
  1104 0000069C 1F                              POP     DS
  1105 0000069D CF                              IRET
  1106                                  
  1107                                  
  1108                                  ;----------------------------------------------------------------------
  1109                                  ; Text Strings
  1110                                  ;----------------------------------------------------------------------
  1111                                  WELCOME_MESS:
  1112                                  
  1113 0000069E 0D0A0A                          DB      CR,LF,LF
  1114 000006A1 0D0A20205F5F5F5F5F-             DB      CR,LF,"  _____                  _ "
  1114 000006AA 202020202020202020-
  1114 000006B3 202020202020202020-
  1114 000006BC 5F20               
  1115 000006BE 0D0A207C20205F5F20-             DB      CR,LF," |  __ \                | |"
  1115 000006C7 5C2020202020202020-
  1115 000006D0 20202020202020207C-
  1115 000006D9 207C               
  1116 000006DB 0D0A207C207C20207C-             DB      CR,LF," | |  | |_   _  ___   __| |_   _ _ __   ___ "
  1116 000006E4 207C5F2020205F2020-
  1116 000006ED 5F5F5F2020205F5F7C-
  1116 000006F6 207C5F2020205F205F-
  1116 000006FF 205F5F2020205F5F5F-
  1116 00000708 20                 
  1117 00000709 0D0A207C207C20207C-             DB      CR,LF," | |  | | | | |/ _ \ / _` | | | | '_ \ / _ \ "
  1117 00000712 207C207C207C207C2F-
  1117 0000071B 205F205C202F205F60-
  1117 00000724 207C207C207C207C20-
  1117 0000072D 275F205C202F205F20-
  1117 00000736 5C20               
  1118 00000738 0D0A207C207C5F5F7C-             DB      CR,LF," | |__| | |_| | (_) | (_| | |_| | | | |  __/"
  1118 00000741 207C207C5F7C207C20-
  1118 0000074A 285F29207C20285F7C-
  1118 00000753 207C207C5F7C207C20-
  1118 0000075C 7C207C207C20205F5F-
  1118 00000765 2F                 
  1119 00000766 0D0A207C5F5F5F5F5F-             DB      CR,LF," |_____/ \__,_|\___/ \__,_|\__, |_| |_|\___|"
  1119 0000076F 2F205C5F5F2C5F7C5C-
  1119 00000778 5F5F5F2F205C5F5F2C-
  1119 00000781 5F7C5C5F5F2C207C5F-
  1119 0000078A 7C207C5F7C5C5F5F5F-
  1119 00000793 7C                 
  1120 00000794 0D0A20202020383063-             DB      CR,LF,"    80c188 pcb              __/ |"
  1120 0000079D 313838207063622020-
  1120 000007A6 202020202020202020-
  1120 000007AF 2020205F5F2F207C   
  1121 000007B7 0D0A20202020202020-             DB      CR,LF,"                           |___/ "
  1121 000007C0 202020202020202020-
  1121 000007C9 202020202020202020-
  1121 000007D2 20207C5F5F5F2F20   
  1122 000007DA 0D0A4D4F4E38382038-             DB      CR,LF,"MON88 8088/8086 Monitor ver 0.1"
  1122 000007E3 3038382F3830383620-
  1122 000007EC 4D6F6E69746F722076-
  1122 000007F5 657220302E31       
  1123 000007FB 0D0A436F7079726967-             DB      CR,LF,"Copyright WWW.HT-LAB.COM 2005",
  1123 00000804 6874205757572E4854-
  1123 0000080D 2D4C41422E434F4D20-
  1123 00000816 32303035           
  1124 0000081A 0D0A4D6F6469666965-             DB      CR,LF,"Modified for Duodyne 80c188",
  1124 00000823 6420666F722044756F-
  1124 0000082C 64796E652038306331-
  1124 00000835 3838               
  1125 00000837 0D0A416C6C20726967-             DB      CR,LF,"All rights reserved.",CR,LF,0
  1125 00000840 687473207265736572-
  1125 00000849 7665642E0D0A00     
  1126                                  PROMPT_MESS:
  1127 00000850 0A0D436D643E00                  DB      LF,CR,"Cmd>",0
  1128                                  ERRCMD_MESS:
  1129 00000857 203C2D20556E6B6E6F-             DB      " <- Unknown Command, type H to Display Help",0
  1129 00000860 776E20436F6D6D616E-
  1129 00000869 642C20747970652048-
  1129 00000872 20746F20446973706C-
  1129 0000087B 61792048656C7000   
  1130                                  ERRREG_MESS:
  1131 00000883 203C2D20556E6B6E6F-             DB      " <- Unknown Register, valid names: AX,BX,CX,DX,SP,BP,SI,DI,DS,ES,SS,CS,IP,FL",0
  1131 0000088C 776E20526567697374-
  1131 00000895 65722C2076616C6964-
  1131 0000089E 206E616D65733A2041-
  1131 000008A7 582C42582C43582C44-
  1131 000008B0 582C53502C42502C53-
  1131 000008B9 492C44492C44532C45-
  1131 000008C2 532C53532C43532C49-
  1131 000008CB 502C464C00         
  1132                                  
  1133                                  LOAD_MESS:
  1134 000008D0 0D0A53746172742075-             DB      CR,LF,"Start upload now, load is terminated by :00000001FF",CR,LF,0
  1134 000008D9 706C6F6164206E6F77-
  1134 000008E2 2C206C6F6164206973-
  1134 000008EB 207465726D696E6174-
  1134 000008F4 6564206279203A3030-
  1134 000008FD 30303030303146460D-
  1134 00000906 0A00               
  1135                                  LD_CHKS_MESS:
  1136 00000908 0D0A4572726F723A20-             DB      CR,LF,"Error: CheckSum failure",CR,LF,0
  1136 00000911 436865636B53756D20-
  1136 0000091A 6661696C7572650D0A-
  1136 00000923 00                 
  1137                                  LD_REC_MESS:
  1138 00000924 0D0A4572726F723A20-             DB      CR,LF,"Error: Unknown Record Type",CR,LF,0
  1138 0000092D 556E6B6E6F776E2052-
  1138 00000936 65636F726420547970-
  1138 0000093F 650D0A00           
  1139                                  LD_HEX_MESS:
  1140 00000943 0D0A4572726F723A20-             DB      CR,LF,"Error: Non Hex value received",CR,LF,0
  1140 0000094C 4E6F6E204865782076-
  1140 00000955 616C75652072656365-
  1140 0000095E 697665640D0A00     
  1141                                  LD_OK_MESS:
  1142 00000965 0D0A4C6F616420646F-             DB      CR,LF,"Load done",CR,LF,0
  1142 0000096E 6E650D0A00         
  1143                                  TERM_MESS:
  1144 00000973 0D0A50726F6772616D-             DB      CR,LF,"Program Terminated with exit code ",0
  1144 0000097C 205465726D696E6174-
  1144 00000985 656420776974682065-
  1144 0000098E 78697420636F646520-
  1144 00000997 00                 
  1145                                  
  1146                                  ; Mess+18=? character, change by bp number
  1147                                  FLAG_MESS:
  1148 00000998 2020204F4449542D53-             DB      "   ODIT-SZAPC=",0
  1148 000009A1 5A4150433D00       
  1149                                  FLAG_VALID:
  1150 000009A7 585858582E2E2E2E2E-             DB      "XXXX......X.X.X.",0; X=Don't display flag bit, .=Display
  1150 000009B0 2E582E582E582E00   
  1151                                  
  1152                                  HELP_MESS:
  1153 000009B8 0D0A436F6D6D616E64-             DB      CR,LF,"Commands"
  1153 000009C1 73                 
  1154 000009C2 0D0A44207B66726F6D-             DB      CR,LF,"D {from} {to}         : Dump Memory, example D 0000 0100"
  1154 000009CB 7D207B746F7D202020-
  1154 000009D4 2020202020203A2044-
  1154 000009DD 756D70204D656D6F72-
  1154 000009E6 792C206578616D706C-
  1154 000009EF 652044203030303020-
  1154 000009F8 30313030           
  1155 000009FC 0D0A46207B66726F6D-             DB      CR,LF,"F {from} {to} {Byte}  : Fill Memory, example FM 0200 020F 5A"
  1155 00000A05 7D207B746F7D207B42-
  1155 00000A0E 7974657D20203A2046-
  1155 00000A17 696C6C204D656D6F72-
  1155 00000A20 792C206578616D706C-
  1155 00000A29 6520464D2030323030-
  1155 00000A32 2030323046203541   
  1156 00000A3A 0D0A52202020202020-             DB      CR,LF,"R                     : Display Registers"
  1156 00000A43 202020202020202020-
  1156 00000A4C 2020202020203A2044-
  1156 00000A55 6973706C6179205265-
  1156 00000A5E 67697374657273     
  1157 00000A65 0D0A43207B7265677D-             DB      CR,LF,"C {reg}               : Change Registers, example CR SP=1234"
  1157 00000A6E 202020202020202020-
  1157 00000A77 2020202020203A2043-
  1157 00000A80 68616E676520526567-
  1157 00000A89 6973746572732C2065-
  1157 00000A92 78616D706C65204352-
  1157 00000A9B 2053503D31323334   
  1158 00000AA3 0D0A4C202020202020-             DB      CR,LF,"L                     : Load Intel hexfile"
  1158 00000AAC 202020202020202020-
  1158 00000AB5 2020202020203A204C-
  1158 00000ABE 6F616420496E74656C-
  1158 00000AC7 2068657866696C65   
  1159 00000ACF 0D0A4720207B416464-             DB      CR,LF,"G  {Address}          : Execute, example G 0100"
  1159 00000AD8 726573737D20202020-
  1159 00000AE1 2020202020203A2045-
  1159 00000AEA 7865637574652C2065-
  1159 00000AF3 78616D706C65204720-
  1159 00000AFC 30313030           
  1160 00000B00 0D0A42207B576F7264-             DB      CR,LF,"B {Word}              : Change Base Segment Address, example BS 0340"
  1160 00000B09 7D2020202020202020-
  1160 00000B12 2020202020203A2043-
  1160 00000B1B 68616E676520426173-
  1160 00000B24 65205365676D656E74-
  1160 00000B2D 20416464726573732C-
  1160 00000B36 206578616D706C6520-
  1160 00000B3F 42532030333430     
  1161 00000B46 0D0A5742207B416464-             DB      CR,LF,"WB {Address} {Byte}   : Write Byte to address, example WB 1234 5A"
  1161 00000B4F 726573737D207B4279-
  1161 00000B58 74657D2020203A2057-
  1161 00000B61 726974652042797465-
  1161 00000B6A 20746F206164647265-
  1161 00000B73 73732C206578616D70-
  1161 00000B7C 6C6520574220313233-
  1161 00000B85 34203541           
  1162 00000B89 0D0A5757207B416464-             DB      CR,LF,"WW {Address} {Word}   : Write Word to address"
  1162 00000B92 726573737D207B576F-
  1162 00000B9B 72647D2020203A2057-
  1162 00000BA4 7269746520576F7264-
  1162 00000BAD 20746F206164647265-
  1162 00000BB6 7373               
  1163 00000BB8 0D0A4942207B506F72-             DB      CR,LF,"IB {Port}             : Read Byte from Input port, example IB 03F8"
  1163 00000BC1 747D20202020202020-
  1163 00000BCA 2020202020203A2052-
  1163 00000BD3 656164204279746520-
  1163 00000BDC 66726F6D20496E7075-
  1163 00000BE5 7420706F72742C2065-
  1163 00000BEE 78616D706C65204942-
  1163 00000BF7 2030334638         
  1164 00000BFC 0D0A4957207B506F72-             DB      CR,LF,"IW {Port}             : Read Word from Input port"
  1164 00000C05 747D20202020202020-
  1164 00000C0E 2020202020203A2052-
  1164 00000C17 65616420576F726420-
  1164 00000C20 66726F6D20496E7075-
  1164 00000C29 7420706F7274       
  1165 00000C2F 0D0A4F42207B506F72-             DB      CR,LF,"OB {Port} {Byte}      : Write Byte to Output port, example OB 03F8 3A"
  1165 00000C38 747D207B427974657D-
  1165 00000C41 2020202020203A2057-
  1165 00000C4A 726974652042797465-
  1165 00000C53 20746F204F75747075-
  1165 00000C5C 7420706F72742C2065-
  1165 00000C65 78616D706C65204F42-
  1165 00000C6E 2030334638203341   
  1166 00000C76 0D0A4F57207B506F72-             DB      CR,LF,"OW {Port} {Word}      : Write Word to Output port, example OB 03F8 3A5A"
  1166 00000C7F 747D207B576F72647D-
  1166 00000C88 2020202020203A2057-
  1166 00000C91 7269746520576F7264-
  1166 00000C9A 20746F204F75747075-
  1166 00000CA3 7420706F72742C2065-
  1166 00000CAC 78616D706C65204F42-
  1166 00000CB5 203033463820334135-
  1166 00000CBE 41                 
  1167 00000CBF 0D0A00                          DB      CR,LF,0
  1168                                  
  1169                                  
  1170                                  UNKNOWN_MESS:
  1171 00000CC2 0D0A2A2A2A20455252-             DB      CR,LF,"*** ERROR: Spurious Interrupt ",0
  1171 00000CCB 4F523A205370757269-
  1171 00000CD4 6F757320496E746572-
  1171 00000CDD 727570742000       
  1172                                  UNKNOWNSER_MESS:
  1173 00000CE3 0D0A2A2A2A20455252-             DB      CR,LF,"*** ERROR: Unknown Service INT,AH=",0
  1173 00000CEC 4F523A20556E6B6E6F-
  1173 00000CF5 776E20536572766963-
  1173 00000CFE 6520494E542C41483D-
  1173 00000D07 00                 
  1174                                  
  1175                                          %INCLUDE "startup.asm"
  1176                              <1> ; ROM startup code Duodyne 80C188
  1177                              <1> ; This is based on the STARTUP.ASM for the N8VEM SBC-188, which is under GPL 3.
  1178                              <1>         [LIST   -]
  1181                              <1> 
  1182                              <1>         SECTION startup start=1FF00h vstart=0FFF00h
  1183                              <1> 
  1184                              <1> begin:
  1185 00000000 FA                  <1>         CLI
  1186 00000001 FC                  <1>         CLD
  1187 00000002 B6FF                <1>         MOV     dh, ip_base >> 8
  1188 00000004 BE[6C00]            <1>         MOV     si, table       ; Point to the table
  1189 00000007 8CC8                <1>         MOV     ax, cs
  1190 00000009 8ED8                <1>         MOV     ds, ax
  1191 0000000B B90400              <1>         MOV     cx, tablecnt
  1192                              <1> 
  1193                              <1> .1:
  1194 0000000E AC                  <1>         LODSB                   ; Initialise registers from table
  1195 0000000F 88C2                <1>         MOV     dl, al
  1196 00000011 AD                  <1>         LODSW
  1197 00000012 EF                  <1>         OUT     dx, ax
  1198 00000013 E2F9                <1>         LOOP    .1
  1199                              <1> 
  1200 00000015 B80091              <1>         MOV     ax, 9100h       ; Stack at top of RAM
  1201 00000018 8ED0                <1>         MOV     ss, ax
  1202 0000001A BC0070              <1>         MOV     sp, 7000h
  1203 0000001D B80091              <1>         MOV     ax, 9100h       ; Set DS
  1204 00000020 8ED8                <1>         MOV     ds, ax
  1205 00000022 B800F0              <1>         MOV     ax, 0F000h      ; Set CS=ES
  1206 00000025 8EC0                <1>         MOV     es, ax
  1207                              <1> 
  1208                              <1> ; setup UART
  1209 00000027 B080                <1>         MOV     al,80h
  1210 00000029 BA83FA              <1>         MOV     dx,uart_lcr
  1211 0000002C EE                  <1>         OUT     dx,al
  1212 0000002D B00C                <1>         MOV     al,12
  1213 0000002F BA80FA              <1>         MOV     dx,uart_thr
  1214 00000032 EE                  <1>         OUT     dx,al
  1215 00000033 B000                <1>         MOV     al,00
  1216 00000035 BA81FA              <1>         MOV     dx,uart_ier
  1217 00000038 EE                  <1>         OUT     dx,al
  1218 00000039 B003                <1>         MOV     al,03
  1219 0000003B BA83FA              <1>         MOV     dx,uart_lcr
  1220 0000003E EE                  <1>         OUT     dx,al
  1221 0000003F BA84FA              <1>         MOV     dx,uart_mcr
  1222 00000042 EE                  <1>         OUT     dx,al
  1223                              <1> 
  1224 00000043 B001                <1>         MOV     al,01h          ; light first LED on RAM Card
  1225 00000045 BA94F8              <1>         MOV     dx,RAMROM_card_1
  1226 00000048 EE                  <1>         OUT     dx,al
  1227                              <1> 
  1228 00000049 B000                <1>         MOV     al,00h          ; Put LED Pattern on Front Panel
  1229 0000004B BA30FA              <1>         MOV     dx,front_panel_LEDs
  1230 0000004E EE                  <1>         OUT     dx,al
  1231                              <1> 
  1232 0000004F B000                <1>         MOV     al,00h          ; Turn on First LED on CPU Card
  1233 00000051 BA38FA              <1>         MOV     dx,local_ls259_LED1
  1234 00000054 EE                  <1>         OUT     dx,al
  1235 00000055 B001                <1>         MOV     al,01h          ; Turn off Second LED on CPU Card
  1236 00000057 BA39FA              <1>         MOV     dx,local_ls259_LED2
  1237 0000005A EE                  <1>         OUT     dx,al
  1238 0000005B B000                <1>         MOV     al,00h          ; Turn on Third LED on CPU Card
  1239 0000005D BA3AFA              <1>         MOV     dx,local_ls259_LED3
  1240 00000060 EE                  <1>         OUT     dx,al
  1241 00000061 B001                <1>         MOV     al,01h          ; Turn off Fourth LED on CPU Card
  1242 00000063 BA3BFA              <1>         MOV     dx,local_ls259_LED4
  1243 00000066 EE                  <1>         OUT     dx,al
  1244                              <1> 
  1245 00000067 EA[0000]00F0        <1>         JMP     0F000h:INITMON  ; Continue to body of ROM
  1246                              <1> 
  1247                              <1> table:
  1248                              <1>         DB_LO   ics_umcs        ; ROM
  1192 0000006C A0                  <2>  DB %1 & 0ffh
  1249 0000006D 3CE0                <1>         DW      0E03Ch          ; 128KB, no wait states, no external ready
  1250                              <1>         DB_LO   ics_mmcs        ; RAM
  1192 0000006F A6                  <2>  DB %1 & 0ffh
  1251 00000070 FC01                <1>         DW      01FCh           ; 00000h, no wait states, no external ready
  1252                              <1>         DB_LO   ics_mpcs        ; /MCSx size, /PCSx configuration
  1192 00000072 A8                  <2>  DB %1 & 0ffh
  1253 00000073 BCC0                <1>         DW      0C0BCh          ; 512KB, 7 /PCSx, I/O space, no wait states, no external ready
  1254                              <1>         DB_LO   ics_pacs        ; External peripherals
  1192 00000075 A4                  <2>  DB %1 & 0ffh
  1255 00000076 BE0F                <1>         DW      0FBEh           ; F800h, no wait states, no external ready (0FBCh=0 WS)
  1256                              <1> tablecnt        EQU ($-table)/3
  1257                              <1> 
  1258 00000078 FF<rep 78h>         <1>         SETLOC  0F0h            ; Reset entry is FFFF:0000h
  1259 000000F0 EA[0000]00F0        <1>         JMP     0F000h:begin    ; Jump to the startup code above
  1260 000000F5 30392F32392F323400  <1>         DB      "09/29/24", 00h ; BIOS date (mm/dd/yy)
  1261 000000FE FBFF                <1>         DB      0FBh, 0FFh      ; Model identifier (FBh is a 1986 XT)
