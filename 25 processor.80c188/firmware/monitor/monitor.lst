     1                                  ;**********************************************************************
     2                                  ;
     3                                  ; MON88 (c) HT-LAB
     4                                  ;
     5                                  ; - Simple Monitor for 8088/86
     6                                  ; - Some bios calls
     7                                  ; - Requires roughly 14K, default segment registers set to 0380h
     8                                  ; - Assembled using A86 assembler
     9                                  ;
    10                                  ;----------------------------------------------------------------------
    11                                  ;
    12                                  ; Copyright (C) 2005 Hans Tiggeler - http://www.ht-lab.com
    13                                  ; Send comments and bugs to : cpu86@ht-lab.com
    14                                  ;
    15                                  ; This program is free software; you can redistribute it and/or modify
    16                                  ; it under the terms of the GNU General Public License as published by
    17                                  ; the Free Software Foundation; either version 2 of the License, or
    18                                  ; (at your option) any later version.
    19                                  ;
    20                                  ; This program is distributed in the hope that it will be useful, but
    21                                  ; WITHOUT ANY WARRANTY; without even the implied warranty of
    22                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    23                                  ; General Public License for more details.
    24                                  ;
    25                                  ; You should have received a copy of the GNU General Public License
    26                                  ; along with this program; if not, write to the Free Software Foundation,
    27                                  ; Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    28                                  ;----------------------------------------------------------------------
    29                                  ;
    30                                  ; Ver 0.1     30 July 2005  H.Tiggeler  WWW.HT-LAB.COM
    31                                  ;**********************************************************************
    32                                          %DEFINE DEBUG   1
    33                                  
    34                                          CPU     186
    35                                  
    36                                          SECTION monitor  start=1F000h vstart=0F0000h
    37                                          GLOBAL  cold_boot
    38                                          GLOBAL  INITMON
    39                                  
    40                                          SEGMENT _TEXT
    41                                  
    42                                  TOS             EQU 0A000h      ; Top of stack
    43                                  
    44                                  LF              EQU 0Ah
    45                                  CR              EQU 0Dh
    46                                  ESC             EQU 01Bh
    47                                  
    48                                  ;----------------------------------------------------------------------
    49                                  ; Used for Load Hex file command
    50                                  ;----------------------------------------------------------------------
    51                                  EOF_REC         EQU 01          ; End of file record
    52                                  DATA_REC        EQU 00          ; Load data record
    53                                  EAD_REC         EQU 02          ; Extended Address Record, use to set CS
    54                                  SSA_REC         EQU 03          ; Execute Address
    55                                  
    56                                  
    57                                  ;------------------------------------------------------------------------------------
    58                                  ; Default Base Segment Pointer
    59                                  ; All MON88 commands operate on the BASE_SEGMENT:xxxx address.
    60                                  ; The base_segment value can be changed by the BS command
    61                                  ;------------------------------------------------------------------------------------
    62                                  BASE_SEGMENT    EQU 0050h
    63                                  
    64                                  ;----------------------------------------------------------------------
    65                                  ; Working Storage values
    66                                  ;----------------------------------------------------------------------
    67                                  ; Interrupt Vectors 0000h-03ffh
    68                                  ;
    69                                  ;----------------------------------------------------------------------
    70                                  ; Save Register values
    71                                  ;----------------------------------------------------------------------
    72                                  UAX             EQU 0400h
    73                                  UBX             EQU 0402h
    74                                  UCX             EQU 0404h
    75                                  UDX             EQU 0406h
    76                                  USP             EQU 0408h
    77                                  UBP             EQU 040ah
    78                                  USI             EQU 040ch
    79                                  UDI             EQU 040eh
    80                                  UDS             EQU 0410h
    81                                  UES             EQU 0412h
    82                                  USS             EQU 0414h
    83                                  UCS             EQU 0416h
    84                                  UIP             EQU 00418h
    85                                  UFL             EQU 0041ah
    86                                  ;----------------------------------------------------------------------
    87                                  ; memory dump working storage
    88                                  ;----------------------------------------------------------------------
    89                                  DUMPMEMS        EQU 041ch
    90                                  
    91                                  
    92                                  
    93                                          %IMACRO WRSPACE  0      ; Write space character
    94                                          MOV     AL,' '
    95                                          CALL    TXCHAR
    96                                          %ENDM
    97                                  
    98                                          %IMACRO WREQUAL  0      ; Write = character
    99                                          MOV     AL,'='
   100                                          CALL    TXCHAR
   101                                          %ENDM
   102                                  
   103                                          ORG     0400h           ; First 1024 bytes used for int vectors
   104                                  
   105                                  INITMON:
   106                                  
   107                                          %IFDEF  DEBUG
   108 00000000 B001                                MOV     al,01h          ; Put POST Pattern on Front Panel
   109 00000002 BA30FA                              MOV     dx,front_panel_LEDs
   110 00000005 EE                                  OUT     dx,al
   111                                          %ENDIF
   112                                  
   113 00000006 B800A0                          MOV     AX,TOS          ; Top of Stack
   114 00000009 89C4                            MOV     SP,AX           ; Set Stack pointer
   115                                  
   116                                  ;----------------------------------------------------------------------
   117                                  ; Install Interrupt Vectors
   118                                  ; INT1 & INT3 used for single stepping and breakpoints
   119                                  ; INT# * 4     =
   120                                  ; INT# * 4 + 2 = Segment
   121                                  ;----------------------------------------------------------------------
   122                                  
   123 0000000B 31C0                            XOR     AX,AX           ; Segment=0000
   124 0000000D 8EC0                            MOV     ES,AX
   125                                  
   126                                  ; Point all vectors to unknown handler!
   127 0000000F 31DB                            XOR     BX,BX           ; 256 vectors * 4 bytes
   128                                  NEXTINTS:
   129 00000011 26C707[6607]                    MOV     WORD [ES:BX],   INTX; Spurious Interrupt Handler
   130 00000016 26C747020000                    MOV     WORD [ES:BX+2], 0
   131 0000001C 83C304                          ADD     BX,4
   132 0000001F 81FB0004                        CMP     BX,0400h
   133 00000023 75EC                            JNE     NEXTINTS
   134                                  
   135 00000025 26C7060400[CF05]                MOV     WORD [ES:04],   INT1_3; INT1 Single Step handler
   136 0000002C 26C7060C00[CF05]                MOV     WORD [ES:12],   INT1_3; INT3 Breakpoint handler
   137 00000033 26C7064000[3C06]                MOV     WORD [ES:64],   INT10; INT10h
   138 0000003A 26C7065800[4F06]                MOV     WORD [ES:88],   INT16; INT16h
   139 00000041 26C7066800[8906]                MOV     WORD [ES:104],  INT1A; INT1A, Timer functions
   140 00000048 26C7068400[B906]                MOV     WORD [ES:132],  INT21; INT21h
   141                                  
   142                                          %IFDEF  DEBUG
   143 0000004F B002                                MOV     al,02h          ; Put POST Pattern on Front Panel
   144 00000051 BA30FA                              MOV     dx,front_panel_LEDs
   145 00000054 EE                                  OUT     dx,al
   146                                          %ENDIF
   147                                  
   148 00000055 B80000                          MOV     ax, 0000h       ; Set DS
   149 00000058 8ED8                            MOV     DS,AX           ;
   150                                  ;----------------------------------------------------------------------
   151                                  ; Entry point, Display welcome message
   152                                  ;----------------------------------------------------------------------
   153                                  START:
   154 0000005A FC                              CLD
   155 0000005B BE[7307]                        MOV     SI,  WELCOME_MESS;   -> SI
   156 0000005E E86104                          CALL    PUTS            ; String pointed to by CS:[SI]
   157                                  
   158                                          %IFDEF  DEBUG
   159 00000061 B004                                MOV     al,04h          ; Put POST Pattern on Front Panel
   160 00000063 BA30FA                              MOV     dx,front_panel_LEDs
   161 00000066 EE                                  OUT     dx,al
   162                                          %ENDIF
   163                                  
   164 00000067 B85000                          MOV     AX,BASE_SEGMENT ; Get Default Base segment
   165 0000006A 8EC0                            MOV     ES,AX
   166                                  
   167                                  ;----------------------------------------------------------------------
   168                                  ; Process commands
   169                                  ;----------------------------------------------------------------------
   170                                  CMD:
   171 0000006C BE[EA07]                        MOV     SI,  PROMPT_MESS; Display prompt >
   172 0000006F E85004                          CALL    PUTS
   173                                  
   174 00000072 E83905                          CALL    RXCHAR          ; Get Command First Byte
   175 00000075 E81805                          CALL    TO_UPPER
   176 00000078 88C6                            MOV     DH,AL
   177                                  
   178 0000007A BB[C200]                        MOV     BX,  CMDTAB1    ; Single Command?
   179                                  CMPCMD1:
   180 0000007D 2E8A07                          MOV     AL,[CS:BX]
   181 00000080 38F0                            CMP     AL,DH
   182 00000082 7509                            JNE     NEXTCMD1
   183                                          WRSPACE
    94 00000084 B020                <1>  MOV AL,' '
    95 00000086 E81405              <1>  CALL TXCHAR
   184 00000089 2EFF6702                        JMP     [CS:BX+2]       ; Execute Command
   185                                  
   186                                  NEXTCMD1:
   187 0000008D 83C304                          ADD     BX,4
   188 00000090 81FB[EA00]                      CMP     BX,  ENDTAB1
   189 00000094 75E7                            JNE     CMPCMD1         ; Continue looking
   190                                  
   191 00000096 E81505                          CALL    RXCHAR          ; Get Second Command Byte, DX=command
   192 00000099 E8F404                          CALL    TO_UPPER
   193 0000009C 88C2                            MOV     DL,AL
   194                                  
   195 0000009E BB[EC00]                        MOV     BX,  CMDTAB2
   196                                  CMPCMD2:
   197 000000A1 2E8B07                          MOV     AX,[CS:BX]
   198 000000A4 39D0                            CMP     AX,DX
   199 000000A6 7509                            JNE     NEXTCMD2
   200                                          WRSPACE
    94 000000A8 B020                <1>  MOV AL,' '
    95 000000AA E8F004              <1>  CALL TXCHAR
   201 000000AD 2EFF6702                        JMP     [CS:BX+2]       ; Execute Command
   202                                  
   203                                  NEXTCMD2:
   204 000000B1 83C304                          ADD     BX,4
   205 000000B4 81FB[0401]                      CMP     BX,  ENDTAB2
   206 000000B8 75E7                            JNE     CMPCMD2         ; Continue looking
   207                                  
   208 000000BA BE[F107]                        MOV     SI,  ERRCMD_MESS; Display Unknown Command, followed by usage message
   209 000000BD E80204                          CALL    PUTS
   210 000000C0 EBAA                            JMP     CMD             ; Try again
   211                                  
   212                                  CMDTAB1:
   213 000000C2 4C00[E003]                      DW      'L',LOADHEX     ; Single char Command Jump Table
   214 000000C6 5200[0A03]                      DW      'R',DISPREG
   215 000000CA 4700[D301]                      DW      'G',EXECPROG
   216 000000CE 4800[A804]                      DW      'H',DISPHELP
   217 000000D2 3F00[A804]                      DW      '?',DISPHELP
   218 000000D6 4600[E902]                      DW      'F',FILLMEM     ; Double char Command Jump Table
   219 000000DA 4400[2902]                      DW      'D',DUMPMEM
   220 000000DE 4300[4201]                      DW      'C',CHANGEREG   ; Change Register
   221 000000E2 4200[C101]                      DW      'B',CHANGEBS    ; Change Base Segment Address
   222 000000E6 0D00[6C00]                      DW      CR ,CMD
   223                                  ENDTAB1:
   224 000000EA 2000                            DW      ' '
   225                                  
   226                                  ; note bytes are reversed . . . . .
   227                                  CMDTAB2:
   228 000000EC 424F[E401]                      DW      'BO',OUTPORTB
   229 000000F0 574F[F501]                      DW      'WO',OUTPORTW
   230 000000F4 4249[0602]                      DW      'BI',INPORTB
   231 000000F8 5749[1702]                      DW      'WI',INPORTW
   232 000000FC 4257[0601]                      DW      'BW',WRMEMB     ; Write Byte to Memory
   233 00000100 5757[2401]                      DW      'WW',WRMEMW     ; Write Word to Memory
   234                                  ENDTAB2:
   235 00000104 3F3F                            DW      '??'
   236                                  
   237                                  
   238                                  ;----------------------------------------------------------------------
   239                                  ; Write Byte to Memory
   240                                  ;----------------------------------------------------------------------
   241                                  WRMEMB:
   242 00000106 E81004                          CALL    GETHEX4         ; Get Address
   243 00000109 89C3                            MOV     BX,AX           ; Store Address
   244                                          WRSPACE
    94 0000010B B020                <1>  MOV AL,' '
    95 0000010D E88D04              <1>  CALL TXCHAR
   245                                  
   246 00000110 268A07                          MOV     AL,[ES:BX]      ; Get current value and display it
   247 00000113 E84604                          CALL    PUTHEX2
   248                                          WREQUAL
    99 00000116 B03D                <1>  MOV AL,'='
   100 00000118 E88204              <1>  CALL TXCHAR
   249 0000011B E80804                          CALL    GETHEX2         ; Get new value
   250 0000011E 268807                          MOV     [ES:BX],AL      ; and write it
   251                                  
   252 00000121 E948FF                          JMP     CMD             ; Next Command
   253                                  
   254                                  ;----------------------------------------------------------------------
   255                                  ; Write Word to Memory
   256                                  ;----------------------------------------------------------------------
   257                                  WRMEMW:
   258 00000124 E8F203                          CALL    GETHEX4         ; Get Address
   259 00000127 89C3                            MOV     BX,AX
   260                                          WRSPACE
    94 00000129 B020                <1>  MOV AL,' '
    95 0000012B E86F04              <1>  CALL TXCHAR
   261                                  
   262 0000012E 268B07                          MOV     AX,[ES:BX]      ; Get current value and display it
   263 00000131 E81D04                          CALL    PUTHEX4
   264                                          WREQUAL
    99 00000134 B03D                <1>  MOV AL,'='
   100 00000136 E86404              <1>  CALL TXCHAR
   265 00000139 E8DD03                          CALL    GETHEX4         ; Get new value
   266 0000013C 268907                          MOV     [ES:BX],AX      ; and write it
   267                                  
   268 0000013F E92AFF                          JMP     CMD             ; Next Command
   269                                  
   270                                  ;----------------------------------------------------------------------
   271                                  ; Change Register
   272                                  ; Valid register names: AX,BX,CX,DX,SP,BP,SI,DI,DS,ES,SS,CS,IP,FL (flag)
   273                                  ;----------------------------------------------------------------------
   274                                  CHANGEREG:
   275 00000142 E86904                          CALL    RXCHAR          ; Get Command First Register character
   276 00000145 E84804                          CALL    TO_UPPER
   277 00000148 88C6                            MOV     DH,AL
   278 0000014A E86104                          CALL    RXCHAR          ; Get Second Register character, DX=register
   279 0000014D E84004                          CALL    TO_UPPER
   280 00000150 88C2                            MOV     DL,AL
   281                                  
   282 00000152 BB[8701]                        MOV     BX,  REGTAB
   283                                  CMPREG:
   284 00000155 2E8B07                          MOV     AX,[CS:BX]
   285 00000158 39D0                            CMP     AX,DX           ; Compare register string with user input
   286 0000015A 7519                            JNE     NEXTREG         ; No, continue search
   287                                  
   288                                          WREQUAL
    99 0000015C B03D                <1>  MOV AL,'='
   100 0000015E E83C04              <1>  CALL TXCHAR
   289 00000161 E8B503                          CALL    GETHEX4         ; Get new value
   290 00000164 89C1                            MOV     CX,AX           ; CX=New reg value
   291                                  
   292 00000166 8D3E0004                        LEA     DI,UAX          ; Point to User Register Storage
   293 0000016A 2E8A5F02                        MOV     BL,[CS:BX+2]       ; Get
   294 0000016E 30FF                            XOR     BH,BH
   295 00000170 8909                            MOV     [DI+BX],CX
   296 00000172 E99501                          JMP     DISPREG         ; Display All registers
   297                                  
   298                                  NEXTREG:
   299 00000175 83C304                          ADD     BX,4
   300 00000178 81FB[BF01]                      CMP     BX,  ENDREG
   301 0000017C 75D7                            JNE     CMPREG          ; Continue looking
   302                                  
   303 0000017E BE[1D08]                        MOV     SI,  ERRREG_MESS; Display Unknown Register Name
   304 00000181 E83E03                          CALL    PUTS
   305                                  
   306 00000184 E9E5FE                          JMP     CMD             ; Try Again
   307                                  
   308                                  REGTAB:
   309 00000187 41580000                        DW      'AX',0          ; register name,
   310 0000018B 42580200                        DW      'BX',2
   311 0000018F 43580400                        DW      'CX',4
   312 00000193 44580600                        DW      'DX',6
   313 00000197 53500800                        DW      'SP',8
   314 0000019B 42500A00                        DW      'BP',10
   315 0000019F 53490C00                        DW      'SI',12
   316 000001A3 44490E00                        DW      'DI',14
   317 000001A7 44531000                        DW      'DS',16
   318 000001AB 45531200                        DW      'ES',18
   319 000001AF 53531400                        DW      'SS',20
   320 000001B3 43531600                        DW      'CS',22
   321 000001B7 49501800                        DW      'IP',24
   322 000001BB 464C1A00                        DW      'FL',26
   323                                  ENDREG:
   324 000001BF 3F3F                            DW      '??'
   325                                  
   326                                  
   327                                  ;----------------------------------------------------------------------
   328                                  ; Change Base Segment pointer
   329                                  ; Dump/Fill/Load operate on BASE_SEGMENT:[USER INPUT ADDRESS]
   330                                  ; Note: CB command will not update the User Registers!
   331                                  ;----------------------------------------------------------------------
   332                                  CHANGEBS:
   333 000001C1 8CC0                            MOV     AX,ES           ; WORD BASE_SEGMENT
   334 000001C3 E88B03                          CALL    PUTHEX4         ; Display current value
   335                                          WRSPACE
    94 000001C6 B020                <1>  MOV AL,' '
    95 000001C8 E8D203              <1>  CALL TXCHAR
   336 000001CB E84B03                          CALL    GETHEX4
   337 000001CE 50                              PUSH    AX
   338 000001CF 07                              POP     ES
   339 000001D0 E999FE                          JMP     CMD             ; Next Command
   340                                  
   341                                  
   342                                  ;----------------------------------------------------------------------
   343                                  ; Execute program
   344                                  ; 1) Enable all Breakpoints (replace opcode with INT3 CC)
   345                                  ; 2) Restore User registers
   346                                  ; 3) Jump to BASE_SEGMENT:USER_
   347                                  ;----------------------------------------------------------------------
   348                                  EXECPROG:
   349                                  ;        MOV     BX,  BPTAB      ; Enable All breakpoints
   350                                  ;        MOV     CX,8
   351                                  
   352                                  ;NEXTENBP:
   353                                  ;        MOV     AX,8
   354                                  ;        SUB     AL,CL
   355                                  ;        TEST    BYTE [BX+3],1   ; Check enable/disable flag
   356                                  ;        JZ      NEXTEXBP
   357                                  ;        MOV     DI,[BX]         ; Get Breakpoint Address
   358                                  ;        MOV     BYTE [ES:DI],0CCh; Write INT3 instruction to address
   359                                  
   360                                  ;NEXTEXBP:
   361                                  ;        ADD     BX,4            ; Next entry
   362                                  ;        LOOP    NEXTENBP
   363                                  
   364                                  ;TRACENTRY:
   365                                  ;        MOV     AX,ES           ; Display Segment Address
   366                                  ;        CALL    PUTHEX4
   367                                  ;        MOV     AL,':'
   368                                  ;        CALL    TXCHAR
   369                                  ;        CALL    GETHEX4         ; Get new IP
   370                                  ;        MOV     [UIP],AX        ; Update User IP
   371                                  ;        MOV     AX,ES
   372                                  ;        MOV     [UCS],AX
   373                                  
   374                                  ; Single Step Registers
   375                                  ; bit3 bit2 bit1 bit0
   376                                  ;  |    |    |     \--- '1' =Enable Single Step
   377                                  ;  |    |     \-------- '1' =Select TXMON output for UARTx
   378                                  ;  \-----\------------- '00'=No Step
   379                                  ;                       '01'=Step
   380                                  ;                       '10'=select step_sw input
   381                                  ;                       '11'=select not(step_sw) input
   382                                  ;           MOV     DX,HWM_CONFIG
   383                                  ;           MOV     AL,07h                      ; xxxx-0111 step=1
   384                                  ;           OUT     DX,AL                       ; Enable Trace
   385                                  
   386                                  ;TRACNENTRY:
   387                                  ;        MOV     AX,[UAX]        ; Restore User Registers
   388                                  ;        MOV     BX,[UBX]
   389                                  ;        MOV     CX,[UCX]
   390                                  ;        MOV     DX,[UDX]
   391                                  ;        MOV     BP,[UBP]
   392                                  ;        MOV     SI,[USI]
   393                                  ;        MOV     DI,[UDI]
   394                                  
   395                                  ;        MOV     ES,[UES]
   396                                  ;        CLI                     ; User User Stack!!
   397                                  ;        MOV     SS,[USS]
   398                                  ;        MOV     SP,[USP]
   399                                  
   400 000001D3 FF361A04                        PUSH    word [UFL]
   401 000001D7 FF361604                        PUSH    word [UCS]      ; Push CS (Base Segment)
   402 000001DB FF361804                        PUSH    word [UIP]
   403 000001DF 8E1E1004                        MOV     DS,[UDS]
   404 000001E3 CF                              IRET                    ; Execute!
   405                                  
   406                                  ;----------------------------------------------------------------------
   407                                  ; Write Byte to Output port
   408                                  ;----------------------------------------------------------------------
   409                                  OUTPORTB:
   410 000001E4 E83203                          CALL    GETHEX4         ; Get Port address
   411 000001E7 89C2                            MOV     DX,AX
   412                                          WREQUAL
    99 000001E9 B03D                <1>  MOV AL,'='
   100 000001EB E8AF03              <1>  CALL TXCHAR
   413 000001EE E83503                          CALL    GETHEX2         ; Get Port value
   414 000001F1 EE                              OUT     DX,AL
   415 000001F2 E977FE                          JMP     CMD             ; Next Command
   416                                  
   417                                  ;----------------------------------------------------------------------
   418                                  ; Write Word to Output port
   419                                  ;----------------------------------------------------------------------
   420                                  OUTPORTW:
   421 000001F5 E82103                          CALL    GETHEX4         ; Get Port address
   422 000001F8 89C2                            MOV     DX,AX
   423                                          WREQUAL
    99 000001FA B03D                <1>  MOV AL,'='
   100 000001FC E89E03              <1>  CALL TXCHAR
   424 000001FF E81703                          CALL    GETHEX4         ; Get Port value
   425 00000202 EF                              OUT     DX,AX
   426 00000203 E966FE                          JMP     CMD             ; Next Command
   427                                  
   428                                  ;----------------------------------------------------------------------
   429                                  ; Read Byte from Input port
   430                                  ;----------------------------------------------------------------------
   431                                  INPORTB:
   432 00000206 E81003                          CALL    GETHEX4         ; Get Port address
   433 00000209 89C2                            MOV     DX,AX
   434                                          WREQUAL
    99 0000020B B03D                <1>  MOV AL,'='
   100 0000020D E88D03              <1>  CALL TXCHAR
   435 00000210 EC                              IN      AL,DX
   436 00000211 E84803                          CALL    PUTHEX2
   437 00000214 E955FE                          JMP     CMD             ; Next Command
   438                                  
   439                                  ;----------------------------------------------------------------------
   440                                  ; Read Word from Input port
   441                                  ;----------------------------------------------------------------------
   442                                  INPORTW:
   443 00000217 E8FF02                          CALL    GETHEX4         ; Get Port address
   444                                          WREQUAL
    99 0000021A B03D                <1>  MOV AL,'='
   100 0000021C E87E03              <1>  CALL TXCHAR
   445 0000021F E87B03                          CALL    TXCHAR
   446 00000222 ED                              IN      AX,DX
   447 00000223 E82B03                          CALL    PUTHEX4
   448 00000226 E943FE                          JMP     CMD             ; Next Command
   449                                  
   450                                  ;----------------------------------------------------------------------
   451                                  ; Display Memory
   452                                  ;----------------------------------------------------------------------
   453                                  DUMPMEM:
   454 00000229 E8DB02                          CALL    GETRANGE        ; Range from BX to DX
   455                                  NEXTDMP:
   456 0000022C BE1C04                          MOV     SI,  DUMPMEMS   ; Store ASCII values
   457                                  
   458 0000022F E8C802                          CALL    NEWLINE
   459 00000232 8CC0                            MOV     AX,ES
   460 00000234 E81A03                          CALL    PUTHEX4
   461 00000237 B03A                            MOV     AL,':'
   462 00000239 E86103                          CALL    TXCHAR
   463 0000023C 89D8                            MOV     AX,BX
   464 0000023E 83E0F0                          AND     AX,0FFF0h
   465 00000241 E80D03                          CALL    PUTHEX4
   466                                          WRSPACE                 ; Write Space
    94 00000244 B020                <1>  MOV AL,' '
    95 00000246 E85403              <1>  CALL TXCHAR
   467                                          WRSPACE                 ; Write Space
    94 00000249 B020                <1>  MOV AL,' '
    95 0000024B E84F03              <1>  CALL TXCHAR
   468                                  
   469 0000024E 88DC                            MOV     AH,BL           ; Save lsb
   470 00000250 80E40F                          AND     AH,0Fh          ; 16 byte boundary
   471                                  
   472 00000253 E87F00                          CALL    WRNSPACE        ; Write AH spaces
   473 00000256 E87C00                          CALL    WRNSPACE        ; Write AH spaces
   474 00000259 E87900                          CALL    WRNSPACE        ; Write AH spaces
   475                                  
   476                                  DISPBYTE:
   477 0000025C B91000                          MOV     CX,16
   478 0000025F 28E1                            SUB     CL,AH
   479                                  
   480                                  LOOPDMP1:
   481 00000261 268A07                          MOV     AL,[ES:BX]      ; Get Byte and display it in HEX
   482 00000264 3E8804                          MOV     [DS:SI],AL      ; Save it
   483 00000267 E8F202                          CALL    PUTHEX2
   484                                          WRSPACE                 ; Write Space
    94 0000026A B020                <1>  MOV AL,' '
    95 0000026C E82E03              <1>  CALL TXCHAR
   485 0000026F 43                              INC     BX
   486 00000270 46                              INC     SI
   487 00000271 39D3                            CMP     BX,DX
   488 00000273 7309                            JNC     SHOWREM         ; show remaining
   489 00000275 E2EA                            LOOP    LOOPDMP1
   490                                  
   491 00000277 E83300                          CALL    PUTSDMP         ; Display it
   492                                  
   493 0000027A 39DA                            CMP     DX,BX           ; End of memory range?
   494 0000027C 73AE                            JNC     NEXTDMP         ; No, continue with next 16 bytes
   495                                  
   496                                  SHOWREM:
   497 0000027E BE1C04                          MOV     SI,  DUMPMEMS   ; Stored ASCII values
   498 00000281 89D8                            MOV     AX,BX
   499 00000283 83E00F                          AND     AX,0000Fh
   500 00000286 84C0                            TEST    AL,AL
   501 00000288 741B                            JZ      SKIPCLR
   502 0000028A 01C6                            ADD     SI,AX           ;
   503 0000028C B410                            MOV     AH,16
   504 0000028E 28C4                            SUB     AH,AL
   505 00000290 88E1                            MOV     CL,AH
   506 00000292 30ED                            XOR     CH,CH
   507 00000294 B020                            MOV     AL,' '          ; Clear non displayed values
   508                                  NEXTCLR:
   509 00000296 3E8804                          MOV     [DS:SI],AL      ; Save it
   510 00000299 46                              INC     SI
   511 0000029A E2FA                            LOOP    NEXTCLR
   512 0000029C E83600                          CALL    WRNSPACE        ; Write AH spaces
   513 0000029F E83300                          CALL    WRNSPACE        ; Write AH spaces
   514 000002A2 E83000                          CALL    WRNSPACE        ; Write AH spaces
   515                                  SKIPCLR:
   516 000002A5 30E4                            XOR     AH,AH
   517 000002A7 E80300                          CALL    PUTSDMP
   518                                  
   519                                  EXITDMP:
   520 000002AA E9BFFD                          JMP     CMD             ; Next Command
   521                                  
   522                                  PUTSDMP:
   523 000002AD BE1C04                          MOV     SI,  DUMPMEMS   ; Stored ASCII values
   524                                          WRSPACE                 ; Add 2 spaces
    94 000002B0 B020                <1>  MOV AL,' '
    95 000002B2 E8E802              <1>  CALL TXCHAR
   525                                          WRSPACE
    94 000002B5 B020                <1>  MOV AL,' '
    95 000002B7 E8E302              <1>  CALL TXCHAR
   526 000002BA E81800                          CALL    WRNSPACE        ; Write AH spaces
   527 000002BD B91000                          MOV     CX,16
   528 000002C0 28E1                            SUB     CL,AH           ; Adjust if not started at xxx0
   529                                  NEXTCH:
   530 000002C2 AC                              LODSB                   ; Get character AL=DS:[SI++]
   531 000002C3 3C1F                            CMP     AL,01Fh         ; 20..7E printable
   532 000002C5 7606                            JBE     PRINTDOT
   533 000002C7 3C7F                            CMP     AL,07Fh
   534 000002C9 7302                            JAE     PRINTDOT
   535 000002CB EB02                            JMP     PRINTCH
   536                                  PRINTDOT:
   537 000002CD B02E                            MOV     AL,'.'
   538                                  PRINTCH:
   539 000002CF E8CB02                          CALL    TXCHAR
   540 000002D2 E2EE                            LOOP    NEXTCH          ; Next Character
   541 000002D4 C3                              RET
   542                                  
   543                                  WRNSPACE:
   544 000002D5 50                              PUSH    AX              ; Write AH space, skip if 0
   545 000002D6 51                              PUSH    CX
   546 000002D7 84E4                            TEST    AH,AH
   547 000002D9 740B                            JZ      EXITWRNP
   548 000002DB 30ED                            XOR     CH,CH           ; Write AH spaces
   549 000002DD 88E1                            MOV     CL,AH
   550 000002DF B020                            MOV     AL,' '
   551                                  NEXTDTX:
   552 000002E1 E8B902                          CALL    TXCHAR
   553 000002E4 E2FB                            LOOP    NEXTDTX
   554                                  EXITWRNP:
   555 000002E6 59                              POP     CX
   556 000002E7 58                              POP     AX
   557 000002E8 C3                              RET
   558                                  
   559                                  ;----------------------------------------------------------------------
   560                                  ; Fill Memory
   561                                  ;----------------------------------------------------------------------
   562                                  FILLMEM:
   563 000002E9 E81B02                          CALL    GETRANGE        ; First get range BX to DX
   564                                          WRSPACE
    94 000002EC B020                <1>  MOV AL,' '
    95 000002EE E8AC02              <1>  CALL TXCHAR
   565 000002F1 E83202                          CALL    GETHEX2
   566 000002F4 50                              PUSH    AX              ; Store fill character
   567 000002F5 E80202                          CALL    NEWLINE
   568                                  
   569 000002F8 39DA                            CMP     DX,BX
   570 000002FA 720B                            JB      EXITFILL
   571                                  DOFILL:
   572 000002FC 29DA                            SUB     DX,BX
   573 000002FE 89D1                            MOV     CX,DX
   574 00000300 89DF                            MOV     DI,BX           ; [ES:DI]
   575 00000302 58                              POP     AX              ; Restore fill char
   576                                  NEXTFILL:
   577 00000303 AA                              STOSB
   578 00000304 E2FD                            LOOP    NEXTFILL
   579 00000306 AA                              STOSB                   ; Last byte
   580                                  EXITFILL:
   581 00000307 E962FD                          JMP     CMD             ; Next Command
   582                                  
   583                                  ;----------------------------------------------------------------------
   584                                  ; Display Registers
   585                                  ;
   586                                  ; AX=0001 BX=0002 CX=0003 DX=0004 SP=0005 BP=0006 SI=0007 DI=0008
   587                                  ; DS=0009 ES=000A SS=000B CS=000C IP=0100   ODIT-SZAPC=0000-00000
   588                                  ;----------------------------------------------------------------------
   589                                  DISPREG:
   590 0000030A E8ED01                          CALL    NEWLINE
   591 0000030D BE[9F03]                        MOV     SI,  REG_MESS   ;   -> SI
   592 00000310 8D3E0004                        LEA     DI,UAX
   593                                  
   594 00000314 B90800                          MOV     CX,8
   595                                  NEXTDR1:
   596 00000317 E8A801                          CALL    PUTS            ; Point to first "AX=" string
   597 0000031A 8B05                            MOV     AX,[DI]         ; DI points to AX value
   598 0000031C E83202                          CALL    PUTHEX4         ; Display AX value
   599 0000031F 83C605                          ADD     SI,5            ; point to "BX=" string
   600 00000322 83C702                          ADD     DI,2            ; Point to BX value
   601 00000325 E2F0                            LOOP    NEXTDR1         ; etc
   602                                  
   603 00000327 E8D001                          CALL    NEWLINE
   604 0000032A B90500                          MOV     CX,5
   605                                  NEXTDR2:
   606 0000032D E89201                          CALL    PUTS            ; Point to first "DS=" string
   607 00000330 8B05                            MOV     AX,[DI]         ; DI points to DS value
   608 00000332 E81C02                          CALL    PUTHEX4         ; Display DS value
   609 00000335 83C605                          ADD     SI,5            ; point to "ES=" string
   610 00000338 83C702                          ADD     DI,2            ; Point to ES value
   611 0000033B E2F0                            LOOP    NEXTDR2         ; etc
   612                                  
   613 0000033D BE[4D09]                        MOV     SI,  FLAG_MESS
   614 00000340 E87F01                          CALL    PUTS
   615 00000343 BE[5C09]                        MOV     SI,  FLAG_VALID ; String indicating which bits to display
   616 00000346 8B1D                            MOV     BX,[DI]         ; get flag value in BX
   617                                  
   618 00000348 B90800                          MOV     CX,8            ; Display first 4 bits
   619                                  NEXTBIT1:
   620 0000034B AC                              LODSB                   ; Get display/notdisplay flag AL=DS:[SI++]
   621 0000034C 3C58                            CMP     AL,'X'          ; Display?
   622 0000034E 7504                            JNE     SHFTCAR         ; Yes, shift bit into carry and display it
   623 00000350 D1E3                            SAL     BX,1            ; no, ignore bit
   624 00000352 EB0D                            JMP     EXITDISP1
   625                                  SHFTCAR:
   626 00000354 D1E3                            SAL     BX,1
   627 00000356 7204                            JC      DISP1
   628 00000358 B030                            MOV     AL,'0'
   629 0000035A EB02                            JMP     DISPBIT
   630                                  DISP1:
   631 0000035C B031                            MOV     AL,'1'
   632                                  DISPBIT:
   633 0000035E E83C02                          CALL    TXCHAR
   634                                  EXITDISP1:
   635 00000361 E2E8                            LOOP    NEXTBIT1
   636                                  
   637 00000363 B02D                            MOV     AL,'-'          ; Display seperator 0000-00000
   638 00000365 E83502                          CALL    TXCHAR
   639                                  
   640 00000368 B90800                          MOV     CX,8            ; Display remaining 5 bits
   641                                  NEXTBIT2:
   642 0000036B AC                              LODSB                   ; Get display/notdisplay flag AL=DS:[SI++]
   643 0000036C 3C58                            CMP     AL,'X'          ; Display?
   644 0000036E 7504                            JNE     SHFTCAR2        ; Yes, shift bit into carry and display it
   645 00000370 D1E3                            SAL     BX,1            ; no, ignore bit
   646 00000372 EB0D                            JMP     EXITDISP2
   647                                  SHFTCAR2:
   648 00000374 D1E3                            SAL     BX,1
   649 00000376 7204                            JC      DISP2
   650 00000378 B030                            MOV     AL,'0'
   651 0000037A EB02                            JMP     DISPBIT2
   652                                  DISP2:
   653 0000037C B031                            MOV     AL,'1'
   654                                  DISPBIT2:
   655 0000037E E81C02                          CALL    TXCHAR
   656                                  EXITDISP2:
   657 00000381 E2E8                            LOOP    NEXTBIT2
   658                                  
   659 00000383 E87401                          CALL    NEWLINE         ; Display CS:IP Instr
   660 00000386 A11604                          MOV     AX,[UCS]
   661 00000389 E8C501                          CALL    PUTHEX4
   662 0000038C B03A                            MOV     AL,':'
   663 0000038E E80C02                          CALL    TXCHAR
   664 00000391 A11804                          MOV     AX,[UIP]
   665 00000394 E8BA01                          CALL    PUTHEX4
   666                                          WRSPACE
    94 00000397 B020                <1>  MOV AL,' '
    95 00000399 E80102              <1>  CALL TXCHAR
   667                                  
   668 0000039C E9CDFC                          JMP     CMD             ; Next Command
   669                                  
   670                                  REG_MESS:
   671 0000039F 41583D0000                      DB      "AX=",0,0       ; Display Register names table
   672 000003A4 2042583D00                      DB      " BX=",0
   673 000003A9 2043583D00                      DB      " CX=",0
   674 000003AE 2044583D00                      DB      " DX=",0
   675 000003B3 2053503D00                      DB      " SP=",0
   676 000003B8 2042503D00                      DB      " BP=",0
   677 000003BD 2053493D00                      DB      " SI=",0
   678 000003C2 2044493D00                      DB      " DI=",0
   679                                  
   680 000003C7 44533D0000                      DB      "DS=",0,0
   681 000003CC 2045533D00                      DB      " ES=",0
   682 000003D1 2053533D00                      DB      " SS=",0
   683 000003D6 2043533D00                      DB      " CS=",0
   684 000003DB 2049503D00                      DB      " IP=",0
   685                                  
   686                                  ;----------------------------------------------------------------------
   687                                  ; Load Hex, terminate when ":00000001FF" is received
   688                                  ; Mon88 may hang if this string is not received
   689                                  ; Print '.' for each valid received frame, exit upon error
   690                                  ; Bytes are loaded at Segment=ES
   691                                  ;----------------------------------------------------------------------
   692                                  LOADHEX:
   693 000003E0 BE[6A08]                        MOV     SI,  LOAD_MESS  ; Display Ready to receive upload
   694 000003E3 E8DC00                          CALL    PUTS
   695                                  
   696 000003E6 B03E                            MOV     AL,'>'
   697 000003E8 EB33                            JMP     DISPCH
   698                                  
   699                                  RXBYTE:
   700 000003EA 86FC                            XCHG    BH,AH           ; save AH register
   701 000003EC E81400                          CALL    RXNIB
   702 000003EF 88C4                            MOV     AH,AL
   703 000003F1 D0E4                            SHL     AH,1            ; Can't use CL
   704 000003F3 D0E4                            SHL     AH,1
   705 000003F5 D0E4                            SHL     AH,1
   706 000003F7 D0E4                            SHL     AH,1
   707 000003F9 E80700                          CALL    RXNIB
   708 000003FC 08E0                            OR      AL,AH
   709 000003FE 00C3                            ADD     BL,AL           ; Add to check sum
   710 00000400 86FC                            XCHG    BH,AH           ; Restore AH register
   711 00000402 C3                              RET
   712                                  
   713                                  RXNIB:
   714 00000403 E8BA01                          CALL    RXCHARNE        ; Get Hex Character in AL
   715 00000406 3C30                            CMP     AL,'0'          ; Check to make sure 0-9,A-F
   716 00000408 7211                            JB      ERROR           ;ERRHEX
   717 0000040A 3C46                            CMP     AL,'F'
   718 0000040C 770D                            JA      ERROR           ;ERRHEX
   719 0000040E 3C39                            CMP     AL,'9'
   720 00000410 7606                            JBE     SUB0
   721 00000412 3C41                            CMP     AL,'A'
   722 00000414 7205                            JB      ERROR           ; ERRHEX
   723 00000416 2C07                            SUB     AL,07h          ; Convert to hex
   724                                  SUB0:
   725 00000418 2C30                            SUB     AL,'0'          ; Convert to hex
   726 0000041A C3                              RET
   727                                  
   728                                  
   729                                  ERROR:
   730 0000041B B045                            MOV     AL,'E'
   731                                  DISPCH:
   732 0000041D E87D01                          CALL    TXCHAR
   733                                  
   734                                  WAITLDS:
   735 00000420 E89D01                          CALL    RXCHARNE        ; Wait for ':'
   736 00000423 3C3A                            CMP     AL,':'
   737 00000425 75F9                            JNE     WAITLDS
   738                                  
   739 00000427 31C9                            XOR     CX,CX           ; CL=Byte count
   740 00000429 31DB                            XOR     BX,BX           ; BL=Checksum
   741                                  
   742 0000042B E8BCFF                          CALL    RXBYTE          ; Get length in CX
   743 0000042E 88C1                            MOV     CL,AL
   744                                  
   745 00000430 E8B7FF                          CALL    RXBYTE          ; Get Address HIGH
   746 00000433 88C4                            MOV     AH,AL
   747 00000435 E8B2FF                          CALL    RXBYTE          ; Get Address LOW
   748 00000438 89C7                            MOV     DI,AX           ; DI=Store Address
   749                                  
   750 0000043A E8ADFF                          CALL    RXBYTE          ; Get Record Type
   751 0000043D 3C01                            CMP     AL,EOF_REC      ; End Of File Record
   752 0000043F 742A                            JE      GOENDLD
   753 00000441 3C00                            CMP     AL,DATA_REC     ; Data Record?
   754 00000443 7446                            JE      GOLOAD
   755 00000445 3C02                            CMP     AL,EAD_REC      ; Extended Address Record?
   756 00000447 744A                            JE      GOEAD
   757 00000449 3C03                            CMP     AL,SSA_REC      ; Start Segment Address Record?
   758 0000044B 7402                            JE      GOSSA
   759 0000044D EBCC                            JMP     ERROR           ;ERRREC
   760                                  
   761                                  GOSSA:
   762 0000044F B90200                          MOV     CX,2            ; Get 2 word
   763                                  NEXTW:
   764 00000452 E895FF                          CALL    RXBYTE
   765 00000455 88C4                            MOV     AH,AL
   766 00000457 E890FF                          CALL    RXBYTE
   767 0000045A 50                              PUSH    AX              ; Push CS, IP
   768 0000045B E2F5                            LOOP    NEXTW
   769 0000045D E88AFF                          CALL    RXBYTE          ; Get Checksum
   770 00000460 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   771 00000462 F6D0                            NOT     AL              ; Two's complement
   772 00000464 0401                            ADD     AL,1
   773 00000466 38D8                            CMP     AL,BL           ; Checksum held in BL
   774 00000468 75B1                            JNE     ERROR           ;ERRCHKS
   775 0000046A CB                              RETF                    ; Execute loaded file
   776                                  
   777                                  GOENDLD:
   778 0000046B E87CFF                          CALL    RXBYTE
   779 0000046E 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   780 00000470 F6D0                            NOT     AL              ; Two's complement
   781 00000472 0401                            ADD     AL,1
   782 00000474 38D8                            CMP     AL,BL           ; Checksum held in BL
   783 00000476 75A3                            JNE     ERROR           ;ERRCHKS
   784 00000478 EB25                            JMP     LOADOK
   785                                  
   786                                  GOCHECK:
   787 0000047A E86DFF                          CALL    RXBYTE
   788 0000047D 28C3                            SUB     BL,AL           ; Remove checksum from checksum
   789 0000047F F6D0                            NOT     AL              ; Two's complement
   790 00000481 0401                            ADD     AL,1
   791 00000483 38D8                            CMP     AL,BL           ; Checksum held in BL
   792 00000485 7594                            JNE     ERROR           ;ERRCHKS
   793 00000487 B02E                            MOV     AL,'.'          ; After each successful record print a '.'
   794 00000489 EB92                            JMP     DISPCH
   795                                  
   796                                  GOLOAD:
   797 0000048B E85CFF                          CALL    RXBYTE          ; Read Bytes
   798 0000048E AA                              STOSB                   ; ES:DI <= AL
   799 0000048F E2FA                            LOOP    GOLOAD
   800 00000491 EBE7                            JMP     GOCHECK
   801                                  
   802                                  GOEAD:
   803 00000493 E854FF                          CALL    RXBYTE
   804 00000496 88C4                            MOV     AH,AL
   805 00000498 E84FFF                          CALL    RXBYTE
   806 0000049B 8EC0                            MOV     ES,AX           ; Set Segment address (ES)
   807 0000049D EBDB                            JMP     GOCHECK
   808                                  
   809                                  ;ERRCHKS:    MOV     SI,  LD_CHKS_MESS      ; Display Checksum error
   810                                  ;            JMP     EXITLD                      ; Exit Load Command
   811                                  ;ERRREC:     MOV     SI,  LD_REC_MESS       ; Display unknown record type
   812                                  ;            JMP     EXITLD                      ; Exit Load Command
   813                                  LOADOK:
   814 0000049F BE[FF08]                        MOV     SI,  LD_OK_MESS ; Display Load OK
   815                                  ;            JMP     EXITLD
   816                                  ;ERRHEX:     MOV     SI,  LD_HEX_MESS       ; Display Error hex value
   817                                  EXITLD:
   818 000004A2 E81D00                          CALL    PUTS
   819 000004A5 E9C4FB                          JMP     CMD             ; Exit Load Command
   820                                  
   821                                  ;----------------------------------------------------------------------
   822                                  ; Display Help Menu
   823                                  ;----------------------------------------------------------------------
   824                                  DISPHELP:
   825 000004A8 BE[6D09]                        MOV     SI,  HELP_MESS  ;   -> SI
   826 000004AB E81400                          CALL    PUTS            ; String pointed to by DS:[SI]
   827                                  EXITDH:
   828 000004AE E9BBFB                          JMP     CMD             ; Next Command
   829                                  
   830                                  
   831                                  ;======================================================================
   832                                  ; Monitor routines
   833                                  ;======================================================================
   834                                  ;----------------------------------------------------------------------
   835                                  ; Return String Length in AL
   836                                  ; String pointed to by DS:[SI]
   837                                  ;----------------------------------------------------------------------
   838                                  STRLEN:
   839 000004B1 56                              PUSH    SI
   840 000004B2 B4FF                            MOV     AH,-1
   841 000004B4 FC                              CLD
   842                                  NEXTSL:
   843 000004B5 FEC4                            INC     AH
   844 000004B7 AC                              LODSB                   ; AL=DS:[SI++]
   845 000004B8 08C0                            OR      AL,AL           ; Zero?
   846 000004BA 75F9                            JNZ     NEXTSL          ; No, continue
   847 000004BC 88E0                            MOV     AL,AH           ; Return Result in AX
   848 000004BE 30E4                            XOR     AH,AH
   849 000004C0 5E                              POP     SI
   850 000004C1 C3                              RET
   851                                  
   852                                  ;----------------------------------------------------------------------
   853                                  ; Write zero terminated string to CONOUT
   854                                  ; String pointed to by CS:[SI]
   855                                  ;----------------------------------------------------------------------
   856                                  PUTS:
   857 000004C2 1E                              PUSH    DS
   858 000004C3 56                              PUSH    SI
   859 000004C4 50                              PUSH    AX
   860                                  
   861 000004C5 50                              PUSH    AX
   862 000004C6 8CC8                            MOV     AX,CS
   863 000004C8 8ED8                            MOV     DS,AX
   864 000004CA 58                              POP     AX
   865                                  
   866 000004CB FC                              CLD
   867                                  PRINT:
   868 000004CC AC                              LODSB                   ; AL=DS:[SI++]
   869 000004CD 08C0                            OR      AL,AL           ; Zero?
   870 000004CF 7405                            JZ      PRINT_X         ; then exit
   871 000004D1 E8C900                          CALL    TXCHAR
   872 000004D4 EBF6                            JMP     PRINT           ; Next Character
   873                                  PRINT_X:
   874 000004D6 58                              POP     AX
   875 000004D7 5E                              POP     SI
   876 000004D8 1F                              POP     DS
   877 000004D9 C3                              RET
   878                                  
   879                                  ;----------------------------------------------------------------------
   880                                  ; Write zero terminated string to CONOUT
   881                                  ; String pointed to by DS:[SI]
   882                                  ;----------------------------------------------------------------------
   883                                  PUTSD:
   884 000004DA 56                              PUSH    SI
   885 000004DB 50                              PUSH    AX
   886 000004DC FC                              CLD
   887                                  PRINTD:
   888 000004DD AC                              LODSB                   ; AL=DS:[SI++]
   889 000004DE 08C0                            OR      AL,AL           ; Zero?
   890 000004E0 7405                            JZ      PRINTD_X        ; then exit
   891 000004E2 E8B800                          CALL    TXCHAR
   892 000004E5 EBF6                            JMP     PRINTD          ; Next Character
   893                                  PRINTD_X:
   894 000004E7 58                              POP     AX
   895 000004E8 5E                              POP     SI
   896 000004E9 C3                              RET
   897                                  
   898                                  
   899                                  ;----------------------------------------------------------------------
   900                                  ; Write string to CONOUT, length in CL
   901                                  ; String pointed to by DS:[SI]
   902                                  ;----------------------------------------------------------------------
   903                                  PUTSF:
   904 000004EA 56                              PUSH    SI
   905 000004EB 51                              PUSH    CX
   906 000004EC 50                              PUSH    AX
   907 000004ED FC                              CLD
   908 000004EE 30ED                            XOR     CH,CH
   909                                  PRTF:
   910 000004F0 AC                              LODSB                   ; AL=DS:[SI++]
   911 000004F1 E8A900                          CALL    TXCHAR
   912 000004F4 E2FA                            LOOP    PRTF
   913 000004F6 58                              POP     AX
   914 000004F7 59                              POP     CX
   915 000004F8 5E                              POP     SI
   916 000004F9 C3                              RET
   917                                  
   918                                  ;----------------------------------------------------------------------
   919                                  ; Write newline
   920                                  ;----------------------------------------------------------------------
   921                                  NEWLINE:
   922 000004FA 50                              PUSH    AX
   923 000004FB B00D                            MOV     AL,CR
   924 000004FD E89D00                          CALL    TXCHAR
   925 00000500 B00A                            MOV     AL,LF
   926 00000502 E89800                          CALL    TXCHAR
   927 00000505 58                              POP     AX
   928 00000506 C3                              RET
   929                                  ;----------------------------------------------------------------------
   930                                  ; Get Address range into BX, DX
   931                                  ;----------------------------------------------------------------------
   932                                  GETRANGE:
   933 00000507 50                              PUSH    AX
   934 00000508 E80E00                          CALL    GETHEX4
   935 0000050B 89C3                            MOV     BX,AX
   936 0000050D B02D                            MOV     AL,'-'
   937 0000050F E88B00                          CALL    TXCHAR
   938 00000512 E80400                          CALL    GETHEX4
   939 00000515 89C2                            MOV     DX,AX
   940 00000517 58                              POP     AX
   941 00000518 C3                              RET
   942                                  
   943                                  ;----------------------------------------------------------------------
   944                                  ; Get Hex4,2,1 Into AX, AL, AL
   945                                  ;----------------------------------------------------------------------
   946                                  GETHEX4:
   947 00000519 53                              PUSH    BX
   948 0000051A E80900                          CALL    GETHEX2         ; Get Hex Character in AX
   949 0000051D 88C3                            MOV     BL,AL
   950 0000051F E80400                          CALL    GETHEX2
   951 00000522 88DC                            MOV     AH,BL
   952 00000524 5B                              POP     BX
   953 00000525 C3                              RET
   954                                  
   955                                  GETHEX2:
   956 00000526 53                              PUSH    BX
   957 00000527 E81100                          CALL    GETHEX1         ; Get Hex character in AL
   958 0000052A 88C3                            MOV     BL,AL
   959 0000052C D0E3                            SHL     BL,1
   960 0000052E D0E3                            SHL     BL,1
   961 00000530 D0E3                            SHL     BL,1
   962 00000532 D0E3                            SHL     BL,1
   963 00000534 E80400                          CALL    GETHEX1
   964 00000537 08D8                            OR      AL,BL
   965 00000539 5B                              POP     BX
   966 0000053A C3                              RET
   967                                  
   968                                  GETHEX1:
   969 0000053B E87000                          CALL    RXCHAR          ; Get Hex character in AL
   970 0000053E 3C1B                            CMP     AL,ESC
   971 00000540 7503                            JNE     OKCHAR
   972 00000542 E927FB                          JMP     CMD             ; Abort if ESC is pressed
   973                                  OKCHAR:
   974 00000545 E84800                          CALL    TO_UPPER
   975 00000548 3C39                            CMP     AL,39h          ; 0-9?
   976 0000054A 7E02                            JLE     CONVDEC         ; yes, subtract 30
   977 0000054C 2C07                            SUB     AL,07h          ; A-F subtract 39
   978                                  CONVDEC:
   979 0000054E 2C30                            SUB     AL,30h
   980 00000550 C3                              RET
   981                                  
   982                                  ;----------------------------------------------------------------------
   983                                  ; Display AX/AL in HEX
   984                                  ;----------------------------------------------------------------------
   985                                  PUTHEX4:
   986 00000551 86C4                            XCHG    AL,AH           ; Write AX in hex
   987 00000553 E80600                          CALL    PUTHEX2
   988 00000556 86C4                            XCHG    AL,AH
   989 00000558 E80100                          CALL    PUTHEX2
   990 0000055B C3                              RET
   991                                  
   992                                  PUTHEX2:
   993 0000055C 50                              PUSH    AX              ; Save the working register
   994 0000055D D0E8                            SHR     AL,1
   995 0000055F D0E8                            SHR     AL,1
   996 00000561 D0E8                            SHR     AL,1
   997 00000563 D0E8                            SHR     AL,1
   998 00000565 E80500                          CALL    PUTHEX1         ; Output it
   999 00000568 58                              POP     AX              ; Get the LSD
  1000 00000569 E80100                          CALL    PUTHEX1         ; Output
  1001 0000056C C3                              RET
  1002                                  
  1003                                  PUTHEX1:
  1004 0000056D 50                              PUSH    AX              ; Save the working register
  1005 0000056E 240F                            AND     AL, 0FH         ; Mask off any unused bits
  1006 00000570 3C0A                            CMP     AL, 0AH         ; Test for alpha or numeric
  1007 00000572 7C02                            JL      NUMERIC         ; Take the branch if numeric
  1008 00000574 0407                            ADD     AL, 7           ; Add the adjustment for hex alpha
  1009                                  NUMERIC:
  1010 00000576 0430                            ADD     AL, '0'         ; Add the numeric bias
  1011 00000578 E82200                          CALL    TXCHAR          ; Send to the console
  1012 0000057B 58                              POP     AX
  1013 0000057C C3                              RET
  1014                                  
  1015                                  ;----------------------------------------------------------------------
  1016                                  ; Convert HEX to BCD
  1017                                  ; 3Bh->59
  1018                                  ;----------------------------------------------------------------------
  1019                                  HEX2BCD:
  1020 0000057D 51                              PUSH    CX
  1021 0000057E 30E4                            XOR     AH,AH
  1022 00000580 B10A                            MOV     CL,0Ah
  1023 00000582 F6F1                            DIV     CL
  1024 00000584 D0E0                            SHL     AL,1
  1025 00000586 D0E0                            SHL     AL,1
  1026 00000588 D0E0                            SHL     AL,1
  1027 0000058A D0E0                            SHL     AL,1
  1028 0000058C 08E0                            OR      AL,AH
  1029 0000058E 59                              POP     CX
  1030 0000058F C3                              RET
  1031                                  
  1032                                  ;----------------------------------------------------------------------
  1033                                  ; Convert to Upper Case
  1034                                  ; if (c >= 'a' && c <= 'z') c -= 32;
  1035                                  ;----------------------------------------------------------------------
  1036                                  TO_UPPER:
  1037 00000590 3C61                            CMP     AL,'a'
  1038 00000592 7D01                            JGE     CHECKZ
  1039 00000594 C3                              RET
  1040                                  CHECKZ:
  1041 00000595 3C7A                            CMP     AL,'z'
  1042 00000597 7E01                            JLE     SUB32
  1043 00000599 C3                              RET
  1044                                  SUB32:
  1045 0000059A 2C20                            SUB     AL,32
  1046 0000059C C3                              RET
  1047                                  
  1048                                  ;----------------------------------------------------------------------
  1049                                  ; Transmit character in AL
  1050                                  ;----------------------------------------------------------------------
  1051                                  TXCHAR:
  1052 0000059D 52                              PUSH    DX
  1053 0000059E 50                              PUSH    AX              ; Character in AL
  1054 0000059F BA85FA                          MOV     dx,uart_lsr     ; READ LINE STATUS REGISTER
  1055                                  WAITTX:
  1056 000005A2 EC                              IN      AL,DX
  1057 000005A3 2420                            AND     AL,20h          ; And status with user BH mask
  1058 000005A5 74FB                            JZ      WAITTX          ; no, wait
  1059 000005A7 BA80FA                          MOV     DX,uart_thr     ; point to data port
  1060 000005AA 58                              POP     AX
  1061 000005AB EE                              OUT     DX,AL
  1062 000005AC 5A                              POP     DX
  1063 000005AD C3                              RET
  1064                                  
  1065                                  ;----------------------------------------------------------------------
  1066                                  ; Receive character in AL, blocking
  1067                                  ; AL Changed
  1068                                  ;----------------------------------------------------------------------
  1069                                  RXCHAR:
  1070 000005AE 52                              PUSH    DX
  1071 000005AF BA85FA                          MOV     DX,uart_lsr
  1072                                  WAITRX:
  1073 000005B2 EC                              IN      AL,DX
  1074 000005B3 2401                            AND     AL,01h
  1075 000005B5 74FB                            JZ      WAITRX          ; blocking
  1076 000005B7 BA80FA                          MOV     DX,uart_rbr
  1077 000005BA EC                              IN      AL,DX           ; return result in al
  1078 000005BB E8DFFF                          CALL    TXCHAR          ; Echo back
  1079 000005BE 5A                              POP     DX
  1080 000005BF C3                              RET
  1081                                  
  1082                                  ;----------------------------------------------------------------------
  1083                                  ; Receive character in AL, blocking
  1084                                  ; AL Changed
  1085                                  ; No Echo
  1086                                  ;----------------------------------------------------------------------
  1087                                  RXCHARNE:
  1088 000005C0 52                              PUSH    DX
  1089 000005C1 BA85FA                          MOV     DX,uart_lsr
  1090                                  WAITRXNE:
  1091 000005C4 EC                              IN      AL,DX
  1092 000005C5 2401                            AND     AL,01h
  1093 000005C7 74FB                            JZ      WAITRXNE        ; blocking
  1094 000005C9 BA80FA                          MOV     DX,uart_rbr
  1095 000005CC EC                              IN      AL,DX           ; return result in al
  1096 000005CD 5A                              POP     DX
  1097 000005CE C3                              RET
  1098                                  
  1099                                  ;======================================================================
  1100                                  ; Monitor Interrupt Handlers
  1101                                  ;======================================================================
  1102                                  ;----------------------------------------------------------------------
  1103                                  ; Breakpoint/Trace Interrupt Handler
  1104                                  ; Restore All instructions
  1105                                  ; Display Breakpoint Number
  1106                                  ; Update & Display Registers
  1107                                  ; Return to monitor
  1108                                  ;----------------------------------------------------------------------
  1109                                  INT1_3:
  1110 000005CF 55                              PUSH    BP
  1111 000005D0 89E5                            MOV     BP,SP           ; BP+2=IP, BP+4=CS, BP+6=Flags
  1112 000005D2 16                              PUSH    SS
  1113 000005D3 06                              PUSH    ES
  1114 000005D4 1E                              PUSH    DS
  1115 000005D5 57                              PUSH    DI
  1116 000005D6 56                              PUSH    SI
  1117 000005D7 55                              PUSH    BP              ; Note this is the wrong value
  1118 000005D8 54                              PUSH    SP
  1119 000005D9 52                              PUSH    DX
  1120 000005DA 51                              PUSH    CX
  1121 000005DB 53                              PUSH    BX
  1122 000005DC 50                              PUSH    AX
  1123                                  
  1124 000005DD B80000                          MOV     ax, 0000h       ; Set DS
  1125 000005E0 8ED8                            MOV     DS,AX
  1126                                  
  1127 000005E2 368B4604                        MOV     AX,[SS:BP+4]    ; Get user CS
  1128 000005E6 8EC0                            MOV     ES,AX           ; Used for restoring bp replaced opcode
  1129 000005E8 A31604                          MOV     [UCS],AX        ; Save User CS
  1130                                  
  1131 000005EB 368B4602                        MOV     AX,[SS:BP+2]    ; Save User IP
  1132 000005EF A31804                          MOV     [UIP],AX
  1133                                  
  1134 000005F2 89E7                            MOV     DI,SP           ; SS:SP=AX
  1135 000005F4 BB0004                          MOV     BX,  UAX        ; Update User registers, DI=pointing to AX
  1136 000005F7 B90B00                          MOV     CX,11
  1137                                  NEXTUREG:
  1138 000005FA 368B05                          MOV     AX,[SS:DI]      ; Get register
  1139 000005FD 8907                            MOV     [BX],AX         ; Write it to user reg
  1140 000005FF 83C302                          ADD     BX,2
  1141 00000602 83C702                          ADD     DI,2
  1142 00000605 E2F3                            LOOP    NEXTUREG
  1143                                  
  1144 00000607 89E8                            MOV     AX,BP           ; Save User SP
  1145 00000609 83C008                          ADD     AX,8
  1146 0000060C A30804                          MOV     [USP],AX
  1147                                  
  1148 0000060F 368B4600                        MOV     AX,[SS:BP]
  1149 00000613 A30A04                          MOV     [UBP],AX        ; Restore real BP value
  1150                                  
  1151 00000616 368B4606                        MOV     AX,[SS:BP+6]    ; Save Flags
  1152 0000061A A31A04                          MOV     [UFL],AX
  1153 0000061D 81261A04FFFE                    AND     word [UFL],0FEFFh; Clear TF
  1154                                  ;        TEST    AX,0100h        ; Check If Trace flag set then
  1155                                  ;        JZ      CONTBPC         ; No, check which bp triggered it
  1156                                  
  1157 00000623 EB00                            JMP     EXITINT3        ; Exit, Display regs, Cmd prompt
  1158                                  
  1159                                  ;CONTBPC:
  1160                                  ;        DEC     word [UIP]      ; No, IP-1 and save;
  1161                                  
  1162                                  ;        MOV     SI,  BREAKP_MESS; Display "***** BreakPoint # *****
  1163                                  
  1164                                  ;        MOV     BX,  BPTAB      ; Check which breakpoint triggered
  1165                                  ;        MOV     CX,8            ; and restore opcode
  1166                                  ;INTNEXTBP:
  1167                                  ;        MOV     AX,8
  1168                                  ;        SUB     AL,CL
  1169                                  
  1170                                  ;        TEST    BYTE [BX+3],1   ; Check enable/disable flag
  1171                                  ;        JZ      INT3RESBP
  1172                                  
  1173                                  ;        MOV     DI,[BX]         ; Get Breakpoint Address
  1174                                  ;        CMP     [UIP],DI
  1175                                  ;        JNE     INT3RES
  1176                                  
  1177                                  ;        ADD     AL, '0'         ; Add the numeric bias
  1178                                  ;        MOV     [SI+18],AL      ; Save number
  1179                                  
  1180                                  ;INT3RES:
  1181                                  ;        MOV     AL,BYTE [BX+2]  ; Get original Opcode
  1182                                  ;       MOV     [ES:DI],AL      ; Write it back
  1183                                  
  1184                                  ;INT3RESBP:
  1185                                  ;       ADD     BX,4            ; Next entry
  1186                                  ;       LOOP    INTNEXTBP
  1187                                  
  1188                                  ;        CALL    PUTS            ; Write BP Number message
  1189                                  
  1190                                  EXITINT3:
  1191 00000625 B80091                          MOV     ax, 9100h       ; Stack at top of RAM
  1192 00000628 8ED0                            MOV     ss, ax
  1193 0000062A B80000                          MOV     ax, 0000h       ; Set DS
  1194 0000062D 8ED8                            MOV     DS,AX
  1195 0000062F B800A0                          MOV     AX,  TOS        ; Top of Stack
  1196 00000632 89C4                            MOV     SP,AX           ; Restore Monitor Stack pointer
  1197 00000634 B85000                          MOV     AX,BASE_SEGMENT ; Restore Base Pointer
  1198 00000637 8EC0                            MOV     ES,AX
  1199                                  
  1200 00000639 E9CEFC                          JMP     DISPREG         ; Jump to Display Registers
  1201                                  
  1202                                  ;======================================================================
  1203                                  ; BIOS Services
  1204                                  ;======================================================================
  1205                                  
  1206                                  ;----------------------------------------------------------------------
  1207                                  ; Interrupt 10H, video function
  1208                                  ; Service   0E   Teletype Output
  1209                                  ; Input     AL   Character, BL and BH are ignored
  1210                                  ; Output
  1211                                  ; Changed
  1212                                  ;----------------------------------------------------------------------
  1213                                  INT10:
  1214 0000063C 80FC0E                          CMP     AH,0Eh
  1215 0000063F 7505                            JNE     ISR10_X
  1216                                  
  1217 00000641 E859FF                          CALL    TXCHAR          ; Transmit character
  1218 00000644 EB08                            JMP     ISR10_RET
  1219                                  
  1220                                  ;----------------------------------------------------------------------
  1221                                  ; Service Unkown service, display message int and ah value, return to monitor
  1222                                  ;----------------------------------------------------------------------
  1223                                  ISR10_X:
  1224 00000646 B010                            MOV     AL,10h
  1225 00000648 E8FE00                          CALL    DISPSERI        ; Display Int and service number
  1226 0000064B E9B2F9                          JMP     INITMON         ; Jump back to monitor
  1227                                  
  1228                                  ISR10_RET:
  1229 0000064E CF                              IRET
  1230                                  
  1231                                  
  1232                                  ;----------------------------------------------------------------------
  1233                                  ; Interrupt 16H, I/O function
  1234                                  ; Service   00   Wait for keystroke
  1235                                  ; Input
  1236                                  ; Output    AL   Character, AH=ScanCode=0
  1237                                  ; Changed   AX
  1238                                  ;----------------------------------------------------------------------
  1239                                  INT16:
  1240 0000064F 52                              PUSH    DX
  1241 00000650 55                              PUSH    BP
  1242 00000651 89E5                            MOV     BP,SP
  1243                                  
  1244                                  ISR16_00:
  1245 00000653 80FC00                          CMP     AH,00h
  1246 00000656 7507                            JNE     ISR16_01
  1247                                  
  1248 00000658 E853FF                          CALL    RXCHAR
  1249 0000065B 30E4                            XOR     AH,AH
  1250                                  
  1251 0000065D EB27                            JMP     ISR16_RET
  1252                                  
  1253                                  ;----------------------------------------------------------------------
  1254                                  ; Interrupt 16H, I/O function
  1255                                  ; Service   01   Check for keystroke (kbhit)
  1256                                  ; Input
  1257                                  ; Output    AL   Character, AH=ScanCode=0 ZF=0 when keystoke available
  1258                                  ; Changed   AX
  1259                                  ;----------------------------------------------------------------------
  1260                                  ISR16_01:
  1261 0000065F 80FC01                          CMP     AH,01h
  1262 00000662 751A                            JNE     ISR16_X
  1263                                  
  1264 00000664 30E4                            XOR     AH,AH           ; Clear ScanCode
  1265 00000666 36834E0840                      OR      WORD [SS:BP+8],0040h; SET ZF in stack stored flag
  1266                                  
  1267 0000066B BA85FA                          MOV     DX,uart_lsr
  1268 0000066E EC                              IN      AL,DX           ; Get Status
  1269 0000066F 2401                            AND     AL,01h
  1270 00000671 7413                            JZ      ISR16_RET       ; No keystoke
  1271                                  
  1272 00000673 BA80FA                          MOV     DX,uart_rbr
  1273 00000676 EC                              IN      AL,DX           ; return result in al
  1274 00000677 36836608BF                      AND     WORD [SS:BP+8],0FFBFh; Clear ZF in stack stored flag
  1275                                  
  1276 0000067C EB08                            JMP     ISR16_RET
  1277                                  
  1278                                  ;----------------------------------------------------------------------
  1279                                  ; Service Unkown service, display message int and ah value, return to monitor
  1280                                  ;----------------------------------------------------------------------
  1281                                  ISR16_X:
  1282 0000067E B016                            MOV     AL,16h
  1283 00000680 E8C600                          CALL    DISPSERI        ; Display Int and service number
  1284 00000683 E97AF9                          JMP     INITMON         ; Jump back to monitor
  1285                                  
  1286                                  ISR16_RET:
  1287 00000686 5D                              POP     BP
  1288 00000687 5A                              POP     DX
  1289 00000688 CF                              IRET
  1290                                  
  1291                                  
  1292                                  ;----------------------------------------------------------------------
  1293                                  ;  INT 1AH, timer function
  1294                                  ;  AX is not saved!
  1295                                  ;        Addr    Function
  1296                                  ;====    =========================================;
  1297                                  ; 00     current second for real-time clock
  1298                                  ; 02     current minute
  1299                                  ; 04     current hour
  1300                                  ; 07     current date of month
  1301                                  ; 08     current month
  1302                                  ; 09     current year  (final two digits; eg, 93)
  1303                                  ; 0A     Status Register A - Read/Write except UIP
  1304                                  ;----------------------------------------------------------------------
  1305                                  INT1A:
  1306 00000689 1E                              PUSH    DS
  1307 0000068A 55                              PUSH    BP
  1308 0000068B 89E5                            MOV     BP,SP
  1309                                  
  1310                                  ;----------------------------------------------------------------------
  1311                                  ; Interrupt 1AH, Time function
  1312                                  ; Service   00   Get System Time in ticks
  1313                                  ; Input
  1314                                  ; Output    CX:DX ticks since midnight
  1315                                  ;----------------------------------------------------------------------
  1316                                  ISR1A_00:
  1317 0000068D 31D2                            XOR     DX,DX
  1318 0000068F 31C9                            XOR     CX,CX
  1319 00000691 EB1E                            JMP     ISR1A_RET       ; exit
  1320                                  
  1321                                  
  1322                                  ;----------------------------------------------------------------------
  1323                                  ; Interrupt 1AH, Time function
  1324                                  ; Service   01   Set System Time from ticks
  1325                                  ; Input     CX:DX ticks since midnight
  1326                                  ; Output
  1327                                  ;----------------------------------------------------------------------
  1328                                  ISR1A_01:
  1329 00000693 31D2                            XOR     DX,DX
  1330 00000695 31C9                            XOR     CX,CX
  1331 00000697 EB18                            JMP     ISR1A_RET       ; exit
  1332                                  
  1333                                  
  1334                                  ;----------------------------------------------------------------------
  1335                                  ; Interrupt 1AH, Time function
  1336                                  ; Service   02   Get RTC time
  1337                                  ;   exit :  CF clear if successful, set on error ***NOT YET ADDED***
  1338                                  ;           CH = hour (BCD)
  1339                                  ;           CL = minutes (BCD)
  1340                                  ;           DH = seconds (BCD)
  1341                                  ;           DL = daylight savings flag  (!! NOT IMPLEMENTED !!)
  1342                                  ;                (00h standard time, 01h daylight time)
  1343                                  ;----------------------------------------------------------------------
  1344                                  ISR1A_02:
  1345 00000699 31D2                            XOR     DX,DX
  1346 0000069B 31C9                            XOR     CX,CX
  1347 0000069D EB12                            JMP     ISR1A_RET       ; exit
  1348                                  
  1349                                  ;----------------------------------------------------------------------
  1350                                  ; Int 1Ah function 03h - Set RTC time
  1351                                  ;   entry:  AH = 03h
  1352                                  ;           CH = hour (BCD)
  1353                                  ;           CL = minutes (BCD)
  1354                                  ;           DH = seconds (BCD)
  1355                                  ;           DL = daylight savings flag (as above)
  1356                                  ;   exit:   none
  1357                                  ;----------------------------------------------------------------------
  1358                                  ISR1A_03:
  1359                                  
  1360 0000069F EB10                            JMP     ISR1A_RET
  1361                                  
  1362                                  ;----------------------------------------------------------------------
  1363                                  ; Int 1Ah function 04h - Get RTC date
  1364                                  ;   entry:  AH = 04h
  1365                                  ;   exit:   CF clear if successful, set on error
  1366                                  ;           CH = century (BCD)
  1367                                  ;           CL = year (BCD)
  1368                                  ;           DH = month (BCD)
  1369                                  ;           DL = day (BCD)
  1370                                  ;----------------------------------------------------------------------
  1371                                  ISR1A_04:
  1372 000006A1 31D2                            XOR     DX,DX
  1373 000006A3 31C9                            XOR     CX,CX
  1374 000006A5 EB0A                            JMP     ISR1A_RET
  1375                                  
  1376                                  ;----------------------------------------------------------------------
  1377                                  ; Int 1Ah function 05h - Set RTC date
  1378                                  ;   entry:  AH = 05h
  1379                                  ;           CH = century (BCD)
  1380                                  ;           CL = year (BCD)
  1381                                  ;           DH = month (BCD)
  1382                                  ;           DL = day (BCD)
  1383                                  ;   exit:   none
  1384                                  ;----------------------------------------------------------------------
  1385                                  ISR1A_05:
  1386 000006A7 EB08                            JMP     ISR1A_RET
  1387                                  
  1388                                  ;----------------------------------------------------------------------
  1389                                  ; Interrupt 1Ah
  1390                                  ; Service   xx   Unknown service, print message, jump to monitor
  1391                                  ;----------------------------------------------------------------------
  1392                                  ISR1A_X:
  1393 000006A9 B01A                            MOV     AL,1Ah
  1394 000006AB E89B00                          CALL    DISPSERI        ; Display Int and service number
  1395 000006AE E94FF9                          JMP     INITMON         ; Jump back to monitor
  1396                                  
  1397                                  ISR1A_RET:
  1398 000006B1 36836608FE                      AND     WORD [SS:BP+8],0FFFEh; Clear Carry to indicate no error
  1399 000006B6 5D                              POP     BP
  1400 000006B7 1F                              POP     DS
  1401 000006B8 CF                              IRET
  1402                                  
  1403                                  ;----------------------------------------------------------------------
  1404                                  ; INT 21H, basic I/O functions
  1405                                  ; AX REGISTER NOT SAVED
  1406                                  ;----------------------------------------------------------------------
  1407                                  INT21:
  1408 000006B9 1E                              PUSH    DS              ; DS used for service 25h
  1409 000006BA 06                              PUSH    ES
  1410 000006BB 56                              PUSH    SI
  1411                                  
  1412 000006BC FB                              STI                     ; INT21 is reentrant!
  1413                                  
  1414                                  ;----------------------------------------------------------------------
  1415                                  ; Interrupt 21h
  1416                                  ; Service   01   get character from UART
  1417                                  ; Input
  1418                                  ; Output    AL   character read
  1419                                  ; Changed   AX
  1420                                  ;----------------------------------------------------------------------
  1421                                  ISR21_1:
  1422 000006BD 80FC01                          CMP     AH,01
  1423 000006C0 7505                            JNE     ISR21_2
  1424                                  
  1425 000006C2 E8E9FE                          CALL    RXCHAR          ; Return result in AL
  1426 000006C5 EB7E                            JMP     ISR21_RET       ; return to caller
  1427                                  
  1428                                  ;----------------------------------------------------------------------
  1429                                  ; Interrupt 21h
  1430                                  ; Service   02   write character to UART
  1431                                  ; Input     DL   character
  1432                                  ; Output
  1433                                  ; Changed   AX
  1434                                  ;----------------------------------------------------------------------
  1435                                  ISR21_2:
  1436 000006C7 80FC02                          CMP     AH,02
  1437 000006CA 7507                            JNE     ISR21_8
  1438                                  
  1439 000006CC 88D0                            MOV     AL,DL
  1440 000006CE E8CCFE                          CALL    TXCHAR
  1441                                  
  1442 000006D1 EB72                            JMP     ISR21_RET       ; return to caller
  1443                                  
  1444                                  ;----------------------------------------------------------------------
  1445                                  ; Interrupt 21h
  1446                                  ; Service   08   Console input without an echo
  1447                                  ; Input
  1448                                  ; Output
  1449                                  ; Changed   AX
  1450                                  ;----------------------------------------------------------------------
  1451                                  ISR21_8:
  1452 000006D3 80FC08                          CMP     AH,08
  1453 000006D6 7505                            JNE     ISR21_9
  1454                                  
  1455 000006D8 E8D3FE                          CALL    RXCHAR          ; Return result in AL
  1456 000006DB EB68                            JMP     ISR21_RET       ; return to caller
  1457                                  
  1458                                  ;----------------------------------------------------------------------
  1459                                  ; Interrupt 21h
  1460                                  ; Service   09   write 0 terminated string to UART  (change to $ terminated ??)
  1461                                  ; Input     DX     to string
  1462                                  ; Output
  1463                                  ; Changed   AX
  1464                                  ;----------------------------------------------------------------------
  1465                                  ISR21_9:
  1466 000006DD 80FC09                          CMP     AH,09
  1467 000006E0 7507                            JNE     ISR21_25
  1468                                  
  1469 000006E2 89D6                            MOV     SI,DX
  1470 000006E4 E8F3FD                          CALL    PUTSD           ; Display string DS[SI]
  1471                                  
  1472 000006E7 EB5C                            JMP     ISR21_RET       ; return to caller
  1473                                  
  1474                                  ;----------------------------------------------------------------------
  1475                                  ; Interrupt 21h
  1476                                  ; Service   25   Set Interrupt Vector
  1477                                  ; Input     AL   Interrupt Number, DS:DX -> new interrupt handler
  1478                                  ; Output
  1479                                  ; Changed   AX
  1480                                  ;----------------------------------------------------------------------
  1481                                  ISR21_25:
  1482 000006E9 80FC25                          CMP     AH,25h
  1483 000006EC 7517                            JNE     ISR21_0B
  1484                                  
  1485 000006EE FA                              CLI                     ; Disable Interrupts
  1486 000006EF 30E4                            XOR     AH,AH
  1487 000006F1 89C6                            MOV     SI,AX
  1488 000006F3 D1EE                            SHR     SI,1
  1489 000006F5 D1EE                            SHR     SI,1            ; Int number * 4
  1490                                  
  1491 000006F7 31C0                            XOR     AX,AX
  1492 000006F9 8EC0                            MOV     ES,AX           ; Int table segment=0000
  1493                                  
  1494 000006FB 268914                          MOV     [ES:SI],DX      ; Set
  1495 000006FE 46                              INC     SI
  1496 000006FF 46                              INC     SI              ; SI POINT TO INT CS
  1497 00000700 268C1C                          MOV     [ES:SI],DS      ; Set segment
  1498                                  
  1499                                  
  1500 00000703 EB40                            JMP     ISR21_RET       ; return to caller
  1501                                  
  1502                                  ;----------------------------------------------------------------------
  1503                                  ; Interrupt 21h
  1504                                  ; Service   48   Allocate memory
  1505                                  ; Input
  1506                                  ; Output
  1507                                  ; Changed   AX
  1508                                  ;----------------------------------------------------------------------
  1509                                  ;ISR21_48:CMP       AH,48h
  1510                                  ;        JNE    ISR21_4C
  1511                                  ;        JMP    ISR21_RET                       ; return to caller
  1512                                  
  1513                                  
  1514                                  ;----------------------------------------------------------------------
  1515                                  ; Interrupt 21h
  1516                                  ; Service   0Bh  Check for character waiting (kbhit)
  1517                                  ; Input
  1518                                  ; Output    AL   kbhit status !=0 if key pressed
  1519                                  ; Changed   AL
  1520                                  ;----------------------------------------------------------------------
  1521                                  ISR21_0B:
  1522 00000705 80FC0B                          CMP     AH,0Bh
  1523 00000708 750A                            JNE     ISR21_2C
  1524                                  
  1525 0000070A 30E4                            XOR     AH,AH
  1526 0000070C BA85FA                          MOV     DX,uart_lsr     ; get UART RX status
  1527 0000070F EC                              IN      AL,DX
  1528 00000710 2420                            AND     AL,20h
  1529                                  
  1530 00000712 EB31                            JMP     ISR21_RET
  1531                                  
  1532                                  ;----------------------------------------------------------------------
  1533                                  ; Interrupt 21h
  1534                                  ; Service   2Ch  Get System Time
  1535                                  ;           CH = hour (BCD)
  1536                                  ;           CL = minutes (BCD)
  1537                                  ;           DH = seconds (BCD)
  1538                                  ;           DL = 0
  1539                                  ;----------------------------------------------------------------------
  1540                                  ISR21_2C:
  1541 00000714 80FC2C                          CMP     AH,02Ch
  1542 00000717 7502                            JNE     ISR21_30
  1543                                  
  1544                                  ;            MOV        AH,02h
  1545                                  ;            INT        1Ah
  1546                                  ;            XOR        DL,DL                       ; Ignore 1/100 seconds value
  1547 00000719 EB2A                            JMP     ISR21_RET
  1548                                  
  1549                                  ;----------------------------------------------------------------------
  1550                                  ; Interrupt 21h
  1551                                  ; Service   30h  Get DOS version, return 2
  1552                                  ;----------------------------------------------------------------------
  1553                                  ISR21_30:
  1554 0000071B 80FC30                          CMP     AH,030h
  1555 0000071E 7504                            JNE     ISR21_4C
  1556                                  
  1557 00000720 B002                            MOV     AL,02           ; DOS=2.0
  1558                                  
  1559 00000722 EB21                            JMP     ISR21_RET
  1560                                  
  1561                                  ;----------------------------------------------------------------------
  1562                                  ; Interrupt 21h
  1563                                  ; Service   4Ch  exit to bootloader
  1564                                  ;----------------------------------------------------------------------
  1565                                  ISR21_4C:
  1566 00000724 80FC4C                          CMP     AH,04CH
  1567 00000727 7514                            JNE     ISR21_x
  1568 00000729 88C3                            MOV     BL,AL           ; Save exit code
  1569                                  
  1570 0000072B 8CC8                            MOV     AX,CS
  1571 0000072D 8ED8                            MOV     DS,AX
  1572 0000072F BE[0D09]                        MOV     SI,  TERM_MESS
  1573 00000732 E88DFD                          CALL    PUTS
  1574 00000735 88D8                            MOV     AL,BL
  1575 00000737 E822FE                          CALL    PUTHEX2
  1576                                  
  1577 0000073A E9C3F8                          JMP     INITMON         ; Re-start MON88
  1578                                  
  1579                                  ;----------------------------------------------------------------------
  1580                                  ; Interrupt 21h
  1581                                  ; Service   xx   Unkown service, display message int and ah value, return to monitor
  1582                                  ;----------------------------------------------------------------------
  1583                                  ISR21_x:
  1584 0000073D B021                            MOV     AL,21h
  1585 0000073F E80700                          CALL    DISPSERI        ; Display Int and service number
  1586 00000742 E9BBF8                          JMP     INITMON         ; Jump back to monitor
  1587                                  
  1588                                  ISR21_RET:
  1589 00000745 5E                              POP     SI
  1590 00000746 07                              POP     ES
  1591 00000747 1F                              POP     DS
  1592 00000748 CF                              IRET
  1593                                  
  1594                                  ;----------------------------------------------------------------------
  1595                                  ; Unknown Service Handler
  1596                                  ; Display Message, interrupt and service number before jumping back to the monitor
  1597                                  ;----------------------------------------------------------------------
  1598                                  DISPSERI:
  1599 00000749 89C3                            MOV     BX,AX           ; Store int number (AL) and service (AH)
  1600 0000074B B80000                          MOV     ax, 0000h       ; Set DS
  1601 0000074E 8ED8                            MOV     DS,AX
  1602 00000750 BE[980C]                        MOV     SI,  UNKNOWNSER_MESS; Print Error: Unknown Service
  1603 00000753 E86CFD                          CALL    PUTS
  1604 00000756 88D8                            MOV     AL,BL
  1605 00000758 E801FE                          CALL    PUTHEX2         ; Print Interrupt Number
  1606 0000075B B02C                            MOV     AL,','
  1607 0000075D E83DFE                          CALL    TXCHAR
  1608 00000760 88F8                            MOV     AL,BH
  1609 00000762 E8F7FD                          CALL    PUTHEX2         ; Write Service number
  1610 00000765 C3                              RET
  1611                                  
  1612                                  ;----------------------------------------------------------------------
  1613                                  ; Spurious Interrupt Handler
  1614                                  ;----------------------------------------------------------------------
  1615                                  INTX:
  1616 00000766 1E                              PUSH    DS
  1617 00000767 56                              PUSH    SI
  1618 00000768 50                              PUSH    AX
  1619                                  
  1620 00000769 BE[770C]                        MOV     SI,  UNKNOWN_MESS; Print Error: Unknown Service
  1621 0000076C E853FD                          CALL    PUTS
  1622                                  
  1623 0000076F 58                              POP     AX
  1624 00000770 5E                              POP     SI
  1625 00000771 1F                              POP     DS
  1626 00000772 CF                              IRET
  1627                                  
  1628                                  
  1629                                  ;----------------------------------------------------------------------
  1630                                  ; Text Strings
  1631                                  ;----------------------------------------------------------------------
  1632                                  WELCOME_MESS:
  1633 00000773 0D0A0A4D4F4E383820-             DB      CR,LF,LF,"MON88 8088/8086 Monitor ver 0.1"
  1633 0000077C 383038382F38303836-
  1633 00000785 204D6F6E69746F7220-
  1633 0000078E 76657220302E31     
  1634 00000795 0D0A436F7079726967-             DB      CR,LF,"Copyright WWW.HT-LAB.COM 2005",
  1634 0000079E 6874205757572E4854-
  1634 000007A7 2D4C41422E434F4D20-
  1634 000007B0 32303035           
  1635 000007B4 0D0A4D6F6469666965-             DB      CR,LF,"Modified for Duodyne 80c188",
  1635 000007BD 6420666F722044756F-
  1635 000007C6 64796E652038306331-
  1635 000007CF 3838               
  1636 000007D1 0D0A416C6C20726967-             DB      CR,LF,"All rights reserved.",CR,LF,0
  1636 000007DA 687473207265736572-
  1636 000007E3 7665642E0D0A00     
  1637                                  PROMPT_MESS:
  1638 000007EA 0D0A436D643E00                  DB      CR,LF,"Cmd>",0
  1639                                  ERRCMD_MESS:
  1640 000007F1 203C2D20556E6B6E6F-             DB      " <- Unknown Command, type H to Display Help",0
  1640 000007FA 776E20436F6D6D616E-
  1640 00000803 642C20747970652048-
  1640 0000080C 20746F20446973706C-
  1640 00000815 61792048656C7000   
  1641                                  ERRREG_MESS:
  1642 0000081D 203C2D20556E6B6E6F-             DB      " <- Unknown Register, valid names: AX,BX,CX,DX,SP,BP,SI,DI,DS,ES,SS,CS,IP,FL",0
  1642 00000826 776E20526567697374-
  1642 0000082F 65722C2076616C6964-
  1642 00000838 206E616D65733A2041-
  1642 00000841 582C42582C43582C44-
  1642 0000084A 582C53502C42502C53-
  1642 00000853 492C44492C44532C45-
  1642 0000085C 532C53532C43532C49-
  1642 00000865 502C464C00         
  1643                                  
  1644                                  LOAD_MESS:
  1645 0000086A 0D0A53746172742075-             DB      CR,LF,"Start upload now, load is terminated by :00000001FF",CR,LF,0
  1645 00000873 706C6F6164206E6F77-
  1645 0000087C 2C206C6F6164206973-
  1645 00000885 207465726D696E6174-
  1645 0000088E 6564206279203A3030-
  1645 00000897 30303030303146460D-
  1645 000008A0 0A00               
  1646                                  LD_CHKS_MESS:
  1647 000008A2 0D0A4572726F723A20-             DB      CR,LF,"Error: CheckSum failure",CR,LF,0
  1647 000008AB 436865636B53756D20-
  1647 000008B4 6661696C7572650D0A-
  1647 000008BD 00                 
  1648                                  LD_REC_MESS:
  1649 000008BE 0D0A4572726F723A20-             DB      CR,LF,"Error: Unknown Record Type",CR,LF,0
  1649 000008C7 556E6B6E6F776E2052-
  1649 000008D0 65636F726420547970-
  1649 000008D9 650D0A00           
  1650                                  LD_HEX_MESS:
  1651 000008DD 0D0A4572726F723A20-             DB      CR,LF,"Error: Non Hex value received",CR,LF,0
  1651 000008E6 4E6F6E204865782076-
  1651 000008EF 616C75652072656365-
  1651 000008F8 697665640D0A00     
  1652                                  LD_OK_MESS:
  1653 000008FF 0D0A4C6F616420646F-             DB      CR,LF,"Load done",CR,LF,0
  1653 00000908 6E650D0A00         
  1654                                  TERM_MESS:
  1655 0000090D 0D0A50726F6772616D-             DB      CR,LF,"Program Terminated with exit code ",0
  1655 00000916 205465726D696E6174-
  1655 0000091F 656420776974682065-
  1655 00000928 78697420636F646520-
  1655 00000931 00                 
  1656                                  
  1657                                  ; Mess+18=? character, change by bp number
  1658                                  BREAKP_MESS:
  1659 00000932 0D0A2A2A2A2A204252-             DB      CR,LF,"**** BREAKPOINT ? ****",CR,LF,0
  1659 0000093B 45414B504F494E5420-
  1659 00000944 3F202A2A2A2A0D0A00 
  1660                                  
  1661                                  FLAG_MESS:
  1662 0000094D 2020204F4449542D53-             DB      "   ODIT-SZAPC=",0
  1662 00000956 5A4150433D00       
  1663                                  FLAG_VALID:
  1664 0000095C 585858582E2E2E2E2E-             DB      "XXXX......X.X.X.",0; X=Don't display flag bit, .=Display
  1664 00000965 2E582E582E582E00   
  1665                                  
  1666                                  HELP_MESS:
  1667 0000096D 0D0A436F6D6D616E64-             DB      CR,LF,"Commands"
  1667 00000976 73                 
  1668 00000977 0D0A44207B66726F6D-             DB      CR,LF,"D {from} {to}         : Dump Memory, example D 0000 0100"
  1668 00000980 7D207B746F7D202020-
  1668 00000989 2020202020203A2044-
  1668 00000992 756D70204D656D6F72-
  1668 0000099B 792C206578616D706C-
  1668 000009A4 652044203030303020-
  1668 000009AD 30313030           
  1669 000009B1 0D0A46207B66726F6D-             DB      CR,LF,"F {from} {to} {Byte}  : Fill Memory, example FM 0200 020F 5A"
  1669 000009BA 7D207B746F7D207B42-
  1669 000009C3 7974657D20203A2046-
  1669 000009CC 696C6C204D656D6F72-
  1669 000009D5 792C206578616D706C-
  1669 000009DE 6520464D2030323030-
  1669 000009E7 2030323046203541   
  1670 000009EF 0D0A52202020202020-             DB      CR,LF,"R                     : Display Registers"
  1670 000009F8 202020202020202020-
  1670 00000A01 2020202020203A2044-
  1670 00000A0A 6973706C6179205265-
  1670 00000A13 67697374657273     
  1671 00000A1A 0D0A43207B7265677D-             DB      CR,LF,"C {reg}               : Change Registers, example CR SP=1234"
  1671 00000A23 202020202020202020-
  1671 00000A2C 2020202020203A2043-
  1671 00000A35 68616E676520526567-
  1671 00000A3E 6973746572732C2065-
  1671 00000A47 78616D706C65204352-
  1671 00000A50 2053503D31323334   
  1672 00000A58 0D0A4C202020202020-             DB      CR,LF,"L                     : Load Intel hexfile"
  1672 00000A61 202020202020202020-
  1672 00000A6A 2020202020203A204C-
  1672 00000A73 6F616420496E74656C-
  1672 00000A7C 2068657866696C65   
  1673 00000A84 0D0A4720207B416464-             DB      CR,LF,"G  {Address}          : Execute, example G 0100"
  1673 00000A8D 726573737D20202020-
  1673 00000A96 2020202020203A2045-
  1673 00000A9F 7865637574652C2065-
  1673 00000AA8 78616D706C65204720-
  1673 00000AB1 30313030           
  1674 00000AB5 0D0A42207B576F7264-             DB      CR,LF,"B {Word}              : Change Base Segment Address, example BS 0340"
  1674 00000ABE 7D2020202020202020-
  1674 00000AC7 2020202020203A2043-
  1674 00000AD0 68616E676520426173-
  1674 00000AD9 65205365676D656E74-
  1674 00000AE2 20416464726573732C-
  1674 00000AEB 206578616D706C6520-
  1674 00000AF4 42532030333430     
  1675 00000AFB 0D0A5742207B416464-             DB      CR,LF,"WB {Address} {Byte}   : Write Byte to address, example WB 1234 5A"
  1675 00000B04 726573737D207B4279-
  1675 00000B0D 74657D2020203A2057-
  1675 00000B16 726974652042797465-
  1675 00000B1F 20746F206164647265-
  1675 00000B28 73732C206578616D70-
  1675 00000B31 6C6520574220313233-
  1675 00000B3A 34203541           
  1676 00000B3E 0D0A5757207B416464-             DB      CR,LF,"WW {Address} {Word}   : Write Word to address"
  1676 00000B47 726573737D207B576F-
  1676 00000B50 72647D2020203A2057-
  1676 00000B59 7269746520576F7264-
  1676 00000B62 20746F206164647265-
  1676 00000B6B 7373               
  1677 00000B6D 0D0A4942207B506F72-             DB      CR,LF,"IB {Port}             : Read Byte from Input port, example IB 03F8"
  1677 00000B76 747D20202020202020-
  1677 00000B7F 2020202020203A2052-
  1677 00000B88 656164204279746520-
  1677 00000B91 66726F6D20496E7075-
  1677 00000B9A 7420706F72742C2065-
  1677 00000BA3 78616D706C65204942-
  1677 00000BAC 2030334638         
  1678 00000BB1 0D0A4957207B506F72-             DB      CR,LF,"IW {Port}             : Read Word from Input port"
  1678 00000BBA 747D20202020202020-
  1678 00000BC3 2020202020203A2052-
  1678 00000BCC 65616420576F726420-
  1678 00000BD5 66726F6D20496E7075-
  1678 00000BDE 7420706F7274       
  1679 00000BE4 0D0A4F42207B506F72-             DB      CR,LF,"OB {Port} {Byte}      : Write Byte to Output port, example OB 03F8 3A"
  1679 00000BED 747D207B427974657D-
  1679 00000BF6 2020202020203A2057-
  1679 00000BFF 726974652042797465-
  1679 00000C08 20746F204F75747075-
  1679 00000C11 7420706F72742C2065-
  1679 00000C1A 78616D706C65204F42-
  1679 00000C23 2030334638203341   
  1680 00000C2B 0D0A4F57207B506F72-             DB      CR,LF,"OW {Port} {Word}      : Write Word to Output port, example OB 03F8 3A5A"
  1680 00000C34 747D207B576F72647D-
  1680 00000C3D 2020202020203A2057-
  1680 00000C46 7269746520576F7264-
  1680 00000C4F 20746F204F75747075-
  1680 00000C58 7420706F72742C2065-
  1680 00000C61 78616D706C65204F42-
  1680 00000C6A 203033463820334135-
  1680 00000C73 41                 
  1681 00000C74 0D0A00                          DB      CR,LF,0
  1682                                  
  1683                                  
  1684                                  UNKNOWN_MESS:
  1685 00000C77 0D0A2A2A2A20455252-             DB      CR,LF,"*** ERROR: Spurious Interrupt ",0
  1685 00000C80 4F523A205370757269-
  1685 00000C89 6F757320496E746572-
  1685 00000C92 727570742000       
  1686                                  UNKNOWNSER_MESS:
  1687 00000C98 0D0A2A2A2A20455252-             DB      CR,LF,"*** ERROR: Unknown Service INT,AH=",0
  1687 00000CA1 4F523A20556E6B6E6F-
  1687 00000CAA 776E20536572766963-
  1687 00000CB3 6520494E542C41483D-
  1687 00000CBC 00                 
  1688                                  
  1689                                          %INCLUDE "startup.asm"
  1690                              <1> ; ROM startup code Duodyne 80C188
  1691                              <1> ; This is based on the STARTUP.ASM for the N8VEM SBC-188, which is under GPL 3.
  1692                              <1>         [LIST   -]
  1695                              <1> 
  1696                              <1>         SECTION startup start=1FF00h vstart=0FFF00h
  1697                              <1> 
  1698                              <1> begin:
  1699 00000000 FA                  <1>         CLI
  1700 00000001 FC                  <1>         CLD
  1701 00000002 B6FF                <1>         MOV     dh, ip_base >> 8
  1702 00000004 BE[6C00]            <1>         MOV     si, table       ; Point to the table
  1703 00000007 8CC8                <1>         MOV     ax, cs
  1704 00000009 8ED8                <1>         MOV     ds, ax
  1705 0000000B B90400              <1>         MOV     cx, tablecnt
  1706                              <1> 
  1707                              <1> .1:
  1708 0000000E AC                  <1>         LODSB                   ; Initialise registers from table
  1709 0000000F 88C2                <1>         MOV     dl, al
  1710 00000011 AD                  <1>         LODSW
  1711 00000012 EF                  <1>         OUT     dx, ax
  1712 00000013 E2F9                <1>         LOOP    .1
  1713                              <1> 
  1714 00000015 B80091              <1>         MOV     ax, 9100h       ; Stack at top of RAM
  1715 00000018 8ED0                <1>         MOV     ss, ax
  1716 0000001A BC0070              <1>         MOV     sp, 7000h
  1717 0000001D B80091              <1>         MOV     ax, 9100h       ; Set DS
  1718 00000020 8ED8                <1>         MOV     ds, ax
  1719 00000022 B800F0              <1>         MOV     ax, 0F000h      ; Set CS=ES
  1720 00000025 8EC0                <1>         MOV     es, ax
  1721                              <1> 
  1722                              <1> ; setup UART
  1723 00000027 B080                <1>         MOV     al,80h
  1724 00000029 BA83FA              <1>         MOV     dx,uart_lcr
  1725 0000002C EE                  <1>         OUT     dx,al
  1726 0000002D B00C                <1>         MOV     al,12
  1727 0000002F BA80FA              <1>         MOV     dx,uart_thr
  1728 00000032 EE                  <1>         OUT     dx,al
  1729 00000033 B000                <1>         MOV     al,00
  1730 00000035 BA81FA              <1>         MOV     dx,uart_ier
  1731 00000038 EE                  <1>         OUT     dx,al
  1732 00000039 B003                <1>         MOV     al,03
  1733 0000003B BA83FA              <1>         MOV     dx,uart_lcr
  1734 0000003E EE                  <1>         OUT     dx,al
  1735 0000003F BA84FA              <1>         MOV     dx,uart_mcr
  1736 00000042 EE                  <1>         OUT     dx,al
  1737                              <1> 
  1738 00000043 B001                <1>         MOV     al,01h          ; light first LED on RAM Card
  1739 00000045 BA94F8              <1>         MOV     dx,RAMROM_card_1
  1740 00000048 EE                  <1>         OUT     dx,al
  1741                              <1> 
  1742 00000049 B000                <1>         MOV     al,00h          ; Put LED Pattern on Front Panel
  1743 0000004B BA30FA              <1>         MOV     dx,front_panel_LEDs
  1744 0000004E EE                  <1>         OUT     dx,al
  1745                              <1> 
  1746 0000004F B000                <1>         MOV     al,00h          ; Turn on First LED on CPU Card
  1747 00000051 BA38FA              <1>         MOV     dx,local_ls259_LED1
  1748 00000054 EE                  <1>         OUT     dx,al
  1749 00000055 B001                <1>         MOV     al,01h          ; Turn off Second LED on CPU Card
  1750 00000057 BA39FA              <1>         MOV     dx,local_ls259_LED2
  1751 0000005A EE                  <1>         OUT     dx,al
  1752 0000005B B000                <1>         MOV     al,00h          ; Turn on Third LED on CPU Card
  1753 0000005D BA3AFA              <1>         MOV     dx,local_ls259_LED3
  1754 00000060 EE                  <1>         OUT     dx,al
  1755 00000061 B001                <1>         MOV     al,01h          ; Turn off Fourth LED on CPU Card
  1756 00000063 BA3BFA              <1>         MOV     dx,local_ls259_LED4
  1757 00000066 EE                  <1>         OUT     dx,al
  1758                              <1> 
  1759 00000067 EA[0000]00F0        <1>         JMP     0F000h:INITMON  ; Continue to body of ROM
  1760                              <1> 
  1761                              <1> table:
  1762                              <1>         DB_LO   ics_umcs        ; ROM
  1706 0000006C A0                  <2>  DB %1 & 0ffh
  1763 0000006D 3CE0                <1>         DW      0E03Ch          ; 128KB, no wait states, no external ready
  1764                              <1>         DB_LO   ics_mmcs        ; RAM
  1706 0000006F A6                  <2>  DB %1 & 0ffh
  1765 00000070 FC01                <1>         DW      01FCh           ; 00000h, no wait states, no external ready
  1766                              <1>         DB_LO   ics_mpcs        ; /MCSx size, /PCSx configuration
  1706 00000072 A8                  <2>  DB %1 & 0ffh
  1767 00000073 BCC0                <1>         DW      0C0BCh          ; 512KB, 7 /PCSx, I/O space, no wait states, no external ready
  1768                              <1>         DB_LO   ics_pacs        ; External peripherals
  1706 00000075 A4                  <2>  DB %1 & 0ffh
  1769 00000076 BC0F                <1>         DW      0FBCh           ; F800h, no wait states, no external ready (0FBCh=0 WS)
  1770                              <1> tablecnt        EQU ($-table)/3
  1771                              <1> 
  1772 00000078 FF<rep 78h>         <1>         SETLOC  0F0h            ; Reset entry is FFFF:0000h
  1773 000000F0 EA[0000]00F0        <1>         JMP     0F000h:begin    ; Jump to the startup code above
  1774 000000F5 30392F32392F323400  <1>         DB      "09/29/24", 00h ; BIOS date (mm/dd/yy)
  1775 000000FE FBFF                <1>         DB      0FBh, 0FFh      ; Model identifier (FBh is a 1986 XT)
