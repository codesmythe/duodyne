                      (        mon09.asm):00001         ;*
                      (        mon09.asm):00002         ;* MON09: A software debug monitor for the 6809
                      (        mon09.asm):00003         ;*
                      (        mon09.asm):00004         ;* The monitor is currently setup to run on a system which has 8K of ROM
                      (        mon09.asm):00005         ;* (for MON09) at the top of the memory may ($E000-$FFFF), and RAM
                      (        mon09.asm):00006         ;* from $0000-$BFFF. The 256 byte block from $DF00-$DFFF is used for I/O devices
                      (        mon09.asm):00007         ;* etc. MON09 uses 256 bytes of memory at the very top of available RAM,
                      (        mon09.asm):00008         ;* and the user stack pointer is initialized to point to the beginning of
                      (        mon09.asm):00009         ;* this area, allowing the user stack to grow downward into free user RAM.
                      (        mon09.asm):00010         ;*
                      (        mon09.asm):00011         ;* ?COPY.TXT 1985-2007 Dave Dunfield
                      (        mon09.asm):00012         ;* **See COPY.TXT**.
                      (        mon09.asm):00013         ;*
                      (        mon09.asm):00014         ;*
                      (        mon09.asm):00015         ;*   Modified for the Duodyne 6809 CPU board by D. Werner 1/15/2024
                      (        mon09.asm):00016         ;*   Single 16c550 UART supported at 9600,n,8,1
                      (        mon09.asm):00017         ;*
                      (        mon09.asm):00018         ;*   Commands not applicable to Duodyne have been removed to conserve
                      (        mon09.asm):00019         ;*   ROM space
                      (        mon09.asm):00020         
                      (        mon09.asm):00021         
                      (        mon09.asm):00022         ;* HARDWARE INFORMATION
     E000             (        mon09.asm):00023         ROM             EQU $E000                         ; MON09 code goes here
     BF00             (        mon09.asm):00024         RAM             EQU $BF00                         ; MON09 data goes here
     BFF0             (        mon09.asm):00025         STACK           EQU RAM+$F0                       ; MON09 Stack (Top of RAM)
                      (        mon09.asm):00026         ;*
                      (        mon09.asm):00027         ; UART 16C550 SERIAL
     DF58             (        mon09.asm):00028         MONUART0        EQU $DF58                         ; DATA IN/OUT
     DF59             (        mon09.asm):00029         MONUART1        EQU $DF59                         ; CHECK RX
     DF5A             (        mon09.asm):00030         MONUART2        EQU $DF5A                         ; INTERRUPTS
     DF5B             (        mon09.asm):00031         MONUART3        EQU $DF5B                         ; LINE CONTROL
     DF5C             (        mon09.asm):00032         MONUART4        EQU $DF5C                         ; MODEM CONTROL
     DF5D             (        mon09.asm):00033         MONUART5        EQU $DF5D                         ; LINE STATUS
     DF5E             (        mon09.asm):00034         MONUART6        EQU $DF5E                         ; MODEM STATUS
     DF5F             (        mon09.asm):00035         MONUART7        EQU $DF5F                         ; SCRATCH REG.
                      (        mon09.asm):00036         ;*
     DF50             (        mon09.asm):00037         BANK00          EQU $DF50
     DF51             (        mon09.asm):00038         BANK40          EQU $DF51
     DF52             (        mon09.asm):00039         BANK80          EQU $DF52
     DF53             (        mon09.asm):00040         BANKC0          EQU $DF53
                      (        mon09.asm):00041         ;*
                      (        mon09.asm):00042         ;*
                      (        mon09.asm):00043                 ORG     RAM                               ;Internal MON09 variables
                      (        mon09.asm):00044         ;*
                      (        mon09.asm):00045         ;* MON09 INTERNAL MEMORY
                      (        mon09.asm):00046         ;*
BF00                  (        mon09.asm):00047         SWIADR:
BF00                  (        mon09.asm):00048                 RMB     2                                 ;SWI VECTOR ADDRESS
BF02                  (        mon09.asm):00049         SWI2ADR:
BF02                  (        mon09.asm):00050                 RMB     2                                 ;SWI2 VECTOR ADDRESS
BF04                  (        mon09.asm):00051         SWI3ADR:
BF04                  (        mon09.asm):00052                 RMB     2                                 ;SWI3 VECTOR ADDRESS
BF06                  (        mon09.asm):00053         IRQADR:
BF06                  (        mon09.asm):00054                 RMB     2                                 ;IRQ VECTOR ADDRESS
BF08                  (        mon09.asm):00055         FIRQADR:
BF08                  (        mon09.asm):00056                 RMB     2                                 ;FIRQ VECTOR ADDRESS
BF0A                  (        mon09.asm):00057         SAVCC:
BF0A                  (        mon09.asm):00058                 RMB     1                                 ;SAVED CONDITION CODE REGISTER
BF0B                  (        mon09.asm):00059         SAVA:
BF0B                  (        mon09.asm):00060                 RMB     1                                 ;SAVED 6809 A REGISTER
BF0C                  (        mon09.asm):00061         SAVB:
BF0C                  (        mon09.asm):00062                 RMB     1                                 ;SAVED 6809 B REGISTER
BF0D                  (        mon09.asm):00063         SAVDP:
BF0D                  (        mon09.asm):00064                 RMB     1                                 ;SAVED DIRECT PAGE REGISTER
BF0E                  (        mon09.asm):00065         SAVX:
BF0E                  (        mon09.asm):00066                 RMB     2                                 ;SAVED X REGISTER
BF10                  (        mon09.asm):00067         SAVY:
BF10                  (        mon09.asm):00068                 RMB     2                                 ;SAVED Y REGISTER
BF12                  (        mon09.asm):00069         SAVU:
BF12                  (        mon09.asm):00070                 RMB     2                                 ;SAVED U REGISTER
BF14                  (        mon09.asm):00071         SAVPC:
BF14                  (        mon09.asm):00072                 RMB     2                                 ;SAVED PROGRAM COUNTER
BF16                  (        mon09.asm):00073         SAVS:
BF16                  (        mon09.asm):00074                 RMB     2                                 ;SAVED S REGISTER
BF18                  (        mon09.asm):00075         TEMP:
BF18                  (        mon09.asm):00076                 RMB     2                                 ;TEMPORARY STORAGE
BF1A                  (        mon09.asm):00077         STPFLG:
BF1A                  (        mon09.asm):00078                 RMB     1                                 ;REGISTER DISPLAY WHILE STEPPING FLAG
BF1B                  (        mon09.asm):00079         PTRSAV:
BF1B                  (        mon09.asm):00080                 RMB     2                                 ;SINGLE STEP AND DISASSEMBLER CODE POINTER
BF1D                  (        mon09.asm):00081         INSTYP:
BF1D                  (        mon09.asm):00082                 RMB     1                                 ;DISASSEMBLED INSTRUCTION TYPE
BF1E                  (        mon09.asm):00083         POSBYT:
BF1E                  (        mon09.asm):00084                 RMB     1                                 ;POSTBYTE STORAGE AREA
BF1F                  (        mon09.asm):00085         BRKTAB:
BF1F                  (        mon09.asm):00086                 RMB     24                                ;BREAKPOINT TABLE
BF37                  (        mon09.asm):00087         DSPBUF:
BF37                  (        mon09.asm):00088                 RMB     50                                ;DISASSEMBLER DISPLAY BUFFER
BF69                  (        mon09.asm):00089         INSRAM:
BF69                  (        mon09.asm):00090                 RMB     7                                 ;INSTRUCTION EXECUTION ADDRESS
                      (        mon09.asm):00091         ;*
                      (        mon09.asm):00092                 ORG     ROM                               ;MONITOR CODE
                      (        mon09.asm):00093         ;*
                      (        mon09.asm):00094         ;* INITIALIZATIONS.
                      (        mon09.asm):00095         ;*
E000                  (        mon09.asm):00096         RESET:
E000 10CEBFF0         (        mon09.asm):00097                 LDS     #STACK                            ;SET UP STACK
                      (        mon09.asm):00098         
                      (        mon09.asm):00099         ;* Setup Memory Banks (RAM 0000-C000, ROM C000-FFFF)
E004 8680             (        mon09.asm):00100                 LDA     #$80
E006 B7DF50           (        mon09.asm):00101                 STA     BANK00
E009 8681             (        mon09.asm):00102                 LDA     #$81
E00B B7DF51           (        mon09.asm):00103                 STA     BANK40
E00E 8682             (        mon09.asm):00104                 LDA     #$82
E010 B7DF52           (        mon09.asm):00105                 STA     BANK80
E013 8603             (        mon09.asm):00106                 LDA     #$03
E015 B7DF53           (        mon09.asm):00107                 STA     BANKC0
                      (        mon09.asm):00108         
E018 860B             (        mon09.asm):00109                 LDA     #$0B
E01A B7DF5C           (        mon09.asm):00110                 STA     MONUART4                          ; Int disabled, banks enabled
                      (        mon09.asm):00111         
                      (        mon09.asm):00112         
E01D 8EBF00           (        mon09.asm):00113                 LDX     #SWIADR                           ;POINT TO START
E020                  (        mon09.asm):00114         CLRRAM:
                      (        mon09.asm):00115         ;        CLR     ,X+                               ;CLEAR IT
                      (        mon09.asm):00116         ;        CMPX    #INSRAM                           ;AT BUFFER?
                      (        mon09.asm):00117         ;        BLO     CLRRAM                            ;KEEP GOING
                      (        mon09.asm):00118         
E020 1715F9           (        mon09.asm):00119                 LBSR    INIT                              ;INITIALIZE UART
E023 CCBF00           (        mon09.asm):00120                 LDD     #RAM                              ;DEFAULT STACK AT TOP OF RAM
E026 FDBF16           (        mon09.asm):00121                 STD     SAVS                              ;SAVE IT
E029 86D0             (        mon09.asm):00122                 LDA     #$D0                              ;SET CC
E02B B7BF0A           (        mon09.asm):00123                 STA     SAVCC                             ;SAVE IT
E02E                  (        mon09.asm):00124         MONITOR:
E02E 1707A5           (        mon09.asm):00125                 LBSR    WRMSG                             ;OUTPUT MESSAGE
E031 0A0D0A0A         (        mon09.asm):00126                 FCB     $0A,$0D,$0A,$0A
E035 20205F5F5F5F2020 (        mon09.asm):00127                 FCC     '  ____                  _                  '
     2020202020202020
     2020202020202020
     5F20202020202020
     2020202020202020
     202020
E060 0A0D             (        mon09.asm):00128                 FCB     $0A,$0D
E062 207C20205F205C20 (        mon09.asm):00129                 FCC     ' |  _ \ _   _  ___   __| |_   _ _ __   ___ '
     5F2020205F20205F
     5F5F2020205F5F7C
     207C5F2020205F20
     5F205F5F2020205F
     5F5F20
E08D 0A0D             (        mon09.asm):00130                 FCB     $0A,$0D
E08F 207C207C207C207C (        mon09.asm):00131                 FCC     ' | | | | | | |/ _ \ / _` | | | | '
     207C207C207C2F20
     5F205C202F205F60
     207C207C207C207C
     20
E0B0 27               (        mon09.asm):00132                 FCB     $27
E0B1 5F205C202F205F20 (        mon09.asm):00133                 FCC     '_ \ / _ \ '
     5C20
E0BB 0A0D             (        mon09.asm):00134                 FCB     $0A,$0D
E0BD 207C207C5F7C207C (        mon09.asm):00135                 FCC     ' | |_| | |_| | (_) | (_| | |_| | | | |  __/'
     207C5F7C207C2028
     5F29207C20285F7C
     207C207C5F7C207C
     207C207C207C2020
     5F5F2F
E0E8 0A0D             (        mon09.asm):00136                 FCB     $0A,$0D
E0EA 207C5F5F5F5F2F20 (        mon09.asm):00137                 FCC     ' |____/ \__,_|\___/ \__,_|\__, |_| |_|\___|'
     5C5F5F2C5F7C5C5F
     5F5F2F205C5F5F2C
     5F7C5C5F5F2C207C
     5F7C207C5F7C5C5F
     5F5F7C
E115 0A0D             (        mon09.asm):00138                 FCB     $0A,$0D
E117 2020202020202020 (        mon09.asm):00139                 FCC     '                          |___/            '
     2020202020202020
     2020202020202020
     20207C5F5F5F2F20
     2020202020202020
     202020
E142 0A0D             (        mon09.asm):00140                 FCB     $0A,$0D
E144 4D4F4E3039205665 (        mon09.asm):00141                 FCC     'MON09 Version 3.3a   1985-2007 Dave Dunfield'
     7273696F6E20332E
     3361202020313938
     352D323030372044
     6176652044756E66
     69656C64
E170 0A0D             (        mon09.asm):00142                 FCB     $0A,$0D
E172 2A2A205072657373 (        mon09.asm):00143                 FCC     '** Press ? for a list of commands **'
     203F20666F722061
     206C697374206F66
     20636F6D6D616E64
     73202A2A
E196 0AFF             (        mon09.asm):00144                 FCB     $0A,$FF
E198                  (        mon09.asm):00145         MAIN
E198 10CEBFF0         (        mon09.asm):00146                 LDS     #STACK                            ;FIX STACK IN CASE ERROR
E19C 170637           (        mon09.asm):00147                 LBSR    WRMSG                             ;OUTPUT MESSAGE
E19F 2A2000           (        mon09.asm):00148                 FCN     '* '
E1A2 170648           (        mon09.asm):00149                 LBSR    GETECH                            ;GET CHARACTER
E1A5 5F               (        mon09.asm):00150                 CLRB                                      ;INDICATE NO SECOND CHAR
                      (        mon09.asm):00151         ;* LOOK FOR COMMAND IN TABLE
E1A6                  (        mon09.asm):00152         LOOKC
E1A6 8EE1DE           (        mon09.asm):00153                 LDX     #CMDTAB                           ;POINT TO COMMAND TABLE
E1A9 7FBF18           (        mon09.asm):00154                 CLR     TEMP                              ;INDICATE NO PARTIAL MATCH
E1AC                  (        mon09.asm):00155         LOOK1
E1AC 10A381           (        mon09.asm):00156                 CMPD    ,X++                              ;DOES IT MATCH
E1AF 271E             (        mon09.asm):00157                 BEQ     LOOK3                             ;YES IT DOES
E1B1 A11E             (        mon09.asm):00158                 CMPA    -2,X                              ;DOES FIRST CHAR MATCH?
E1B3 2603             (        mon09.asm):00159                 BNE     LOOK2                             ;NO, DON'T RECORD
E1B5 7ABF18           (        mon09.asm):00160                 DEC     TEMP                              ;SET FLAG
E1B8                  (        mon09.asm):00161         LOOK2
E1B8 3002             (        mon09.asm):00162                 LEAX    2,X                               ;ADVANCE TO NEXT
E1BA 6D84             (        mon09.asm):00163                 TST     ,X                                ;HAVE WE HIT THE END
E1BC 26EE             (        mon09.asm):00164                 BNE     LOOK1                             ;NO, KEEP LOOKING
E1BE 5D               (        mon09.asm):00165                 TSTB                                      ;ALREADY HAVE TWO CHARS?
E1BF 2615             (        mon09.asm):00166                 BNE     ERROR                             ;YES, ERROR
E1C1 F6BF18           (        mon09.asm):00167                 LDB     TEMP                              ;ANY PARTIAL MATCHES?
E1C4 2710             (        mon09.asm):00168                 BEQ     ERROR                             ;NO, ERROR
E1C6 1F89             (        mon09.asm):00169                 TFR     A,B                               ;SAVE CHAR IN 'A'
E1C8 170622           (        mon09.asm):00170                 LBSR    GETECH                            ;GET NEXT CHAR
E1CB 1E89             (        mon09.asm):00171                 EXG     A,B                               ; SWAP BACK
E1CD 20D7             (        mon09.asm):00172                 BRA     LOOKC                             ;AND CONTINUE
                      (        mon09.asm):00173         ;* COMMAND WAS FOUND, EXECUTE IT
E1CF                  (        mon09.asm):00174         LOOK3
E1CF 170629           (        mon09.asm):00175                 LBSR    SPACE                             ;OUTPUT SPACE
E1D2 AD94             (        mon09.asm):00176                 JSR     [,X]                              ;EXECUTE COMMAND
E1D4 20C2             (        mon09.asm):00177                 BRA     MAIN                              ;AND RETURN
                      (        mon09.asm):00178         ;* ERROR HAS OCCURED
E1D6                  (        mon09.asm):00179         ERROR
E1D6 1705FD           (        mon09.asm):00180                 LBSR    WRMSG                             ;OUTPUT MESSAGE
E1D9 203F             (        mon09.asm):00181                 FCC     ' ?'
E1DB FF               (        mon09.asm):00182                 FCB     $FF
E1DC 20BA             (        mon09.asm):00183                 BRA     MAIN                              ; TRY AGAIN
                      (        mon09.asm):00184         ;* COMMAND LOOKUP TABLE
E1DE                  (        mon09.asm):00185         CMDTAB
E1DE 444D             (        mon09.asm):00186                 FCB     'D','M'                           ; DISPLAY MEMORY
E1E0 E261             (        mon09.asm):00187                 FDB     MEMORY
E1E2 4449             (        mon09.asm):00188                 FCB     'D','I'                           ; DISASSEMBLE
E1E4 E305             (        mon09.asm):00189                 FDB     DISASM
E1E6 4452             (        mon09.asm):00190                 FCB     'D','R'                           ;DISPLAY REGISTERS
E1E8 E390             (        mon09.asm):00191                 FDB     DISREG
E1EA 4456             (        mon09.asm):00192                 FCB     'D','V'                           ;DISPLAY VECTORS
E1EC E327             (        mon09.asm):00193                 FDB     DISVEC
E1EE 4352             (        mon09.asm):00194                 FCB     'C','R'                           ;CHANGE REGISTER
E1F0 E40C             (        mon09.asm):00195                 FDB     CHGREG
E1F2 4356             (        mon09.asm):00196                 FCB     'C','V'                           ;CHANGE VECTORS
E1F4 E35E             (        mon09.asm):00197                 FDB     CHGVEC
E1F6 4500             (        mon09.asm):00198                 FCB     'E',0                             ;SUBSTITUTE MEMORY
E1F8 E2C2             (        mon09.asm):00199                 FDB     SUBMEM
E1FA 4C00             (        mon09.asm):00200                 FCB     'L',0                             ;DOWNLOAD
E1FC E62C             (        mon09.asm):00201                 FDB     LOAD
E1FE 4700             (        mon09.asm):00202                 FCB     'G',0                             ;GO
E200 E461             (        mon09.asm):00203                 FDB     GOEXEC
E202 464D             (        mon09.asm):00204                 FCB     'F','M'                           ;FILL MEMORY
E204 E22F             (        mon09.asm):00205                 FDB     FILMEM
E206 5252             (        mon09.asm):00206                 FCB     'R','R'                           ;REPEATING READ
E208 E4A0             (        mon09.asm):00207                 FDB     RDLOOP
E20A 5257             (        mon09.asm):00208                 FCB     'R','W'                           ;REPEATING WRITE
E20C E4B0             (        mon09.asm):00209                 FDB     WRLOOP
E20E 4D54             (        mon09.asm):00210                 FCB     'M','T'                           ;MEMORY TEST
E210 E4FA             (        mon09.asm):00211                 FDB     RAMTEST
E212 5700             (        mon09.asm):00212                 FCB     'W',0                             ;WRITE MEMORY
E214 E2B2             (        mon09.asm):00213                 FDB     WRIMEM
E216 4D4D             (        mon09.asm):00214                 FCB     'M','M'                           ;MOVE MEMORY
E218 E247             (        mon09.asm):00215                 FDB     MOVMEM
E21A 5852             (        mon09.asm):00216                 FCB     'X','R'                           ;REPEATING 16 BIT READ
E21C E4CF             (        mon09.asm):00217                 FDB     XRLOOP
E21E 5857             (        mon09.asm):00218                 FCB     'X','W'                           ;REPEATING 16 BIT WRITE
E220 E4DF             (        mon09.asm):00219                 FDB     XWLOOP
E222 2B00             (        mon09.asm):00220                 FCB     '+',0                             ;HEX ADDITION
E224 E5CB             (        mon09.asm):00221                 FDB     HEXADD
E226 2D00             (        mon09.asm):00222                 FCB     '-',0                             ;HEX SUBTRACTION
E228 E5DC             (        mon09.asm):00223                 FDB     HEXSUB
E22A 3F00             (        mon09.asm):00224                 FCB     '?',0                             ;HELP COMMAND
E22C E5FE             (        mon09.asm):00225                 FDB     HELP
E22E 00               (        mon09.asm):00226                 FCB     0                                 ;MARK END OF TABLE
                      (        mon09.asm):00227         ;*
                      (        mon09.asm):00228         ;* 'F' - FILL MEMORY
                      (        mon09.asm):00229         ;*
E22F                  (        mon09.asm):00230         FILMEM
E22F 1704EB           (        mon09.asm):00231                 LBSR    GETRNG                            ;GET ADDRESSES
E232 FDBF18           (        mon09.asm):00232                 STD     TEMP                              ;SAVE IT
E235 1705C3           (        mon09.asm):00233                 LBSR    SPACE                             ;SPACE OVER
E238 170546           (        mon09.asm):00234                 LBSR    GETBYT                            ;GET DATA BYTE
E23B 2699             (        mon09.asm):00235                 BNE     ERROR                             ;INVALID
E23D                  (        mon09.asm):00236         FILL1
E23D A780             (        mon09.asm):00237                 STA     ,X+                               ;WRITE IT
E23F BCBF18           (        mon09.asm):00238                 CMPX    TEMP                              ;ARE WE THERE
E242 23F9             (        mon09.asm):00239                 BLS     FILL1                             ;NO, KEEP GOING
E244 1605BA           (        mon09.asm):00240                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00241         ;*
                      (        mon09.asm):00242         ;* 'MM' - MOVE MEMORY
                      (        mon09.asm):00243         ;*
E247                  (        mon09.asm):00244         MOVMEM
E247 1704D3           (        mon09.asm):00245                 LBSR    GETRNG                            ;GET A RANGE
E24A FDBF18           (        mon09.asm):00246                 STD     TEMP                              ;SAVE LAST VALUE
E24D 1705AB           (        mon09.asm):00247                 LBSR    SPACE                             ;SEPERATOR
E250 1704E7           (        mon09.asm):00248                 LBSR    GETADR                            ;GET DEST ADDRESS
E253 1F02             (        mon09.asm):00249                 TFR     D,Y                               ;SET IT UP
E255                  (        mon09.asm):00250         MOVM1
E255 A680             (        mon09.asm):00251                 LDA     ,X+                               ;GET SOURCE BYTE
E257 A7A0             (        mon09.asm):00252                 STA     ,Y+                               ;SAVE IN DEST
E259 BCBF18           (        mon09.asm):00253                 CMPX    TEMP                              ;SAVE IT
E25C 23F7             (        mon09.asm):00254                 BLS     MOVM1                             ;KEEP MOVEING
E25E 1605A0           (        mon09.asm):00255                 LBRA    LFCR                              ;NEW LINE
                      (        mon09.asm):00256         ;*
                      (        mon09.asm):00257         ;* 'DM' - DISPLAY MEMORY
                      (        mon09.asm):00258         ;*
E261                  (        mon09.asm):00259         MEMORY
E261 1704B9           (        mon09.asm):00260                 LBSR    GETRNG                            ;GET ADDRESS
E264 FDBF18           (        mon09.asm):00261                 STD     TEMP                              ;SAVE
E267                  (        mon09.asm):00262         MEM1
E267 170597           (        mon09.asm):00263                 LBSR    LFCR                              ;NEW LINE
E26A 1705B2           (        mon09.asm):00264                 LBSR    CHKCHR                            ;CHECK FOR CHAR
E26D 1027FF27         (        mon09.asm):00265                 LBEQ    MAIN                              ;ESCAPE, QUIT
E271 1F10             (        mon09.asm):00266                 TFR     X,D                               ;GET ADDRESS
E273 3406             (        mon09.asm):00267                 PSHS    A,B                               ;SAVE FOR LATER
E275 170544           (        mon09.asm):00268                 LBSR    WRDOUT                            ;DISPLAY
E278 C610             (        mon09.asm):00269                 LDB     #16                               ;DISPLAY 16 TO A LINE
E27A                  (        mon09.asm):00270         MEM2
E27A 17057E           (        mon09.asm):00271                 LBSR    SPACE                             ;OUTPUT A SPACE
E27D C503             (        mon09.asm):00272                 BITB    #3                                ;ON A BOUNDARY?
E27F 2603             (        mon09.asm):00273                 BNE     MEM3                              ;NO, SPACE
E281 170577           (        mon09.asm):00274                 LBSR    SPACE                             ;EXTRA SPACE
E284                  (        mon09.asm):00275         MEM3
E284 A680             (        mon09.asm):00276                 LDA     ,X+                               ;GET BYTE
E286 170537           (        mon09.asm):00277                 LBSR    HEXOUT                            ;DISPLAY
E289 5A               (        mon09.asm):00278                 DECB                                      ;REDUCE COUNT
E28A 26EE             (        mon09.asm):00279                 BNE     MEM2                              ;CONTINUE
E28C C604             (        mon09.asm):00280                 LDB     #4                                ;FOUR SPACE
E28E                  (        mon09.asm):00281         MEM4
E28E 17056A           (        mon09.asm):00282                 LBSR    SPACE                             ;DISPLAY A SPACE
E291 5A               (        mon09.asm):00283                 DECB                                      ;REDUCE COUNT
E292 26FA             (        mon09.asm):00284                 BNE     MEM4                              ; CONTINUE
E294 3510             (        mon09.asm):00285                 PULS    X                                 ;RESTORE X
E296 C610             (        mon09.asm):00286                 LDB     #16                               ;COUNT OF 16
E298                  (        mon09.asm):00287         MEM5
E298 A680             (        mon09.asm):00288                 LDA     ,X+                               ;GET CHAR
E29A 8120             (        mon09.asm):00289                 CMPA    #' '                              ; <SPACE
E29C 2504             (        mon09.asm):00290                 BLO     MEM6                              ; CONVERT TO DOT
E29E 817F             (        mon09.asm):00291                 CMPA    #$7F                              ; PRINTABLE?
E2A0 2502             (        mon09.asm):00292                 BLO     MEM7                              ; OK TO DISPLAY
E2A2                  (        mon09.asm):00293         MEM6
E2A2 862E             (        mon09.asm):00294                 LDA     #'.'                              ;CHANGE TO DOT
E2A4                  (        mon09.asm):00295         MEM7
E2A4 170571           (        mon09.asm):00296                 LBSR    PUTCHR                            ;OUTPUT
E2A7 5A               (        mon09.asm):00297                 DECB                                      ;REDUCE COUNT
E2A8 26EE             (        mon09.asm):00298                 BNE     MEM5                              ; DISPLAY THEM ALL
E2AA BCBF18           (        mon09.asm):00299                 CMPX    TEMP                              ; PAST END?
E2AD 23B8             (        mon09.asm):00300                 BLS     MEM1                              ; NO, KEEP GOING
E2AF 16054F           (        mon09.asm):00301                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00302         ;*
                      (        mon09.asm):00303         ;* 'W' - WRITE TO MEMORY
                      (        mon09.asm):00304         ;*
E2B2                  (        mon09.asm):00305         WRIMEM
E2B2 170485           (        mon09.asm):00306                 LBSR    GETADR                            ;GET ADDRESS
E2B5 1F01             (        mon09.asm):00307                 TFR     D,X                               ;SET IT UP
E2B7 170541           (        mon09.asm):00308                 LBSR    SPACE                             ; STEP OVER
E2BA 1704C4           (        mon09.asm):00309                 LBSR    GETBYT                            ;GET BYTE
E2BD A784             (        mon09.asm):00310                 STA     ,X                                ;WRITE TO MEMORY
E2BF 16053F           (        mon09.asm):00311                 LBRA    LFCR                              ; NEW LINE
                      (        mon09.asm):00312         ;*
                      (        mon09.asm):00313         ;* 'E' - EDIT MEMORY
                      (        mon09.asm):00314         ;*
E2C2                  (        mon09.asm):00315         SUBMEM
E2C2 170475           (        mon09.asm):00316                 LBSR    GETADR                            ;GET ADDRESS
E2C5 1F01             (        mon09.asm):00317                 TFR     D,X                               ;COPY
E2C7                  (        mon09.asm):00318         SUBM1
E2C7 170537           (        mon09.asm):00319                 LBSR    LFCR                              ; NEW LINE
E2CA 1F10             (        mon09.asm):00320                 TFR     X,D                               ;GET ADDRESS
E2CC 1704ED           (        mon09.asm):00321                 LBSR    WRDOUT                            ; OUTPUT
E2CF C608             (        mon09.asm):00322                 LDB     #8                                ;NEW COUNT
E2D1                  (        mon09.asm):00323         SUBM2
E2D1 170527           (        mon09.asm):00324                 LBSR    SPACE                             ; SEPERATOR
E2D4 A684             (        mon09.asm):00325                 LDA     ,X                                ;GET BYTE
E2D6 1704E7           (        mon09.asm):00326                 LBSR    HEXOUT                            ; DISPLAY
E2D9 862D             (        mon09.asm):00327                 LDA     #'-'                              ; PROMPT
E2DB 17053A           (        mon09.asm):00328                 LBSR    PUTCHR                            ; OUTPUT
E2DE 1704A0           (        mon09.asm):00329                 LBSR    GETBYT                            ; GET A BYTE
E2E1 2609             (        mon09.asm):00330                 BNE     SUBM4                             ; INVALID
E2E3 A784             (        mon09.asm):00331                 STA     ,X                                ;RESAVE
E2E5                  (        mon09.asm):00332         SUBM3
E2E5 3001             (        mon09.asm):00333                 LEAX    1,X                               ;ADVANCE
E2E7 5A               (        mon09.asm):00334                 DECB                                      ;REDUCE COUNT
E2E8 26E7             (        mon09.asm):00335                 BNE     SUBM2                             ;MORE, CONTINUE
E2EA 20DB             (        mon09.asm):00336                 BRA     SUBM1                             ;NEW LINE
E2EC                  (        mon09.asm):00337         SUBM4
E2EC 810D             (        mon09.asm):00338                 CMPA    #$0D                              ;CR?
E2EE 1027050F         (        mon09.asm):00339                 LBEQ    LFCR                              ;IF SO, QUIT
E2F2 8120             (        mon09.asm):00340                 CMPA    #' '                              ;SPACE?
E2F4 2605             (        mon09.asm):00341                 BNE     SUBM5                             ;NO
E2F6 170502           (        mon09.asm):00342                 LBSR    SPACE                             ;FILL FOR TWO DIGITS
E2F9 20EA             (        mon09.asm):00343                 BRA     SUBM3                             ;ADVANCE
E2FB                  (        mon09.asm):00344         SUBM5
E2FB 8108             (        mon09.asm):00345                 CMPA    #$08                              ; BACKSPACE?
E2FD 1026FED5         (        mon09.asm):00346                 LBNE    ERROR                             ; INVALID
E301 301F             (        mon09.asm):00347                 LEAX    -1,X                              ; BACKUP
E303 20C2             (        mon09.asm):00348                 BRA     SUBM1                             ; NEW LINE
                      (        mon09.asm):00349         ;*
                      (        mon09.asm):00350         ;* 'DI' - DISASSEMBLE
                      (        mon09.asm):00351         ;*
E305                  (        mon09.asm):00352         DISASM
E305 170415           (        mon09.asm):00353                 LBSR    GETRNG                            ;GET ADDRESS
E308 FDBF18           (        mon09.asm):00354                 STD     TEMP                              ;SAVE
E30B 1F12             (        mon09.asm):00355                 TFR     X,Y                               ;COPY TO Y
E30D 1704F1           (        mon09.asm):00356                 LBSR    LFCR                              ; NEW LINE
E310 CEBF37           (        mon09.asm):00357                 LDU     #DSPBUF                           ; POINT TO INPUT BUFFER
E313                  (        mon09.asm):00358         DISS1
E313 170798           (        mon09.asm):00359                 LBSR    DISASS                            ;DISASSEMBLE
E316 1F31             (        mon09.asm):00360                 TFR     U,X                               ;COPY
E318 1704C5           (        mon09.asm):00361                 LBSR    WRLIN                             ; OUTPUT
E31B 170501           (        mon09.asm):00362                 LBSR    CHKCHR                            ; END?
E31E 2706             (        mon09.asm):00363                 BEQ     DISS2                             ; YES, QUIT
E320 10BCBF18         (        mon09.asm):00364                 CMPY    TEMP                              ; OVER?
E324 25ED             (        mon09.asm):00365                 BLO     DISS1                             ; TRY AGAIN
E326                  (        mon09.asm):00366         DISS2
E326 39               (        mon09.asm):00367                 RTS
                      (        mon09.asm):00368         ;*
                      (        mon09.asm):00369         ;* 'DV' - DISPLAY VECTORS
                      (        mon09.asm):00370         ;*
E327                  (        mon09.asm):00371         DISVEC
E327 8EE33D           (        mon09.asm):00372                 LDX     #VECTXT                           ; POINT TO VECTOR TEXT
E32A 108EBF00         (        mon09.asm):00373                 LDY     #SWIADR                           ; POINT TO FIRST VECTOR
E32E                  (        mon09.asm):00374         DISV1
E32E 1704AF           (        mon09.asm):00375                 LBSR    WRLIN                             ; OUTPUT A MESSAGE
E331 ECA1             (        mon09.asm):00376                 LDD     ,Y++                              ; GET A VECTOR
E333 170486           (        mon09.asm):00377                 LBSR    WRDOUT                            ; OUTPUT VECTOR ADDRESS
E336 A684             (        mon09.asm):00378                 LDA     ,X                                ;MORE TEXT?
E338 26F4             (        mon09.asm):00379                 BNE     DISV1                             ; AND CONTINUE
E33A 1604C4           (        mon09.asm):00380                 LBRA    LFCR                              ; NEW LINE
E33D                  (        mon09.asm):00381         VECTXT
E33D 5357493D00       (        mon09.asm):00382                 FCN     'SWI='
E342 20535749323D00   (        mon09.asm):00383                 FCN     ' SWI2='
E349 20535749333D00   (        mon09.asm):00384                 FCN     ' SWI3='
E350 204952513D00     (        mon09.asm):00385                 FCN     ' IRQ='
E356 20464952513D00   (        mon09.asm):00386                 FCN     ' FIRQ='
E35D 00               (        mon09.asm):00387                 FCB     0                                 ; END OF TABLE
                      (        mon09.asm):00388         ;*
                      (        mon09.asm):00389         ;* 'CV' - CHANGE VECTOR
                      (        mon09.asm):00390         ;*
E35E                  (        mon09.asm):00391         CHGVEC
E35E 17048C           (        mon09.asm):00392                 LBSR    GETECH                            ;GET CHAR & ECHO
E361 8153             (        mon09.asm):00393                 CMPA    #'S'                              ;SWI?
E363 2604             (        mon09.asm):00394                 BNE     CHGV1                             ;NO
E365 8631             (        mon09.asm):00395                 LDA     #'1'                              ;SAME AS '1'
E367 200E             (        mon09.asm):00396                 BRA     CHGV3                             ;CONTINUE
E369                  (        mon09.asm):00397         CHGV1
E369 8149             (        mon09.asm):00398                 CMPA    #'I'                              ;IRQ?
E36B 2604             (        mon09.asm):00399                 BNE     CHGV2                             ;NO, ITS OK
E36D 8634             (        mon09.asm):00400                 LDA     #'4'                              ;CONVERT
E36F 2006             (        mon09.asm):00401                 BRA     CHGV3                             ;AND CONTINUE
E371                  (        mon09.asm):00402         CHGV2
E371 8146             (        mon09.asm):00403                 CMPA    #'F'                              ;FIRQ?
E373 2602             (        mon09.asm):00404                 BNE     CHGV3                             ;NO
E375 8635             (        mon09.asm):00405                 LDA     #'5'                              ;CONVERT
E377                  (        mon09.asm):00406         CHGV3
E377 8031             (        mon09.asm):00407                 SUBA    #'1'                              ;TEST IT
E379 8104             (        mon09.asm):00408                 CMPA    #4                                ;CHECK RANGE
E37B 1022FE57         (        mon09.asm):00409                 LBHI    ERROR                             ; INVALID
E37F 8EBF00           (        mon09.asm):00410                 LDX     #SWIADR                           ;POINT TO IT
E382                  (        mon09.asm):00411         CHGV4
E382 48               (        mon09.asm):00412                 LSLA                                      ;X2 FOR 2 BYTE ENTRIES
E383 3086             (        mon09.asm):00413                 LEAX    A,X     ADVANCE TO VECTOR
E385 170473           (        mon09.asm):00414                 LBSR    SPACE                             ; SEPERATOR
E388 1703AF           (        mon09.asm):00415                 LBSR    GETADR                            ;GET NEW VALUE
E38B ED84             (        mon09.asm):00416                 STD     ,X                                ; WRITE NEW VECTOR
E38D 160471           (        mon09.asm):00417                 LBRA    LFCR                              ; NEW LINE & EXIT
                      (        mon09.asm):00418         ;*
                      (        mon09.asm):00419         ;* 'DR' - DISPLAY REGISTERS
                      (        mon09.asm):00420         ;*
E390                  (        mon09.asm):00421         DISREG
E390 8EE3DA           (        mon09.asm):00422                 LDX     #REGTXT                           ;POINT TO TEXT
E393 108EBF0A         (        mon09.asm):00423                 LDY     #SAVCC                            ;POINT TO VALUE
E397 8D31             (        mon09.asm):00424                 BSR     RSUB1                             ;'CC='
E399 170444           (        mon09.asm):00425                 LBSR    WRLIN                             ;' ['
E39C CEE404           (        mon09.asm):00426                 LDU     #CCBITS                           ;POINT TO BIT TABLE
E39F E63F             (        mon09.asm):00427                 LDB     -1,Y                              ;GET BITS BACK
E3A1 3420             (        mon09.asm):00428                 PSHS    Y                                 ;SAVE POINTER
E3A3 108E0008         (        mon09.asm):00429                 LDY     #8                                ;EIGHT BITS IN BYTE
E3A7                  (        mon09.asm):00430         REGB1
E3A7 A6C0             (        mon09.asm):00431                 LDA     ,U+                               ; GET BIT IDENTIFIER
E3A9 58               (        mon09.asm):00432                 ASLB                                      ;IS IT SET?
E3AA 2502             (        mon09.asm):00433                 BCS     RBITS                             ;YES, DISPLAY IT
E3AC 862D             (        mon09.asm):00434                 LDA     #'-'                              ;NO, DISPLAY DASH
E3AE                  (        mon09.asm):00435         RBITS
E3AE 170467           (        mon09.asm):00436                 LBSR    PUTCHR                            ; OUTPUT A CHARACTER
E3B1 313F             (        mon09.asm):00437                 LEAY    -1,Y                              ; REDUCE COUNT
E3B3 26F2             (        mon09.asm):00438                 BNE     REGB1                             ; MORE TO GO
E3B5 3520             (        mon09.asm):00439                 PULS    Y                                 ; RESTORE Y
E3B7 8D11             (        mon09.asm):00440                 BSR     RSUB1                             ;'] A='
E3B9 8D0F             (        mon09.asm):00441                 BSR     RSUB1                             ;' B='
E3BB 8D0D             (        mon09.asm):00442                 BSR     RSUB1                             ;' DP='
E3BD 8D13             (        mon09.asm):00443                 BSR     RSUB2                             ;' X='
E3BF 8D11             (        mon09.asm):00444                 BSR     RSUB2                             ;' Y='
E3C1 8D0F             (        mon09.asm):00445                 BSR     RSUB2                             ;' U='
E3C3 8D0D             (        mon09.asm):00446                 BSR     RSUB2                             ;' PC='
E3C5 8D0B             (        mon09.asm):00447                 BSR     RSUB2                             ;' S='
E3C7 160437           (        mon09.asm):00448                 LBRA    LFCR                              ;QUIT
                      (        mon09.asm):00449         ;* DISPLAY 8 BIT REGISTER VALUE
E3CA                  (        mon09.asm):00450         RSUB1
E3CA 170413           (        mon09.asm):00451                 LBSR    WRLIN                             ;OUTPUT BYTE VALUE
E3CD A6A0             (        mon09.asm):00452                 LDA     ,Y+                               ; GET REGISTER VALUE
E3CF 1603EE           (        mon09.asm):00453                 LBRA    HEXOUT                            ;OUTPUT IN HEX
                      (        mon09.asm):00454         ;* DISPLAY 16 BIT REGISTER VALUE
E3D2                  (        mon09.asm):00455         RSUB2
E3D2 17040B           (        mon09.asm):00456                 LBSR    WRLIN                             ; OUTPUT WORD VALUE
E3D5 ECA1             (        mon09.asm):00457                 LDD     ,Y++                              ; GET REGISTER VALUE
E3D7 1603E2           (        mon09.asm):00458                 LBRA    WRDOUT                            ; OUTPUT IN HEX
                      (        mon09.asm):00459         ;* TABLE OF TEXT FOR REGISTER DISPLAY
E3DA                  (        mon09.asm):00460         REGTXT
E3DA 43433D00         (        mon09.asm):00461                 FCN     'CC='
E3DE 205B00           (        mon09.asm):00462                 FCN     ' ['
E3E1 5D20413D00       (        mon09.asm):00463                 FCN     '] A='
E3E6 20423D00         (        mon09.asm):00464                 FCN     ' B='
E3EA 2044503D00       (        mon09.asm):00465                 FCN     ' DP='
E3EF 20583D00         (        mon09.asm):00466                 FCN     ' X='
E3F3 20593D00         (        mon09.asm):00467                 FCN     ' Y='
E3F7 20553D00         (        mon09.asm):00468                 FCN     ' U='
E3FB 2050433D00       (        mon09.asm):00469                 FCN     ' PC='
E400 20533D00         (        mon09.asm):00470                 FCN     ' S='
                      (        mon09.asm):00471         ;* TABLE OF CONDITION CODE BIT MEANINGS
E404                  (        mon09.asm):00472         CCBITS
E404 454648494E5A5643 (        mon09.asm):00473                 FCC     'EFHINZVC'
                      (        mon09.asm):00474         ;*
                      (        mon09.asm):00475         ;* 'CR' - CHANGE REGISTER
                      (        mon09.asm):00476         ;*
E40C                  (        mon09.asm):00477         CHGREG
E40C 1703DE           (        mon09.asm):00478                 LBSR    GETECH      GET OPERAND
E40F 8120             (        mon09.asm):00479                 CMPA    #' '        A+B?
E411 2727             (        mon09.asm):00480                 BEQ     CHG4        YES
E413 8EE457           (        mon09.asm):00481                 LDX     #CHGTAB     POINT TO TABLE
E416 5F               (        mon09.asm):00482                 CLRB    ZERO INDICATOR
E417                  (        mon09.asm):00483         CHG1
E417 A184             (        mon09.asm):00484                 CMPA    ,X      IS THIS IT?
E419 2708             (        mon09.asm):00485                 BEQ     CHG2        YES
E41B 5C               (        mon09.asm):00486                 INCB    ADVANCE COUNT
E41C 6D80             (        mon09.asm):00487                 TST     ,X+     END OF TABLE
E41E 26F7             (        mon09.asm):00488                 BNE     CHG1        NO, KEEP TRYING
E420 16FDB3           (        mon09.asm):00489                 LBRA    ERROR       INDICATE ERROR
E423                  (        mon09.asm):00490         CHG2
E423 1703D5           (        mon09.asm):00491                 LBSR    SPACE       OUTPUT SPACE
E426 8EBF0A           (        mon09.asm):00492                 LDX     #SAVCC      POINT TO START OF REGISTERS
E429 C104             (        mon09.asm):00493                 CMPB    #4      16 BIT?
E42B 241B             (        mon09.asm):00494                 BHS     R16     YES
E42D 3085             (        mon09.asm):00495                 LEAX    B,X     OFFSET TO ADDRESS
E42F 17034F           (        mon09.asm):00496                 LBSR    GETBYT      GET NEW VALUE
E432 1026FDA0         (        mon09.asm):00497                 LBNE    ERROR       INVALID
E436 A784             (        mon09.asm):00498                 STA     ,X      SAVE IN REGISTER
E438 201A             (        mon09.asm):00499                 BRA     CHG3        AND QUIT
E43A                  (        mon09.asm):00500         CHG4
E43A 170399           (        mon09.asm):00501                 LBSR    WRMSG       OUTPUT MESSAGE
E43D 5B41425D2000     (        mon09.asm):00502                 FCN     '[AB] '
E443 8EBF0B           (        mon09.asm):00503                 LDX     #SAVA       POINT TO 'D'
E446 2007             (        mon09.asm):00504                 BRA     R17     MAKE LIKE 16 BIT REG
E448                  (        mon09.asm):00505         R16
E448 3004             (        mon09.asm):00506                 LEAX    4,X     OFFSET TO 16 BIT REGISTERS
E44A C004             (        mon09.asm):00507                 SUBB    #4      CONVERT TO ZERO ORIGIN
E44C 58               (        mon09.asm):00508                 LSLB    DOUBLE FOR WORD VALUES
E44D 3085             (        mon09.asm):00509                 LEAX    B,X     MOVE TO CORRECT OFFSET
E44F                  (        mon09.asm):00510         R17
E44F 1702E8           (        mon09.asm):00511                 LBSR    GETADR      GET WORD VALUE
E452 ED84             (        mon09.asm):00512                 STD     ,X      SET REGISTER VALUE
E454                  (        mon09.asm):00513         CHG3
E454 1603AA           (        mon09.asm):00514                 LBRA    LFCR        QUIT
                      (        mon09.asm):00515         ;* TABLE OF REGISTER NAMES
E457                  (        mon09.asm):00516         CHGTAB
E457 4341424458595550 (        mon09.asm):00517                 FCN     'CABDXYUPS'
     5300
                      (        mon09.asm):00518         ;*
                      (        mon09.asm):00519         ;* 'G' - GO (EXECUTE)
                      (        mon09.asm):00520         ;*
E461                  (        mon09.asm):00521         GOEXEC
E461 1702A1           (        mon09.asm):00522                 LBSR    GETPC       GET ADDRESS
E464 17039A           (        mon09.asm):00523                 LBSR    LFCR        NEW LINE
                      (        mon09.asm):00524         ;* STEP ONE INST. BEFORE INSERTING BREAKPOINTS, SO THAT BREAKPOINTS
                      (        mon09.asm):00525         ;* CAN BE USED WITHIN LOOPS ETC.
E467 1703E6           (        mon09.asm):00526                 LBSR    STEP        STEP ONE INSTRUCTION
                      (        mon09.asm):00527         ;* INSERT BREAKPOINTS
E46A 8EBF1F           (        mon09.asm):00528                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
E46D C608             (        mon09.asm):00529                 LDB     #8      EIGHT BREAKPOINTS
E46F                  (        mon09.asm):00530         GOEX3
E46F 10AE81           (        mon09.asm):00531                 LDY     ,X++        GET BREAKPOINT ADDRESS
E472 2708             (        mon09.asm):00532                 BEQ     GOEX4       NO BREAKPOINT, QUIT
E474 A6A4             (        mon09.asm):00533                 LDA     ,Y      GET OPCODE
E476 A784             (        mon09.asm):00534                 STA     ,X      SAVE IN TABLE
E478 863F             (        mon09.asm):00535                 LDA     #$3F        GET 'SWI' BREAKPOINT OPCODE
E47A A7A4             (        mon09.asm):00536                 STA     ,Y      SAVE IN CODE SPACE
E47C                  (        mon09.asm):00537         GOEX4
E47C 3001             (        mon09.asm):00538                 LEAX    1,X     ADVANCE TO NEXT IN TABLE
E47E 5A               (        mon09.asm):00539                 DECB    REDUCE COUNT OF BRKPTS
E47F 26EE             (        mon09.asm):00540                 BNE     GOEX3       DO ALL EIGHT
E481 10FEBF16         (        mon09.asm):00541                 LDS     SAVS        RESTORE STACK POINTER
E485 B6BF0A           (        mon09.asm):00542                 LDA     SAVCC       GET SAVED CC
E488 F6BF0D           (        mon09.asm):00543                 LDB     SAVDP       GET SAVED DPR
E48B 3406             (        mon09.asm):00544                 PSHS    A,B     SAVE ON STACK FOR LAST RESTORE
E48D FCBF0B           (        mon09.asm):00545                 LDD     SAVA        RESTORE A, B REGISTERS
E490 BEBF0E           (        mon09.asm):00546                 LDX     SAVX        RESTORE X REGISTER
E493 10BEBF10         (        mon09.asm):00547                 LDY     SAVY        RESTORE Y REGISTER
E497 FEBF12           (        mon09.asm):00548                 LDU     SAVU        RESTORE U REGISTER
E49A 3509             (        mon09.asm):00549                 PULS    CC,DP       RESTORE CC + DP
E49C 6E9FBF14         (        mon09.asm):00550                 JMP     [SAVPC]     EXECUTE USER PGM
                      (        mon09.asm):00551         ;*
                      (        mon09.asm):00552         ;* 'RR' - REPEATING READ
                      (        mon09.asm):00553         ;*
E4A0                  (        mon09.asm):00554         RDLOOP:
E4A0 170297           (        mon09.asm):00555                 LBSR    GETADR                            ;GET ADDRESS
E4A3 1F01             (        mon09.asm):00556                 TFR     D,X                               ;SET UP 'X'
E4A5 170359           (        mon09.asm):00557                 LBSR    LFCR                              ;NEW LINE
E4A8                  (        mon09.asm):00558         RDLP1:
E4A8 A684             (        mon09.asm):00559                 LDA     ,X                                ;READ LOCATION
E4AA 170372           (        mon09.asm):00560                 LBSR    CHKCHR                            ;ABORT?
E4AD 26F9             (        mon09.asm):00561                 BNE     RDLP1                             ;NO, ITS OK
E4AF 39               (        mon09.asm):00562                 RTS
                      (        mon09.asm):00563         ;*
                      (        mon09.asm):00564         ;* 'RW' - REPEATING WRITE
                      (        mon09.asm):00565         ;*
E4B0                  (        mon09.asm):00566         WRLOOP:
E4B0 170287           (        mon09.asm):00567                 LBSR    GETADR                            ;GET ADDRESS
E4B3 1F01             (        mon09.asm):00568                 TFR     D,X                               ;SET UP 'X'
E4B5 170343           (        mon09.asm):00569                 LBSR    SPACE                             ;SPACE OVER
E4B8 1702C6           (        mon09.asm):00570                 LBSR    GETBYT                            ;GET DATA
E4BB 1026FD17         (        mon09.asm):00571                 LBNE    ERROR                             ;INVALID
E4BF 3402             (        mon09.asm):00572                 PSHS    A                                 ;SAVE ACCA
E4C1 17033D           (        mon09.asm):00573                 LBSR    LFCR                              ;NEW LINE
E4C4                  (        mon09.asm):00574         WRLP1:
E4C4 A6E4             (        mon09.asm):00575                 LDA     ,S                                ;GET CHAR
E4C6 A784             (        mon09.asm):00576                 STA     ,X                                ;WRITE IT OUT
E4C8 170354           (        mon09.asm):00577                 LBSR    CHKCHR                            ;ABORT COMMAND?
E4CB 26F7             (        mon09.asm):00578                 BNE     WRLP1                             ;CONTINUE
E4CD 3582             (        mon09.asm):00579                 PULS    A,PC                              ;GO HOME
                      (        mon09.asm):00580         ;*
                      (        mon09.asm):00581         ;* 'XR' - REPEATING 16 BIT READ
                      (        mon09.asm):00582         ;*
E4CF                  (        mon09.asm):00583         XRLOOP
E4CF 170268           (        mon09.asm):00584                 LBSR    GETADR      GET ADDRESS
E4D2 1F01             (        mon09.asm):00585                 TFR     D,X     SET UP 'X'
E4D4 17032A           (        mon09.asm):00586                 LBSR    LFCR        NEW LINE
E4D7                  (        mon09.asm):00587         XRLP1
E4D7 EC84             (        mon09.asm):00588                 LDD     ,X      READ LOCATION
E4D9 170343           (        mon09.asm):00589                 LBSR    CHKCHR      ABORT?
E4DC 26F9             (        mon09.asm):00590                 BNE     XRLP1       NO, ITS OK
E4DE 39               (        mon09.asm):00591                 RTS
                      (        mon09.asm):00592         ;*
                      (        mon09.asm):00593         ;* 'XW' - REPEATING 16 BITWRITE
                      (        mon09.asm):00594         ;*
E4DF                  (        mon09.asm):00595         XWLOOP
E4DF 170258           (        mon09.asm):00596                 LBSR    GETADR      GET ADDRESS
E4E2 1F01             (        mon09.asm):00597                 TFR     D,X     SET UP 'X'
E4E4 170314           (        mon09.asm):00598                 LBSR    SPACE       SPACE OVER
E4E7 170250           (        mon09.asm):00599                 LBSR    GETADR      GET DATA
E4EA 3406             (        mon09.asm):00600                 PSHS    A,B     SAVE ACCA
E4EC 170312           (        mon09.asm):00601                 LBSR    LFCR        NEW LINE
E4EF                  (        mon09.asm):00602         XWLP1
E4EF ECE4             (        mon09.asm):00603                 LDD     ,S      GET CHAR
E4F1 ED84             (        mon09.asm):00604                 STD     ,X      WRITE IT OUT
E4F3 170329           (        mon09.asm):00605                 LBSR    CHKCHR      ABORT COMMAND?
E4F6 26F7             (        mon09.asm):00606                 BNE     XWLP1       CONTINUE
E4F8 3586             (        mon09.asm):00607                 PULS    A,B,PC      GO HOME
                      (        mon09.asm):00608         ;*
                      (        mon09.asm):00609         ;* 'MT' - MEMORY TEST
                      (        mon09.asm):00610         ;*
E4FA                  (        mon09.asm):00611         RAMTEST
E4FA 170220           (        mon09.asm):00612                 LBSR    GETRNG      GET ADDRESS RANGE
E4FD FDBF18           (        mon09.asm):00613                 STD     TEMP        SAVE ENDING ADDRESS
E500 CCFFFF           (        mon09.asm):00614                 LDD     #-1     BEGIN WITH NEGATIVE 1
E503 FDBF37           (        mon09.asm):00615                 STD     DSPBUF      SAVE PASS COUNT
E506 1702F8           (        mon09.asm):00616                 LBSR    LFCR        NEW LINE
E509 1F12             (        mon09.asm):00617                 TFR     X,Y     COPY STARTING ADDRESS
E50B                  (        mon09.asm):00618         RAM0
E50B 6F80             (        mon09.asm):00619                 CLR     ,X+     ZAP ONE BYTE
E50D BCBF18           (        mon09.asm):00620                 CMPX    TEMP        ARE WE OVER?
E510 23F9             (        mon09.asm):00621                 BLS     RAM0        NO, CLEAR EM ALL
E512                  (        mon09.asm):00622         RAM1
E512 1F21             (        mon09.asm):00623                 TFR     Y,X     RESET STARTING ADDRESS
E514 860D             (        mon09.asm):00624                 LDA     #$0D        GET CR
E516 1702FF           (        mon09.asm):00625                 LBSR    PUTCHR      BACK TO START OF LINE
E519 1702BA           (        mon09.asm):00626                 LBSR    WRMSG       OUTPUT MESSAGE
E51C 506173733A2000   (        mon09.asm):00627                 FCN     'Pass: '
E523 FCBF37           (        mon09.asm):00628                 LDD     DSPBUF      GET COUNTER
E526 C30001           (        mon09.asm):00629                 ADDD    #1      ADVANCE PASS COUNT
E529 FDBF37           (        mon09.asm):00630                 STD     DSPBUF      RESAVE
E52C 17028D           (        mon09.asm):00631                 LBSR    WRDOUT      OUTPUT
E52F 1702C9           (        mon09.asm):00632                 LBSR    SPACE       SPACE OVER
E532                  (        mon09.asm):00633         RAM2
E532 1702EA           (        mon09.asm):00634                 LBSR    CHKCHR      CHARACTER READY?
E535 271C             (        mon09.asm):00635                 BEQ     RAM5        ESCAPE, QUIT & RESTART MONITOR
E537 F6BF38           (        mon09.asm):00636                 LDB     DSPBUF+1    GET EXPECTED VALUE
E53A E184             (        mon09.asm):00637                 CMPB    ,X      DID IT KEEP ITS VALUE
E53C 264E             (        mon09.asm):00638                 BNE     RAM7        NO, ERROR
E53E 8601             (        mon09.asm):00639                 LDA     #%00000001  FIRST DATA VALUE
E540                  (        mon09.asm):00640         RAM3
E540 A784             (        mon09.asm):00641                 STA     ,X      RESAVE IT
E542 A184             (        mon09.asm):00642                 CMPA    ,X      SAME ?
E544 2613             (        mon09.asm):00643                 BNE     RAM6        FAILED
E546 48               (        mon09.asm):00644                 LSLA    SHIFT THE BIT
E547 26F7             (        mon09.asm):00645                 BNE     RAM3        CONTINUE TILL ALL DONE
E549                  (        mon09.asm):00646         RAM4
E549 5C               (        mon09.asm):00647                 INCB    ADVANCE TO NEXT VALUE
E54A E780             (        mon09.asm):00648                 STB     ,X+     SAVE REGISTER
E54C BCBF18           (        mon09.asm):00649                 CMPX    TEMP        ARE WE IN RANGE?
E54F 23E1             (        mon09.asm):00650                 BLS     RAM2        YES, ITS OK
E551 20BF             (        mon09.asm):00651                 BRA     RAM1        AND RESTART
E553                  (        mon09.asm):00652         RAM5
E553 1702AB           (        mon09.asm):00653                 LBSR    LFCR        NEW LINE
E556 16FC3F           (        mon09.asm):00654                 LBRA    MAIN        AND RESTART MONITOR
                      (        mon09.asm):00655         ;* VERIFY OF LOCATION FAILED
E559                  (        mon09.asm):00656         RAM6
E559 3402             (        mon09.asm):00657                 PSHS    A       SAVE VALUE WRITTEN
E55B 170278           (        mon09.asm):00658                 LBSR    WRMSG       OUTPUT MESSAGE
E55E 416464723A2000   (        mon09.asm):00659                 FCN     'Addr: '
E565 1F10             (        mon09.asm):00660                 TFR     X,D     GET ADDRESS
E567 170252           (        mon09.asm):00661                 LBSR    WRDOUT      OUTPUT
E56A 170269           (        mon09.asm):00662                 LBSR    WRMSG       OUTPUT MESSAGE
E56D 2C2057726F74653A (        mon09.asm):00663                 FCN     ', Wrote: '
     2000
E577 3502             (        mon09.asm):00664                 PULS    A       RESTORE VALUE
E579 170244           (        mon09.asm):00665                 LBSR    HEXOUT      OUTPUT
E57C 170257           (        mon09.asm):00666                 LBSR    WRMSG       OUTPUT MESSAGE
E57F 2C20526561643A20 (        mon09.asm):00667                 FCN     ', Read: '
     00
E588 A684             (        mon09.asm):00668                 LDA     ,X      GET VALUE READ
E58A 2033             (        mon09.asm):00669                 BRA     RAM8        CONTINUE
                      (        mon09.asm):00670         ;* DATA WAS CORRUPTED BY OTHER WRITES
E58C                  (        mon09.asm):00671         RAM7
E58C 170247           (        mon09.asm):00672                 LBSR    WRMSG       OUTPUT MESSAGE
E58F 416464723A2000   (        mon09.asm):00673                 FCN     'Addr: '
E596 1F10             (        mon09.asm):00674                 TFR     X,D     GET ADDR
E598 170221           (        mon09.asm):00675                 LBSR    WRDOUT      OUTPUT
E59B 170238           (        mon09.asm):00676                 LBSR    WRMSG       OUTPUT MESSAGE
E59E 2C20457870656374 (        mon09.asm):00677                 FCN     ', Expected: '
     65643A2000
E5AB B6BF38           (        mon09.asm):00678                 LDA     DSPBUF+1    GET VALUE
E5AE 17020F           (        mon09.asm):00679                 LBSR    HEXOUT      OUTPUT
E5B1 170222           (        mon09.asm):00680                 LBSR    WRMSG       OUTPUT MESSAGE
E5B4 2C20526561643A20 (        mon09.asm):00681                 FCN     ', Read: '
     00
E5BD A684             (        mon09.asm):00682                 LDA     ,X      GET VALUE BACK
E5BF                  (        mon09.asm):00683         RAM8
E5BF 1701FE           (        mon09.asm):00684                 LBSR    HEXOUT      OUTPUT VALUE
E5C2 17023C           (        mon09.asm):00685                 LBSR    LFCR        NEW LINE
E5C5 F6BF38           (        mon09.asm):00686                 LDB     DSPBUF+1    GET CORRECT NEXT VALUE
E5C8 16FF7E           (        mon09.asm):00687                 LBRA    RAM4
                      (        mon09.asm):00688         ;*
                      (        mon09.asm):00689         ;* '+' - HEXIDECIMAL ADDITION
                      (        mon09.asm):00690         ;*
E5CB                  (        mon09.asm):00691         HEXADD
E5CB 17016C           (        mon09.asm):00692                 LBSR    GETADR      GET FIRST VALUE
E5CE 3406             (        mon09.asm):00693                 PSHS    A,B     SAVE IT
E5D0 862B             (        mon09.asm):00694                 LDA     #'+'        PLUS SIGN
E5D2 170243           (        mon09.asm):00695                 LBSR    PUTCHR      DISPLAY
E5D5 170162           (        mon09.asm):00696                 LBSR    GETADR      GET SECOND VALUE
E5D8 E3E4             (        mon09.asm):00697                 ADDD    ,S      PERFORM ADDITION
E5DA 2013             (        mon09.asm):00698                 BRA     HEXSHO      DISPLAY IT
                      (        mon09.asm):00699         ;*
                      (        mon09.asm):00700         ;* '-' - HEXIDECIMAL SUBTRACTION
                      (        mon09.asm):00701         ;*
E5DC                  (        mon09.asm):00702         HEXSUB
E5DC 17015B           (        mon09.asm):00703                 LBSR    GETADR      GET FIRST
E5DF 3406             (        mon09.asm):00704                 PSHS    A,B     SAVE IT
E5E1 862D             (        mon09.asm):00705                 LDA     #'-'        MINUS SIGN
E5E3 170232           (        mon09.asm):00706                 LBSR    PUTCHR      DISPLAY
E5E6 170151           (        mon09.asm):00707                 LBSR    GETADR      GET SECOND ADDRESS
E5E9 3406             (        mon09.asm):00708                 PSHS    A,B     SAVE IT
E5EB EC62             (        mon09.asm):00709                 LDD     2,S     GET FIRST VALUE
E5ED A3E1             (        mon09.asm):00710                 SUBD    ,S++        PERFORM SUBTRACTION
E5EF                  (        mon09.asm):00711         HEXSHO
E5EF EDE4             (        mon09.asm):00712                 STD     ,S      SAVE RESULT
E5F1 863D             (        mon09.asm):00713                 LDA     #'='        =ALS SIGN
E5F3 170222           (        mon09.asm):00714                 LBSR    PUTCHR      DISPLAY
E5F6 3506             (        mon09.asm):00715                 PULS    A,B     RESTORE RESULT
E5F8 1701C1           (        mon09.asm):00716                 LBSR    WRDOUT      OUTPUT
E5FB 160203           (        mon09.asm):00717                 LBRA    LFCR        NEW LINE & RETURN
                      (        mon09.asm):00718         ;*
                      (        mon09.asm):00719         ;* '?' - HELP COMMAND
                      (        mon09.asm):00720         ;*
E5FE                  (        mon09.asm):00721         HELP
E5FE 8EF371           (        mon09.asm):00722                 LDX     #HTEXT      POINT TO HELP TEXT
E601                  (        mon09.asm):00723         HLP1
E601 C619             (        mon09.asm):00724                 LDB     #25     COLUMN COUNTER
E603                  (        mon09.asm):00725         HLP2
E603 A680             (        mon09.asm):00726                 LDA     ,X+     GET CHAR FROM TEXT
E605 2718             (        mon09.asm):00727                 BEQ     HLP4        EXIT THIS LINE
E607 817C             (        mon09.asm):00728                 CMPA    #'|'        SEPERATOR?
E609 2706             (        mon09.asm):00729                 BEQ     HLP3        YES, EXIT
E60B 17020A           (        mon09.asm):00730                 LBSR    PUTCHR      OUTPUT
E60E 5A               (        mon09.asm):00731                 DECB    BACKUP
E60F 20F2             (        mon09.asm):00732                 BRA     HLP2        NEXT
E611                  (        mon09.asm):00733         HLP3
E611 1701E7           (        mon09.asm):00734                 LBSR    SPACE       OUTPUT SPACE
E614 5A               (        mon09.asm):00735                 DECB    REDUCE COUNT
E615 26FA             (        mon09.asm):00736                 BNE     HLP3        KEEP GOING
E617 1701BC           (        mon09.asm):00737                 LBSR    WRMSG       OUTPUT MESSAGE
E61A 2D2000           (        mon09.asm):00738                 FCN     '- '        SEPERATOR
E61D 20E4             (        mon09.asm):00739                 BRA     HLP2        AND CONTINUE
E61F                  (        mon09.asm):00740         HLP4
E61F 1701DF           (        mon09.asm):00741                 LBSR    LFCR        NEW LINE
E622 1701FA           (        mon09.asm):00742                 LBSR    CHKCHR      TEST FOR CHARACTER ENTERED
E625 2704             (        mon09.asm):00743                 BEQ     HLP5        IF SO, EXIT
E627 A684             (        mon09.asm):00744                 LDA     ,X      IS THIS THE END?
E629 2AD6             (        mon09.asm):00745                 BPL     HLP1        NO, KEEP GOING
E62B                  (        mon09.asm):00746         HLP5
E62B 39               (        mon09.asm):00747                 RTS
                      (        mon09.asm):00748         ;*
                      (        mon09.asm):00749         ;* 'DL' - DOWNLOAD
                      (        mon09.asm):00750         ;*
E62C                  (        mon09.asm):00751         LOAD
E62C 1701D2           (        mon09.asm):00752                 LBSR    LFCR        NEW LINE
E62F                  (        mon09.asm):00753         DLO1
E62F 8D0E             (        mon09.asm):00754                 BSR     DLOAD       DOWNLOAD RECORD
E631 2409             (        mon09.asm):00755                 BCC     DLO2        END
E633 A6E4             (        mon09.asm):00756                 LDA     ,S      GET OLD I/O CONFIG
E635 862E             (        mon09.asm):00757                 LDA     #'.'        GET DOT
E637 1701DE           (        mon09.asm):00758                 LBSR    PUTCHR      OUTPUT
E63A 20F3             (        mon09.asm):00759                 BRA     DLO1        CONTINUE
E63C                  (        mon09.asm):00760         DLO2
E63C 1601C2           (        mon09.asm):00761                 LBRA    LFCR        New line & return
                      (        mon09.asm):00762         ;* Download a record in either MOTOROLA or INTEL hex format
E63F                  (        mon09.asm):00763         DLOAD
E63F 1701CB           (        mon09.asm):00764                 LBSR    GETCHR      Get a character
E642 813A             (        mon09.asm):00765                 CMPA    #':'        Start of INTEL record?
E644 276B             (        mon09.asm):00766                 BEQ     DLINT       Yes, download INTEL
E646 8153             (        mon09.asm):00767                 CMPA    #'S'        Start of MOTOROLA record?
E648 26F5             (        mon09.asm):00768                 BNE     DLOAD       No, keep looking
                      (        mon09.asm):00769         ;* Download a record in MOTOROLA hex format
E64A                  (        mon09.asm):00770         DLMOT
E64A 1701C0           (        mon09.asm):00771                 LBSR    GETCHR      GET NEXT CHAR
E64D 8130             (        mon09.asm):00772                 CMPA    #'0'        HEADER RECORD?
E64F 27EE             (        mon09.asm):00773                 BEQ     DLOAD       SKIP IT
E651 8139             (        mon09.asm):00774                 CMPA    #'9'        END OF FILE?
E653 275B             (        mon09.asm):00775                 BEQ     DLEOF       END OF FILE
E655 8131             (        mon09.asm):00776                 CMPA    #'1'        DATA RECORD?
E657 2642             (        mon09.asm):00777                 BNE     LODERR      LOAD ERROR
E659 170125           (        mon09.asm):00778                 LBSR    GETBYT      GET LENGTH
E65C 263D             (        mon09.asm):00779                 BNE     LODERR      Report error
E65E B7BF18           (        mon09.asm):00780                 STA     TEMP        START CHECKSUM
E661 8003             (        mon09.asm):00781                 SUBA    #3      CONVERT
E663 B7BF19           (        mon09.asm):00782                 STA     TEMP+1      Set length
E666 170118           (        mon09.asm):00783                 LBSR    GETBYT      Get first byte of address
E669 2630             (        mon09.asm):00784                 BNE     LODERR      Report error
E66B 1F89             (        mon09.asm):00785                 TFR     A,B     Save for later
E66D BBBF18           (        mon09.asm):00786                 ADDA    TEMP        Include in checksum
E670 B7BF18           (        mon09.asm):00787                 STA     TEMP        Resave
E673 17010B           (        mon09.asm):00788                 LBSR    GETBYT      Get next byte of address
E676 2623             (        mon09.asm):00789                 BNE     LODERR      Report error
E678 1E89             (        mon09.asm):00790                 EXG     A,B     Swap
E67A 1F01             (        mon09.asm):00791                 TFR     D,X     Set pointer
E67C FBBF18           (        mon09.asm):00792                 ADDB    TEMP        Include in checksum
E67F F7BF18           (        mon09.asm):00793                 STB     TEMP        Resave checksum
E682                  (        mon09.asm):00794         DLMOT1
E682 1700FC           (        mon09.asm):00795                 LBSR    GETBYT      Get a data byte
E685 A780             (        mon09.asm):00796                 STA     ,X+     Save in RAM
E687 BBBF18           (        mon09.asm):00797                 ADDA    TEMP        Include checksum
E68A B7BF18           (        mon09.asm):00798                 STA     TEMP        Resave
E68D 7ABF19           (        mon09.asm):00799                 DEC     TEMP+1      Reduce length
E690 26F0             (        mon09.asm):00800                 BNE     DLMOT1      Do them all
E692 1700EC           (        mon09.asm):00801                 LBSR    GETBYT      Get a byte
E695 BBBF18           (        mon09.asm):00802                 ADDA    TEMP        Add computed checksum
E698 4C               (        mon09.asm):00803                 INCA    Test for success
E699 2713             (        mon09.asm):00804                 BEQ     DLRTS       Download OK
                      (        mon09.asm):00805         ;* Error occured on loading
E69B                  (        mon09.asm):00806         LODERR
E69B 170138           (        mon09.asm):00807                 LBSR    WRMSG       OUTPUT
E69E 203F4C6F61642065 (        mon09.asm):00808                 FCC     ' ?Load error'
     72726F72
E6AA FF               (        mon09.asm):00809                 FCB     $FF
E6AB 16FAEA           (        mon09.asm):00810                 LBRA    MAIN        BACK FOR COMMAND
                      (        mon09.asm):00811         ;* Return indicating another record
E6AE                  (        mon09.asm):00812         DLRTS
E6AE 1A01             (        mon09.asm):00813                 ORCC    #$01        SET 'C' FLAG
E6B0                  (        mon09.asm):00814         DLEOF
E6B0 39               (        mon09.asm):00815                 RTS
                      (        mon09.asm):00816         ;* Download record in INTEL format
E6B1                  (        mon09.asm):00817         DLINT
E6B1 1700CD           (        mon09.asm):00818                 LBSR    GETBYT      Get count
E6B4 26E5             (        mon09.asm):00819                 BNE     LODERR      Report error
E6B6 B7BF18           (        mon09.asm):00820                 STA     TEMP        Start checksum
E6B9 B7BF19           (        mon09.asm):00821                 STA     TEMP+1      Record length
E6BC 8100             (        mon09.asm):00822                 CMPA    #0      Test & clear C
E6BE 27F0             (        mon09.asm):00823                 BEQ     DLEOF       End of file
                      (        mon09.asm):00824         ;* Get address
E6C0 1700BE           (        mon09.asm):00825                 LBSR    GETBYT      Get first byte of address
E6C3 26D6             (        mon09.asm):00826                 BNE     LODERR      Report error
E6C5 1F89             (        mon09.asm):00827                 TFR     A,B     Save for later
E6C7 BBBF18           (        mon09.asm):00828                 ADDA    TEMP        Include in checksum
E6CA B7BF18           (        mon09.asm):00829                 STA     TEMP        Resave
E6CD 1700B1           (        mon09.asm):00830                 LBSR    GETBYT      Get next byte of address
E6D0 26C9             (        mon09.asm):00831                 BNE     LODERR      Report error
E6D2 1E89             (        mon09.asm):00832                 EXG     A,B     Swap
E6D4 1F01             (        mon09.asm):00833                 TFR     D,X     Set pointer
E6D6 FBBF18           (        mon09.asm):00834                 ADDB    TEMP        Include in checksum
E6D9 F7BF18           (        mon09.asm):00835                 STB     TEMP        Resave checksum
                      (        mon09.asm):00836         ;* Get record type
E6DC 1700A2           (        mon09.asm):00837                 LBSR    GETBYT      Get type value
E6DF 26BA             (        mon09.asm):00838                 BNE     LODERR      Report error
E6E1 BBBF18           (        mon09.asm):00839                 ADDA    TEMP        Include checksum
E6E4 B7BF18           (        mon09.asm):00840                 STA     TEMP        Resave checksum
                      (        mon09.asm):00841         ;* Get data bytes
E6E7                  (        mon09.asm):00842         DLINT1
E6E7 170097           (        mon09.asm):00843                 LBSR    GETBYT      Get data byte
E6EA 26AF             (        mon09.asm):00844                 BNE     LODERR      Report error
E6EC A780             (        mon09.asm):00845                 STA     ,X+     Write to memory
E6EE BBBF18           (        mon09.asm):00846                 ADDA    TEMP        Include checksum
E6F1 B7BF18           (        mon09.asm):00847                 STA     TEMP        Resave checksum
E6F4 7ABF19           (        mon09.asm):00848                 DEC     TEMP+1      Reduce length
E6F7 26EE             (        mon09.asm):00849                 BNE     DLINT1      Do them all
                      (        mon09.asm):00850         ;* Get checksum
E6F9 BDE781           (        mon09.asm):00851                 JSR     GETBYT      Read a byte
E6FC 269D             (        mon09.asm):00852                 BNE     LODERR      Report error
E6FE BBBF18           (        mon09.asm):00853                 ADDA    TEMP        Include checksum
E701 27AB             (        mon09.asm):00854                 BEQ     DLRTS       Report success
E703 2096             (        mon09.asm):00855                 BRA     LODERR      Report failure
                      (        mon09.asm):00856         ;*
                      (        mon09.asm):00857         ;* GETS AN ADDRESS, DEFAULTS TO (PC)
                      (        mon09.asm):00858         ;*
E705                  (        mon09.asm):00859         GETPC
E705 8D3A             (        mon09.asm):00860                 BSR     GETAD1      Get address
E707 2710             (        mon09.asm):00861                 BEQ     GETPC1      Normal data
E709 8120             (        mon09.asm):00862                 CMPA    #' '        Space?
E70B 2631             (        mon09.asm):00863                 BNE     GETERR      Report error
E70D 1700C6           (        mon09.asm):00864                 LBSR    WRMSG       Output message
E710 2D3E00           (        mon09.asm):00865                 FCN     '->'        Display address
E713 FCBF14           (        mon09.asm):00866                 LDD     SAVPC       Get PC value
E716 1600A3           (        mon09.asm):00867                 LBRA    WRDOUT      Display
E719                  (        mon09.asm):00868         GETPC1
E719 FDBF14           (        mon09.asm):00869                 STD     SAVPC       Set new PC
E71C 39               (        mon09.asm):00870                 RTS
                      (        mon09.asm):00871         ;*
                      (        mon09.asm):00872         ;* GETS A RANGE OF ADDRESS, RETURNS WITH START IN X, END IN D
                      (        mon09.asm):00873         ;*
E71D                  (        mon09.asm):00874         GETRNG
E71D 8D1B             (        mon09.asm):00875                 BSR     GETADR      Get first address
E71F 1F01             (        mon09.asm):00876                 TFR     D,X     Save in X
E721 862C             (        mon09.asm):00877                 LDA     #','        Separator
E723 1700F2           (        mon09.asm):00878                 LBSR    PUTCHR      Display
E726 8D19             (        mon09.asm):00879                 BSR     GETAD1      Get second address
E728 2786             (        mon09.asm):00880                 BEQ     DLEOF       Normal data
E72A 8120             (        mon09.asm):00881                 CMPA    #' '        Space?
E72C 2610             (        mon09.asm):00882                 BNE     GETERR      No, report error
E72E 1700A5           (        mon09.asm):00883                 LBSR    WRMSG       Output message
E731 4646464600       (        mon09.asm):00884                 FCN     'FFFF'
E736 CCFFFF           (        mon09.asm):00885                 LDD     #$FFFF      Assume top of RAM
E739 39               (        mon09.asm):00886                 RTS
                      (        mon09.asm):00887         ;*
                      (        mon09.asm):00888         ;* GETS AN ADDRESS (IN D) FROM THE INPUT DEVICE
                      (        mon09.asm):00889         ;*
E73A                  (        mon09.asm):00890         GETADR
E73A 8D05             (        mon09.asm):00891                 BSR     GETAD1      Get word value
E73C 270F             (        mon09.asm):00892                 BEQ     GETAD2      Its OK
E73E                  (        mon09.asm):00893         GETERR
E73E 16FA95           (        mon09.asm):00894                 LBRA    ERROR       Report error
                      (        mon09.asm):00895         ;* Get word value without error checking
E741                  (        mon09.asm):00896         GETAD1
E741 8D3E             (        mon09.asm):00897                 BSR     GETBYT      Get HIGH byte
E743 2609             (        mon09.asm):00898                 BNE     GETAD3      Test for special register
E745 1F89             (        mon09.asm):00899                 TFR     A,B     Copy for later
E747 8D38             (        mon09.asm):00900                 BSR     GETBYT      Get LOW byte
E749 26F3             (        mon09.asm):00901                 BNE     GETERR      Report error
E74B 1E89             (        mon09.asm):00902                 EXG     A,B     Correct order
E74D                  (        mon09.asm):00903         GETAD2
E74D 39               (        mon09.asm):00904                 RTS
                      (        mon09.asm):00905         ;* Handle special register names
E74E                  (        mon09.asm):00906         GETAD3
E74E 3410             (        mon09.asm):00907                 PSHS    X       Save X
E750 BEBF0E           (        mon09.asm):00908                 LDX     SAVX        Assume X
E753 8158             (        mon09.asm):00909                 CMPA    #'X'        Is it X?
E755 271C             (        mon09.asm):00910                 BEQ     GETAD4      Yes
E757 BEBF10           (        mon09.asm):00911                 LDX     SAVY        Assume Y
E75A 8159             (        mon09.asm):00912                 CMPA    #'Y'        Is it Y?
E75C 2715             (        mon09.asm):00913                 BEQ     GETAD4      Yes
E75E BEBF12           (        mon09.asm):00914                 LDX     SAVU        Assume U
E761 8155             (        mon09.asm):00915                 CMPA    #'U'        Is it U?
E763 270E             (        mon09.asm):00916                 BEQ     GETAD4      Yes
E765 BEBF0E           (        mon09.asm):00917                 LDX     SAVX        Assume S
E768 8153             (        mon09.asm):00918                 CMPA    #'S'        Is it S?
E76A 2707             (        mon09.asm):00919                 BEQ     GETAD4      Yes
E76C BEBF14           (        mon09.asm):00920                 LDX     SAVPC       Assume PC?
E76F 8150             (        mon09.asm):00921                 CMPA    #'P'        Is it PC?
E771 260C             (        mon09.asm):00922                 BNE     GETAD5      No, error
E773                  (        mon09.asm):00923         GETAD4
E773 863D             (        mon09.asm):00924                 LDA     #'='        Separator
E775 1700A0           (        mon09.asm):00925                 LBSR    PUTCHR      Echo it
E778 1F10             (        mon09.asm):00926                 TFR     X,D     D = value
E77A 8D40             (        mon09.asm):00927                 BSR     WRDOUT      Display it
E77C 4F               (        mon09.asm):00928                 CLRA    Set 'Z'
E77D 1F10             (        mon09.asm):00929                 TFR     X,D     Get value back
E77F                  (        mon09.asm):00930         GETAD5
E77F 3590             (        mon09.asm):00931                 PULS    X,PC        Restore & return
                      (        mon09.asm):00932         ;*
                      (        mon09.asm):00933         ;* GETS A SINGLE BYTE (IN HEX) FROM THE INPUT DEVICE
                      (        mon09.asm):00934         ;*
E781                  (        mon09.asm):00935         GETBYT
E781 8D20             (        mon09.asm):00936                 BSR     GETNIB      Get FIRST nibble
E783 2611             (        mon09.asm):00937                 BNE     GETB3       Invalid, test for quote
E785 48               (        mon09.asm):00938                 LSLA    Rotate
E786 48               (        mon09.asm):00939                 LSLA    into
E787 48               (        mon09.asm):00940                 LSLA    high
E788 48               (        mon09.asm):00941                 LSLA    nibble
E789 3402             (        mon09.asm):00942                 PSHS    A       Save for later
E78B 8D16             (        mon09.asm):00943                 BSR     GETNIB      Get SECOND nibble
E78D 2604             (        mon09.asm):00944                 BNE     GETB2       Report error
E78F AAE4             (        mon09.asm):00945                 ORA     ,S      Include high
E791                  (        mon09.asm):00946         GETB4
E791 1A04             (        mon09.asm):00947                 ORCC    #$04        Indicate success (SET 'Z')
E793                  (        mon09.asm):00948         GETB2
E793 3261             (        mon09.asm):00949                 LEAS    1,S     Skip saved value
E795                  (        mon09.asm):00950         GETB1
E795 39               (        mon09.asm):00951                 RTS
E796                  (        mon09.asm):00952         GETB3
E796 8127             (        mon09.asm):00953                 CMPA    #$27        Single quote?
E798 26FB             (        mon09.asm):00954                 BNE     GETB1       No, abort
E79A 170070           (        mon09.asm):00955                 LBSR    GETCHR      Get ASCII character
E79D 170078           (        mon09.asm):00956                 LBSR    PUTCHR      Echo on terminal
E7A0 1A04             (        mon09.asm):00957                 ORCC    #$04        Indicate success (SET 'Z')
E7A2 39               (        mon09.asm):00958                 RTS
                      (        mon09.asm):00959         ;*
                      (        mon09.asm):00960         ;* GETS A SINGLE HEX NIBBLE FROM THE INPUT DEVICE
                      (        mon09.asm):00961         ;*
E7A3                  (        mon09.asm):00962         GETNIB
E7A3 170047           (        mon09.asm):00963                 LBSR    GETECH      Get character
E7A6 8030             (        mon09.asm):00964                 SUBA    #'0'        Convert numbers
E7A8 8109             (        mon09.asm):00965                 CMPA    #9      Numeric?
E7AA 230A             (        mon09.asm):00966                 BLS     GETN1       Yes, OK
E7AC 8007             (        mon09.asm):00967                 SUBA    #7      Convert alphas
E7AE 810A             (        mon09.asm):00968                 CMPA    #$A     Under?
E7B0 2507             (        mon09.asm):00969                 BLO     GETN2       Yer, error
E7B2 810F             (        mon09.asm):00970                 CMPA    #$F     Over?
E7B4 2203             (        mon09.asm):00971                 BHI     GETN2       Yes, error
E7B6                  (        mon09.asm):00972         GETN1
E7B6 1A04             (        mon09.asm):00973                 ORCC    #$04        SET 'Z' FLAG, INDICATE OK
E7B8 39               (        mon09.asm):00974                 RTS
E7B9                  (        mon09.asm):00975         GETN2
E7B9 8B37             (        mon09.asm):00976                 ADDA    #$37        Normalize character + clear Z
E7BB 39               (        mon09.asm):00977                 RTS
                      (        mon09.asm):00978         ;*
                      (        mon09.asm):00979         ;* OUTPUT A WORD (IN HEX) FROM REGISTER D
                      (        mon09.asm):00980         ;*
E7BC                  (        mon09.asm):00981         WRDOUT
E7BC 8D02             (        mon09.asm):00982                 BSR     HEXOUT      Output first byte
E7BE 1F98             (        mon09.asm):00983                 TFR     B,A     Get second byte
                      (        mon09.asm):00984         ;*
                      (        mon09.asm):00985         ;* OUTPUT A BYTE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00986         ;*
E7C0                  (        mon09.asm):00987         HEXOUT
E7C0 3402             (        mon09.asm):00988                 PSHS    A       Save low nibble
E7C2 44               (        mon09.asm):00989                 LSRA    Rotate
E7C3 44               (        mon09.asm):00990                 LSRA    upper nibble
E7C4 44               (        mon09.asm):00991                 LSRA    into
E7C5 44               (        mon09.asm):00992                 LSRA    lower nibble
E7C6 8D02             (        mon09.asm):00993                 BSR     HOUT        Output high nibble
E7C8 3502             (        mon09.asm):00994                 PULS    A       Rertore low nibble
                      (        mon09.asm):00995         ;*
                      (        mon09.asm):00996         ;* OUTPUT A NIBBLE (IN HEX) FROM REGISTER A
                      (        mon09.asm):00997         ;*
E7CA                  (        mon09.asm):00998         HOUT:
E7CA 840F             (        mon09.asm):00999                 ANDA    #$0F                              ; Remove upper half
E7CC 8B30             (        mon09.asm):01000                 ADDA    #'0'                              ; Convert to printable
E7CE 8139             (        mon09.asm):01001                 CMPA    #'9'                              ; In range?
E7D0 2302             (        mon09.asm):01002                 BLS     HOUT1                             ; Yes, display
E7D2 8B07             (        mon09.asm):01003                 ADDA    #7                                ;Convert to alpha
E7D4                  (        mon09.asm):01004         HOUT1:
E7D4 2042             (        mon09.asm):01005                 BRA     PUTCHR                            ; Output character
                      (        mon09.asm):01006         ;*
                      (        mon09.asm):01007         ;* WRITE ERROR MESSAGE FOLLOWING TEXT
                      (        mon09.asm):01008         ;*
E7D6                  (        mon09.asm):01009         WRMSG:
E7D6 3410             (        mon09.asm):01010                 PSHS    X                                 ;SAVE X
E7D8 AE62             (        mon09.asm):01011                 LDX     2,S                               ;GET OLD PC
E7DA 8D04             (        mon09.asm):01012                 BSR     WRLIN                             ;OUTPUT LINE
E7DC AF62             (        mon09.asm):01013                 STX     2,S                               ;UPDATE OLD PC
E7DE 3590             (        mon09.asm):01014                 PULS    X,PC                              ;RESTORE X, RETURN
                      (        mon09.asm):01015         ;*
                      (        mon09.asm):01016         ;* DISPLAY MESSAGE(X)
                      (        mon09.asm):01017         ;*
E7E0                  (        mon09.asm):01018         WRLIN:
E7E0 A680             (        mon09.asm):01019                 LDA     ,X+                               ;GET CHAR FROM MESSAGE
E7E2 2708             (        mon09.asm):01020                 BEQ     WRLND                             ;END, QUIT
E7E4 81FF             (        mon09.asm):01021                 CMPA    #$FF                              ;NEWLINE END, LFCR & EXIT
E7E6 2719             (        mon09.asm):01022                 BEQ     LFCR                              ;IF SO, NEW LINE, RETURN
E7E8 8D2E             (        mon09.asm):01023                 BSR     PUTCHR                            ;OUTPUT TO TERM
E7EA 20F4             (        mon09.asm):01024                 BRA     WRLIN                             ;KEEP GOING
E7EC                  (        mon09.asm):01025         WRLND
E7EC 39               (        mon09.asm):01026                 RTS
                      (        mon09.asm):01027         ;*
                      (        mon09.asm):01028         ;* GET CHAR. FROM TERMINAL, AND ECHO
                      (        mon09.asm):01029         ;*
E7ED                  (        mon09.asm):01030         GETECH:
E7ED 8D1E             (        mon09.asm):01031                 BSR     GETCHR                            ;GET CHARACTER
E7EF 8120             (        mon09.asm):01032                 CMPA    #' '                              ;SPACE?
E7F1 23F9             (        mon09.asm):01033                 BLS     WRLND                             ;IF < DON'T DISPLAY
E7F3 8161             (        mon09.asm):01034                 CMPA    #$61                              ;LOWER CASE?
E7F5 2521             (        mon09.asm):01035                 BLO     PUTCHR                            ;OK
E7F7 845F             (        mon09.asm):01036                 ANDA    #$5F                              ;CONVERT TO UPPER
E7F9 201D             (        mon09.asm):01037                 BRA     PUTCHR                            ;ECHO
                      (        mon09.asm):01038         ;*
                      (        mon09.asm):01039         ;* DISPLAY A SPACE ON THE TERMINAL
                      (        mon09.asm):01040         ;*
E7FB                  (        mon09.asm):01041         SPACE:
E7FB 3402             (        mon09.asm):01042                 PSHS    A                                 ;SAVE A
E7FD 8620             (        mon09.asm):01043                 LDA     #' '                              ;GET SPACE
E7FF 2008             (        mon09.asm):01044                 BRA     LFC1                              ;DISLAY AND GO HOME
                      (        mon09.asm):01045         ;*
                      (        mon09.asm):01046         ;* DISPLAY LINE-FEED, CARRIAGE RETURN ON TERMINAL
                      (        mon09.asm):01047         ;*
E801                  (        mon09.asm):01048         LFCR:
E801 3402             (        mon09.asm):01049                 PSHS    A                                 ;SAVE
E803 860A             (        mon09.asm):01050                 LDA     #$0A                              ;GET LF
E805 8D11             (        mon09.asm):01051                 BSR     PUTCHR                            ;OUTPUT
E807 860D             (        mon09.asm):01052                 LDA     #$0D                              ;GET CR
E809                  (        mon09.asm):01053         LFC1:
E809 8D0D             (        mon09.asm):01054                 BSR     PUTCHR                            ;OUTPUT
E80B 3582             (        mon09.asm):01055                 PULS    A,PC                              ;RESTORE AND GO HOME
                      (        mon09.asm):01056         ;*
                      (        mon09.asm):01057         ;* READ A CHARACTER FROM SELECTED INPUT DEVICE
                      (        mon09.asm):01058         ;*
E80D                  (        mon09.asm):01059         GETCHR:
E80D 3410             (        mon09.asm):01060                 PSHS    X                                 ;SAVE 'X'
E80F                  (        mon09.asm):01061         GETC1:
E80F 170E1F           (        mon09.asm):01062                 LBSR    READ                              ;READ TERMINAL
E812 81FF             (        mon09.asm):01063                 CMPA    #$FF
E814 27F9             (        mon09.asm):01064                 BEQ     GETC1                             ;KEEP TRYING
E816 3590             (        mon09.asm):01065                 PULS    X,PC
                      (        mon09.asm):01066         ;*
                      (        mon09.asm):01067         ;* WRITE A CHARACTER TO ALL ENABLED OUTPUT DEVICES
                      (        mon09.asm):01068         ;*
E818                  (        mon09.asm):01069         PUTCHR:
E818 3416             (        mon09.asm):01070                 PSHS    A,B,X                             ;SAVE REGS
E81A 170E24           (        mon09.asm):01071                 LBSR    WRITE                             ;OUTPUT TO TERMINAL
E81D 3596             (        mon09.asm):01072                 PULS    A,B,X,PC                          ;RESTORE AND GO HOME
                      (        mon09.asm):01073         ;*
                      (        mon09.asm):01074         ;* CHECK FOR <ESC> FROM TERMINAL. ALSO PERFORM <SPACE>, <CR>
                      (        mon09.asm):01075         ;* SCREEN OUTPUT FLOW CONTROL.
                      (        mon09.asm):01076         ;*
E81F                  (        mon09.asm):01077         CHKCHR:
E81F 3410             (        mon09.asm):01078                 PSHS    X                                 ;SAVE PTR
E821 170E0D           (        mon09.asm):01079                 LBSR    READ                              ;READ TERMINAL
E824 8120             (        mon09.asm):01080                 CMPA    #' '                              ;SPACE?
E826 2613             (        mon09.asm):01081                 BNE     CHKC3                             ;NO, IGNORE IT
E828                  (        mon09.asm):01082         CHKC1:
E828 CA80             (        mon09.asm):01083                 ORB     #%10000000                        ;SET HELD BIT
E82A 170E04           (        mon09.asm):01084                 LBSR    READ                              ;GET KEY FROM CONSOLE
E82D 8120             (        mon09.asm):01085                 CMPA    #' '                              ;SPACE?
E82F 270A             (        mon09.asm):01086                 BEQ     CHKC3                             ;YES, ALLOW
E831 C47F             (        mon09.asm):01087                 ANDB    #%01111111                        ;DISABLE HELD BIT
E833 810D             (        mon09.asm):01088                 CMPA    #$0D                              ;CARRIAGE RETURN?
E835 2704             (        mon09.asm):01089                 BEQ     CHKC3                             ;ALLOW
E837 811B             (        mon09.asm):01090                 CMPA    #$1B                              ;ESCAPE?
E839 26ED             (        mon09.asm):01091                 BNE     CHKC1                             ;NO, IGNORE
E83B                  (        mon09.asm):01092         CHKC3:
E83B 811B             (        mon09.asm):01093                 CMPA    #$1B                              ;TEST FOR ESCAPE CHARACTER
E83D 3590             (        mon09.asm):01094                 PULS    X,PC
                      (        mon09.asm):01095         ;*
                      (        mon09.asm):01096         ;* STEP ONE INSTRUCTION
                      (        mon09.asm):01097         ;*
E83F                  (        mon09.asm):01098         STEPDI:
E83F 10BEBF14         (        mon09.asm):01099                 LDY     SAVPC                             ;GET PC
E843 CEBF37           (        mon09.asm):01100                 LDU     #DSPBUF                           ;GET INPUT BUFFER
E846 170265           (        mon09.asm):01101                 LBSR    DISASS                            ;DISPLAY
E849 1F31             (        mon09.asm):01102                 TFR     U,X                               ;POINT TO IT
E84B 17FF92           (        mon09.asm):01103                 LBSR    WRLIN                             ;DISPLAY
E84E 200A             (        mon09.asm):01104                 BRA     STEPCE                            ;AND PERFORM STEP
                      (        mon09.asm):01105         ;*
                      (        mon09.asm):01106         ;* STEP WITHOUT DISPLAYING INSTRUCTION
                      (        mon09.asm):01107         ;*
E850                  (        mon09.asm):01108         STEP:
E850 10BEBF14         (        mon09.asm):01109                 LDY     SAVPC                             ;GET PROGRAM COUNTER
E854 CEBF37           (        mon09.asm):01110                 LDU     #DSPBUF                           ;POINT TO FREE RAM FOR DISASEMBLY OUTPUT
E857 170254           (        mon09.asm):01111                 LBSR    DISASS                            ;PERFORM DISASSEMBLY
E85A                  (        mon09.asm):01112         STEPCE:
E85A 10BFBF14         (        mon09.asm):01113                 STY     SAVPC                             ;SAVE NEW PC
E85E FEBF1B           (        mon09.asm):01114                 LDU     PTRSAV                            ;GET POINTER BACK
E861 ECC0             (        mon09.asm):01115                 LDD     ,U+                               ;GET OPCODE
                      (        mon09.asm):01116         ;* TEST FOR LONG CONDITIONAL BRANCHES
E863                  (        mon09.asm):01117         LCBRAN:
E863 8110             (        mon09.asm):01118                 CMPA    #$10                              ;PREFIX?
E865 2612             (        mon09.asm):01119                 BNE     LOBRAN                            ;NO, GOT FOR IT
E867 E6C4             (        mon09.asm):01120                 LDB     ,U                                ;GET OPCODE
E869 C122             (        mon09.asm):01121                 CMPB    #$22                              ;IN RANGE?
E86B 250C             (        mon09.asm):01122                 BLO     LOBRAN                            ;NO
E86D C12F             (        mon09.asm):01123                 CMPB    #$2F                              ;IN RANGE?
E86F 2208             (        mon09.asm):01124                 BHI     LOBRAN                            ;NO
E871 A6C0             (        mon09.asm):01125                 LDA     ,U+                               ;GET OPCOIDE BYTE
E873 170216           (        mon09.asm):01126                 LBSR    TSTCON                            ;TEST CONDITIONAL
E876 2705             (        mon09.asm):01127                 BEQ     LBRAN1                            ;YES, DO IT
E878 39               (        mon09.asm):01128                 RTS
                      (        mon09.asm):01129         ;* TEST FOR LONG BRANCHES
E879                  (        mon09.asm):01130         LOBRAN:
E879 8116             (        mon09.asm):01131                 CMPA    #$16                              ;IS IT LBRA?
E87B 2606             (        mon09.asm):01132                 BNE     LBRANS                            ;NO, TRY LBSR
E87D                  (        mon09.asm):01133         LBRAN1:
E87D ECC1             (        mon09.asm):01134                 LDD     ,U++                              ;GET OFFSET
E87F 30CB             (        mon09.asm):01135                 LEAX    D,U                               ;PERFORM BRANCH
E881 2034             (        mon09.asm):01136                 BRA     SAVNPC                            ;SAVE NEW PC
                      (        mon09.asm):01137         ;* TEST FOR LONG BRANCH TO SUB
E883                  (        mon09.asm):01138         LBRANS:
E883 8117             (        mon09.asm):01139                 CMPA    #$17                              ;'LBSR'?
E885 2606             (        mon09.asm):01140                 BNE     SCOBRA                            ;NO, TRY SHORT CONDITIONALS
E887 ECC1             (        mon09.asm):01141                 LDD     ,U++                              ;GET OFFSET
E889 30CB             (        mon09.asm):01142                 LEAX    D,U                               ;SET UP ADDRESS
E88B 2020             (        mon09.asm):01143                 BRA     SAVSTK
                      (        mon09.asm):01144         ;* TEST FOR SHORT CONDITIONAL BRANCHES
E88D                  (        mon09.asm):01145         SCOBRA:
E88D 8122             (        mon09.asm):01146                 CMPA    #$22                              ;< 'BHI'?
E88F 250A             (        mon09.asm):01147                 BLO     SHBRAN                            ;NO, TRY SHORT BRANCHES
E891 812F             (        mon09.asm):01148                 CMPA    #$2F                              ;> 'BLE'?
E893 2206             (        mon09.asm):01149                 BHI     SHBRAN                            ;NO, TRY SHORT BRANCHES
E895 1701F4           (        mon09.asm):01150                 LBSR    TSTCON                            ;SEE OF CONDITIONAL IS OK
E898 2705             (        mon09.asm):01151                 BEQ     SBRAN1                            ;YES, DO IT
E89A 39               (        mon09.asm):01152                 RTS
                      (        mon09.asm):01153         ;* TEST FOR SHORT BRANCHES
E89B                  (        mon09.asm):01154         SHBRAN:
E89B 8120             (        mon09.asm):01155                 CMPA    #$20                              ; SHORT BRANCH?
E89D 2606             (        mon09.asm):01156                 BNE     SBRANS                            ; NO, TRY SHORT BRANCH TO SUB
E89F                  (        mon09.asm):01157         SBRAN1
E89F E6C0             (        mon09.asm):01158                 LDB     ,U+     GET OFFSET
E8A1 30C5             (        mon09.asm):01159                 LEAX    B,U     EMULATE JUMP
E8A3 2012             (        mon09.asm):01160                 BRA     SAVNPC      SAVE NEW PC
                      (        mon09.asm):01161         ;* TEST FOR SHORT BRANCH TO SUBROUTINE
E8A5                  (        mon09.asm):01162         SBRANS
E8A5 818D             (        mon09.asm):01163                 CMPA    #$8D        'BSR'?
E8A7 2612             (        mon09.asm):01164                 BNE     TSTTFR      NO, TRY TRANSFER
E8A9 E6C0             (        mon09.asm):01165                 LDB     ,U+     GET OFFSET
E8AB 30C5             (        mon09.asm):01166                 LEAX    B,U     PERFORM BRANCH
E8AD                  (        mon09.asm):01167         SAVSTK
E8AD 10BEBF16         (        mon09.asm):01168                 LDY     SAVS        GET STACK POINTER
E8B1 EFA3             (        mon09.asm):01169                 STU     ,--Y        PUSH ADDRESS
E8B3 10BFBF16         (        mon09.asm):01170                 STY     SAVS        RESAVE
E8B7                  (        mon09.asm):01171         SAVNPC
E8B7 BFBF14           (        mon09.asm):01172                 STX     SAVPC       SAVE IT
E8BA 39               (        mon09.asm):01173                 RTS
                      (        mon09.asm):01174         ;* TEST FOR TRANSFER
E8BB                  (        mon09.asm):01175         TSTTFR
E8BB 811F             (        mon09.asm):01176                 CMPA    #$1F        TRANSFER?
E8BD 2620             (        mon09.asm):01177                 BNE     TSTEXG      NO, TRY EXCHANGE
E8BF 8D01             (        mon09.asm):01178                 BSR     LOKREG      LOOKUP REGISTER
E8C1 39               (        mon09.asm):01179                 RTS
                      (        mon09.asm):01180         ;* LOOKUP REGISTER, AND SIMULATE IF PC XFER OR EXCHANGE
E8C2                  (        mon09.asm):01181         LOKREG
E8C2 A6C4             (        mon09.asm):01182                 LDA     ,U      GET POSTBYTE
E8C4 840F             (        mon09.asm):01183                 ANDA    #$0F        REMOVE HIGH REGISTER
E8C6 8105             (        mon09.asm):01184                 CMPA    #5      IS IT PC?
E8C8 2610             (        mon09.asm):01185                 BNE     LOK1                              ;NO, IT'S OK TO EXECUTE
E8CA A6C4             (        mon09.asm):01186                 LDA     ,U      GET REG POSTBYTE BACK
E8CC 44               (        mon09.asm):01187                 LSRA    SHIFT
E8CD 44               (        mon09.asm):01188                 LSRA    HIGH REGISTER
E8CE 44               (        mon09.asm):01189                 LSRA    TO LOW (LEAVE X 2)
E8CF                  (        mon09.asm):01190         LOK2
E8CF 8EF335           (        mon09.asm):01191                 LDX     #TFREGT     POINT TO TABLE
E8D2 840F             (        mon09.asm):01192                 ANDA    #$0F        INSURE WE GET VALID REG
E8D4 AE86             (        mon09.asm):01193                 LDX     A,X     GET ADDRESS OF VARIABLE
E8D6 EC84             (        mon09.asm):01194                 LDD     ,X      GET REGISTER VALUE
E8D8 202E             (        mon09.asm):01195                 BRA     STDPC       SAVE IT
E8DA                  (        mon09.asm):01196         LOK1
E8DA 3262             (        mon09.asm):01197                 LEAS    2,S     SKIP LAST CALL
E8DC 160151           (        mon09.asm):01198                 LBRA    NOREXE      EXECUTE NORMAL INSTRUCTION
                      (        mon09.asm):01199         ;* TEST FOR EXCHANGE
E8DF                  (        mon09.asm):01200         TSTEXG
E8DF 811E             (        mon09.asm):01201                 CMPA    #$1E        IS IT EXCHANGE
E8E1 2619             (        mon09.asm):01202                 BNE     TSTRTS      NO, TRY RTS
E8E3 10BEBF14         (        mon09.asm):01203                 LDY     SAVPC       GET OLD PC VALUE
E8E7 A6C4             (        mon09.asm):01204                 LDA     ,U      GET REGISTER
E8E9 84F0             (        mon09.asm):01205                 ANDA    #$F0        USE HIGH ONLY
E8EB 8150             (        mon09.asm):01206                 CMPA    #$50        IS PC FIRST?
E8ED 2607             (        mon09.asm):01207                 BNE     TSTE1       NO, SKIP
E8EF A6C4             (        mon09.asm):01208                 LDA     ,U      GET REG BACK
E8F1 48               (        mon09.asm):01209                 LSLA    DOUBLE
E8F2 8DDB             (        mon09.asm):01210                 BSR     LOK2        GET ADDRESS OF REG TO SWAP WITH
E8F4 2002             (        mon09.asm):01211                 BRA     TSTE2       PERFORM MOVE TO PC
E8F6                  (        mon09.asm):01212         TSTE1
E8F6 8DCA             (        mon09.asm):01213                 BSR     LOKREG      GET REGISTER SEE IF PC IS LOW REGISTER
E8F8                  (        mon09.asm):01214         TSTE2
E8F8 10AF84           (        mon09.asm):01215                 STY     ,X      SAVE PC IN REGISTER
E8FB 39               (        mon09.asm):01216                 RTS
                      (        mon09.asm):01217         ;* TEST FOR 'RTS' INSTRUCTIONS
E8FC                  (        mon09.asm):01218         TSTRTS
E8FC 8139             (        mon09.asm):01219                 CMPA    #$39        IS IT 'RTS'
E8FE 260C             (        mon09.asm):01220                 BNE     TPULS       NO, TRY PULS
E900 FEBF16           (        mon09.asm):01221                 LDU     SAVS        POINT TO STACK
E903 3706             (        mon09.asm):01222                 PULU    A,B     GET DATA
E905 FFBF16           (        mon09.asm):01223                 STU     SAVS        RESAVE SP
E908                  (        mon09.asm):01224         STDPC
E908 FDBF14           (        mon09.asm):01225                 STD     SAVPC
E90B 39               (        mon09.asm):01226                 RTS
                      (        mon09.asm):01227         ;* TEST FOR 'PULS' INSTRUCTION
E90C                  (        mon09.asm):01228         TPULS
E90C 8135             (        mon09.asm):01229                 CMPA    #$35        PULLING FROM S?
E90E 260D             (        mon09.asm):01230                 BNE     TPULU       NO, TRY PULU
E910 BEBF16           (        mon09.asm):01231                 LDX     SAVS        GET SAVED 'S' REG
E913 108EF341         (        mon09.asm):01232                 LDY     #PULSTAB    POINT TO TABLE
E917 8D15             (        mon09.asm):01233                 BSR     DOPUL       PERFORM PULL
E919 BFBF16           (        mon09.asm):01234                 STX     SAVS        RESAVE NEW 'S' REGISTER
E91C 39               (        mon09.asm):01235                 RTS
                      (        mon09.asm):01236         ;* TEST FOR A 'PULU' INSTRUCTION
E91D                  (        mon09.asm):01237         TPULU
E91D 8137             (        mon09.asm):01238                 CMPA    #$37        IS IT 'PULU'?
E91F 262E             (        mon09.asm):01239                 BNE     JSREXT      NO, TRY JSR EXTENDED
E921 BEBF12           (        mon09.asm):01240                 LDX     SAVU        GET SAVED 'U'
E924 108EF351         (        mon09.asm):01241                 LDY     #PULUTAB    POINT TO TABLE
E928 8D04             (        mon09.asm):01242                 BSR     DOPUL       PERFORM PULL
E92A BFBF12           (        mon09.asm):01243                 STX     SAVU        RESAVE 'S'
E92D 39               (        mon09.asm):01244                 RTS
                      (        mon09.asm):01245         ;* PERFORM PUL OPERATIONS
E92E                  (        mon09.asm):01246         DOPUL
E92E A6C4             (        mon09.asm):01247                 LDA     ,U      GET POSTBYTE
E930 C604             (        mon09.asm):01248                 LDB     #4      TEST FOR FIRST FOUR BITS (8 BIT REG)
E932                  (        mon09.asm):01249         DOPUL1
E932 5A               (        mon09.asm):01250                 DECB    DECREMENT COUNT
E933 44               (        mon09.asm):01251                 LSRA    SHIFT
E934 2413             (        mon09.asm):01252                 BCC     DOPUL2      NOTHING, GO AGAIN
E936 3406             (        mon09.asm):01253                 PSHS    A,B     SAVE REGS
E938 5D               (        mon09.asm):01254                 TSTB    ARE WE INTO 16 BITS?
E939 2B06             (        mon09.asm):01255                 BMI     PUL16       YES, PERFORM 16 BITS
E93B A680             (        mon09.asm):01256                 LDA     ,X+     PULL A BYTE
E93D A7B1             (        mon09.asm):01257                 STA     [,Y++]      SAVE IN REGISTER
E93F 2004             (        mon09.asm):01258                 BRA     DOPUL3      GO AGAIN
E941                  (        mon09.asm):01259         PUL16
E941 EC81             (        mon09.asm):01260                 LDD     ,X++        GET 16 BIT VALUE
E943 EDB1             (        mon09.asm):01261                 STD     [,Y++]      SAVE IN REGISTER
E945                  (        mon09.asm):01262         DOPUL3
E945 3506             (        mon09.asm):01263                 PULS    A,B     RESTORE
E947 20E9             (        mon09.asm):01264                 BRA     DOPUL1      CONTINUE
E949                  (        mon09.asm):01265         DOPUL2
E949 3122             (        mon09.asm):01266                 LEAY    2,Y     ADVANCE
E94B 4D               (        mon09.asm):01267                 TSTA    ARE WE CONE
E94C 26E4             (        mon09.asm):01268                 BNE     DOPUL1      CONTINUE
E94E 39               (        mon09.asm):01269                 RTS
                      (        mon09.asm):01270         ;* TEST FOR 'JSR' EXTENDED
E94F                  (        mon09.asm):01271         JSREXT
E94F 81BD             (        mon09.asm):01272                 CMPA    #$BD        IS IT EXTENDED JSR
E951 2604             (        mon09.asm):01273                 BNE     JMPEXT      NO, TRY JUMP EXTENDED
E953 8D06             (        mon09.asm):01274                 BSR     DJMPEX      FAKE JUMP
E955 2021             (        mon09.asm):01275                 BRA     PSHPC       SAVE PC
                      (        mon09.asm):01276         ;* TEST FOR 'JMP' EXTENDED
E957                  (        mon09.asm):01277         JMPEXT
E957 817E             (        mon09.asm):01278                 CMPA    #$7E        IS IT JMP EXTENDED?
E959 2604             (        mon09.asm):01279                 BNE     JSRDIR      NO, TRY JMP DIRECT
E95B                  (        mon09.asm):01280         DJMPEX
E95B ECC1             (        mon09.asm):01281                 LDD     ,U++        GET ADDRESS
E95D 20A9             (        mon09.asm):01282                 BRA     STDPC       SAVE IT
                      (        mon09.asm):01283         ;* TEST FOR 'JSR' DIRECT
E95F                  (        mon09.asm):01284         JSRDIR
E95F 819D             (        mon09.asm):01285                 CMPA    #$9D        'JSR' DIRECT PAGE?
E961 2604             (        mon09.asm):01286                 BNE     JMPDIR      NO, TRY JUMP
E963 8D06             (        mon09.asm):01287                 BSR     DJMPDI      DO IT
E965 2011             (        mon09.asm):01288                 BRA     PSHPC       SAVE PC
                      (        mon09.asm):01289         ;* TEST FOR 'JMP' DIRECT PAGE
E967                  (        mon09.asm):01290         JMPDIR
E967 810E             (        mon09.asm):01291                 CMPA    #$0E        IS IT JUMP DIRECT PAGE?
E969 2607             (        mon09.asm):01292                 BNE     JSRIND      NO, TRY JUMP INDEXED
E96B                  (        mon09.asm):01293         DJMPDI
E96B E6C0             (        mon09.asm):01294                 LDB     ,U+     GET LOW ADDRESS
E96D B6BF0D           (        mon09.asm):01295                 LDA     SAVDP       GET DIRECT PAGE
E970 2096             (        mon09.asm):01296                 BRA     STDPC       SAVE IT
                      (        mon09.asm):01297         ;* TEST FOR 'JSR' INDEXED
E972                  (        mon09.asm):01298         JSRIND
E972 81AD             (        mon09.asm):01299                 CMPA    #$AD        IS IT 'JSR' INDEXED?
E974 260B             (        mon09.asm):01300                 BNE     JMPIND      NO, TRY NEXT
E976 8D0F             (        mon09.asm):01301                 BSR     DJMPIN      DO IT
E978                  (        mon09.asm):01302         PSHPC
E978 BEBF16           (        mon09.asm):01303                 LDX     SAVS        GET ADDRESS
E97B EF83             (        mon09.asm):01304                 STU     ,--X        SAVE
E97D BFBF16           (        mon09.asm):01305                 STX     SAVS        RESAVE
E980 39               (        mon09.asm):01306                 RTS
                      (        mon09.asm):01307         ;* TEST FOR 'JMP' INDEXED
E981                  (        mon09.asm):01308         JMPIND
E981 816E             (        mon09.asm):01309                 CMPA    #$6E        IS IT JUMP INDEXED?
E983 102600A9         (        mon09.asm):01310                 LBNE    NOREXE      NO, NON-TRANSFER INSTRUCTION
                      (        mon09.asm):01311         ;* FIRST POINT Y AT REGISTER INVOLVED
E987                  (        mon09.asm):01312         DJMPIN:
E987 A6C0             (        mon09.asm):01313                 LDA     ,U+                               ;GET POSTBYTE
E989 3402             (        mon09.asm):01314                 PSHS    A                                 ;SAVE IT
E98B 8460             (        mon09.asm):01315                 ANDA    #%01100000                        ;SAVE ONLY REGISTER
E98D 44               (        mon09.asm):01316                 LSRA                                      ;CONVERT
E98E 44               (        mon09.asm):01317                 LSRA                                      ;REGISTER
E98F 44               (        mon09.asm):01318                 LSRA                                      ;INTO INDEX VALUE
E990 44               (        mon09.asm):01319                 LSRA                                      ;SHIFT IT OVER
E991 8EF337           (        mon09.asm):01320                 LDX     #INDTAB                           ;POINT TO TABLE
E994 10AE86           (        mon09.asm):01321                 LDY     A,X                               ;GET REGISTER ADDRESS
E997 10BFBF18         (        mon09.asm):01322                 STY     TEMP                              ; SAVE FOR INC/DEC
E99B 10AEA4           (        mon09.asm):01323                 LDY     ,Y                                ;GET REGISTER CONTENTS
E99E A6E4             (        mon09.asm):01324                 LDA     ,S                                ;GET POSTBYTE BACK
E9A0 2B0C             (        mon09.asm):01325                 BMI     NOT5BO                            ;NOT A FIVE BIT OFFSET
                      (        mon09.asm):01326         ;* FIVE BIT REGISTER OFFSET
E9A2 841F             (        mon09.asm):01327                 ANDA    #%00011111                        ;SAVE ONLY OFFSET
E9A4 8110             (        mon09.asm):01328                 CMPA    #%00010000                        ;NEGATIVE?
E9A6 2502             (        mon09.asm):01329                 BLO     SINOK                             ;NO, ITS OK
E9A8 8AE0             (        mon09.asm):01330                 ORA     #%11100000                        ;CONVERT TO NEGATIVE
E9AA                  (        mon09.asm):01331         SINOK:
E9AA 30A6             (        mon09.asm):01332                 LEAX    A,Y                               ;GET ADDRESS
E9AC 205E             (        mon09.asm):01333                 BRA     XSAVPC                            ;SAVE IT
                      (        mon09.asm):01334         ;* TEST FOR NO OFFSET
E9AE                  (        mon09.asm):01335         NOT5BO:
E9AE 848F             (        mon09.asm):01336                 ANDA    #%10001111                        ;REMOVE REGISTER & INDIRECT BIT
E9B0 8184             (        mon09.asm):01337                 CMPA    #$84                              ;NO OFFSET?
E9B2 2604             (        mon09.asm):01338                 BNE     TOFF8                             ;NO, TRY OFFSET OF 8
E9B4 1F21             (        mon09.asm):01339                 TFR     Y,X                               ;COPY
E9B6 2054             (        mon09.asm):01340                 BRA     XSAVPC                            ;SAVE IT
                      (        mon09.asm):01341         ;* TEST FOR EIGHT BIT OFFSET
E9B8                  (        mon09.asm):01342         TOFF8:
E9B8 8188             (        mon09.asm):01343                 CMPA    #$88        8 BIT OFSET?
E9BA 2604             (        mon09.asm):01344                 BNE     TOFF16      NO, TRY 16 BIT OFFSET
E9BC E6C0             (        mon09.asm):01345                 LDB     ,U+     GET OFFSET
E9BE 201A             (        mon09.asm):01346                 BRA     BSAVOF      GO FOR IT
                      (        mon09.asm):01347         ;* TEST FOR 16 BIT OFFSET
E9C0                  (        mon09.asm):01348         TOFF16
E9C0 8189             (        mon09.asm):01349                 CMPA    #$89        16 BIT OFFSET?
E9C2 2606             (        mon09.asm):01350                 BNE     TOFFA       TRY A ACCUMULATOR OFFSET
E9C4 ECC0             (        mon09.asm):01351                 LDD     ,U+     GET OFFSET
E9C6 30AB             (        mon09.asm):01352                 LEAX    D,Y     DO IT
E9C8 2042             (        mon09.asm):01353                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01354         ;* TEST FOR ACCA OFFSET
E9CA                  (        mon09.asm):01355         TOFFA
E9CA 8186             (        mon09.asm):01356                 CMPA    #$86        OFFSET BY ACCA
E9CC 2605             (        mon09.asm):01357                 BNE     TOFFB       NO, TRY B
E9CE F6BF0B           (        mon09.asm):01358                 LDB     SAVA        GET ACCA
E9D1 2007             (        mon09.asm):01359                 BRA     BSAVOF      SAVE IT
                      (        mon09.asm):01360         ;* TEST FOR ACCB OFFSET
E9D3                  (        mon09.asm):01361         TOFFB
E9D3 8185             (        mon09.asm):01362                 CMPA    #$85        B OFFSET
E9D5 2607             (        mon09.asm):01363                 BNE     TOFFD       NO, TRY D OFFSET
E9D7 F6BF0C           (        mon09.asm):01364                 LDB     SAVB        GET B
E9DA                  (        mon09.asm):01365         BSAVOF
E9DA 30A5             (        mon09.asm):01366                 LEAX    B,Y     DO OFFSET
E9DC 202E             (        mon09.asm):01367                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01368         ;* TEST FOR ACCD OFFSET
E9DE                  (        mon09.asm):01369         TOFFD
E9DE 818B             (        mon09.asm):01370                 CMPA    #$8B        IS IT D OFFSET?
E9E0 2607             (        mon09.asm):01371                 BNE     TAINC1      NO, TRY AUTO INC
E9E2 FCBF0B           (        mon09.asm):01372                 LDD     SAVA        GET D ACCUMULATOR
E9E5 30AB             (        mon09.asm):01373                 LEAX    D,Y     DO IT
E9E7 2023             (        mon09.asm):01374                 BRA     XSAVPC      SAVE IT
                      (        mon09.asm):01375         ;* TEST FOR AUTO INCREMENT
E9E9                  (        mon09.asm):01376         TAINC1
E9E9 8180             (        mon09.asm):01377                 CMPA    #$80        AUTO INC BY 1?
E9EB 2604             (        mon09.asm):01378                 BNE     TAINC2      NO, TRY AUTO INC BY 2
E9ED 30A0             (        mon09.asm):01379                 LEAX    ,Y+     GET ADDRESS
E9EF 2016             (        mon09.asm):01380                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01381         ;* TEST FOR DOUBLE AUTO INCREMENT
E9F1                  (        mon09.asm):01382         TAINC2
E9F1 8181             (        mon09.asm):01383                 CMPA    #$81        AUTO INC BY 1?
E9F3 2604             (        mon09.asm):01384                 BNE     TADEC1      NO, TRY AUTO DEC
E9F5 30A1             (        mon09.asm):01385                 LEAX    ,Y++        GET ADDRESS
E9F7 200E             (        mon09.asm):01386                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01387         ;* TEST FOR AUTO DECREMENT
E9F9                  (        mon09.asm):01388         TADEC1
E9F9 8182             (        mon09.asm):01389                 CMPA    #$82        AUTO DEC?
E9FB 2604             (        mon09.asm):01390                 BNE     TADEC2      NO, TRY AUTO DEC BY TWO
E9FD 30A2             (        mon09.asm):01391                 LEAX    ,-Y     GET ADDRESS
E9FF 2006             (        mon09.asm):01392                 BRA     RSVREG      RESAVE REGISTER
                      (        mon09.asm):01393         ;* TEST FOR DOUBLE AUTO DECREMENT
EA01                  (        mon09.asm):01394         TADEC2
EA01 8183             (        mon09.asm):01395                 CMPA    #$83        DOUBLE AUTO DEC.
EA03 2609             (        mon09.asm):01396                 BNE     TPCO8       NO, TRY PC OFFSET
EA05 30A3             (        mon09.asm):01397                 LEAX    ,--Y        GET OFFSET
EA07                  (        mon09.asm):01398         RSVREG
EA07 10AF9FBF18       (        mon09.asm):01399                 STY     [TEMP]      RESAVE REGISTER CONTENTS
EA0C                  (        mon09.asm):01400         XSAVPC
EA0C 2016             (        mon09.asm):01401                 BRA     SAVXPC      SAVE NEW PC
                      (        mon09.asm):01402         ;* TEST FOR EIGHT BIT OFFSET FROM PCR
EA0E                  (        mon09.asm):01403         TPCO8
EA0E 818C             (        mon09.asm):01404                 CMPA    #$8C        8 BIT PC RELATIVE?
EA10 2606             (        mon09.asm):01405                 BNE     TPCO16      NO, TRY 16 BIT PC RELATIVE
EA12 E6C0             (        mon09.asm):01406                 LDB     ,U+     GET BYTE
EA14 30C5             (        mon09.asm):01407                 LEAX    B,U     OFFSET IT
EA16 200C             (        mon09.asm):01408                 BRA     SAVXPC      RESAVE PC
                      (        mon09.asm):01409         ;* TEST FOR 16 BIT OFFSET FROM PCR
EA18                  (        mon09.asm):01410         TPCO16
EA18 818D             (        mon09.asm):01411                 CMPA    #$8D        16 BIT OFFSET
EA1A 2606             (        mon09.asm):01412                 BNE     TEIND       NO, TRY EXTENDED INDIRECT
EA1C ECC1             (        mon09.asm):01413                 LDD     ,U++        GET VALUE
EA1E 30CB             (        mon09.asm):01414                 LEAX    D,U     POINT TO NEW LOCATION
EA20 2002             (        mon09.asm):01415                 BRA     SAVXPC      RESAVE
                      (        mon09.asm):01416         ;* EXTENDED ADDRESSING VIA INDEXED POSTBYTE
EA22                  (        mon09.asm):01417         TEIND
EA22 AEC1             (        mon09.asm):01418                 LDX     ,U++        GET ADDRESS
                      (        mon09.asm):01419         ;* SET SAVED PC TO CALCULATED ADDRESS (IN 'X').
                      (        mon09.asm):01420         ;* CHECK FOR & PERFORM INDIRECTION IF R=IRED
EA24                  (        mon09.asm):01421         SAVXPC
EA24 3502             (        mon09.asm):01422                 PULS    A       RESTORE POSTBYTE
EA26 8510             (        mon09.asm):01423                 BITA    #%00010000  INDIRECT ADDRESSING?
EA28 2702             (        mon09.asm):01424                 BEQ     NINXIN      NOT INDIRECT
EA2A AE84             (        mon09.asm):01425                 LDX     ,X      PERFORM A LEVEL OF INDIRECTION
EA2C                  (        mon09.asm):01426         NINXIN
EA2C BFBF14           (        mon09.asm):01427                 STX     SAVPC       SAVE IT
EA2F 39               (        mon09.asm):01428                 RTS
                      (        mon09.asm):01429         ;* NORMAL EXECUTABLE INSTRUCTION, COPY IT INTO OUR RAM, THEN EXECUTE IT
EA30                  (        mon09.asm):01430         NOREXE
EA30 335F             (        mon09.asm):01431                 LEAU    -1,U        BACKUP TO INSTRUCTION
EA32 8EBF69           (        mon09.asm):01432                 LDX     #INSRAM     POINT TO RAM FOR INSTRUCTION
                      (        mon09.asm):01433         ;* COPY INSTRUCTION INTO RAM
EA35                  (        mon09.asm):01434         NORE1
EA35 11B3BF14         (        mon09.asm):01435                 CMPU    SAVPC       ARE WE THERE
EA39 2406             (        mon09.asm):01436                 BHS     NORE2       END OF INSTRUCTION
EA3B A6C0             (        mon09.asm):01437                 LDA     ,U+     GET DATA
EA3D A780             (        mon09.asm):01438                 STA     ,X+     SAVE IN RAM
EA3F 20F4             (        mon09.asm):01439                 BRA     NORE1       CONTINUE
                      (        mon09.asm):01440         ;* INSERT A JUMP AFTER IT
EA41                  (        mon09.asm):01441         NORE2
EA41 867E             (        mon09.asm):01442                 LDA     #$7E        GET 'JMP' EXTENDED INSTRUCTION
EA43 A780             (        mon09.asm):01443                 STA     ,X+     SAVE IT
EA45 CCEA6C           (        mon09.asm):01444                 LDD     #NORE3      POINT AT ADDRESS TO JUMP TO
EA48 ED84             (        mon09.asm):01445                 STD     ,X      SAVE IT
EA4A 10FFBF18         (        mon09.asm):01446                 STS     TEMP        SAVE SP
EA4E 10FEBF16         (        mon09.asm):01447                 LDS     SAVS        RESTORE STACK POINTER
EA52 B6BF0A           (        mon09.asm):01448                 LDA     SAVCC       GET CC
EA55 F6BF0D           (        mon09.asm):01449                 LDB     SAVDP       GET DP
EA58 3406             (        mon09.asm):01450                 PSHS    A,B     SAVE CC AND DP
EA5A FCBF0B           (        mon09.asm):01451                 LDD     SAVA        RESTORE A, B
EA5D BEBF0E           (        mon09.asm):01452                 LDX     SAVX        RESTORE X
EA60 10BEBF10         (        mon09.asm):01453                 LDY     SAVY        RESTORE Y
EA64 FEBF12           (        mon09.asm):01454                 LDU     SAVU        RESTORE U
EA67 3509             (        mon09.asm):01455                 PULS    CC,DP       RESTORE CC AND DP
EA69 7EBF69           (        mon09.asm):01456                 JMP     INSRAM      EXECUTE INSTRUCTION
                      (        mon09.asm):01457         ;* INSTRUCTION SHOULD RETURN TO HERE
EA6C                  (        mon09.asm):01458         NORE3
EA6C 3409             (        mon09.asm):01459                 PSHS    CC,DP       SAVE REGS
EA6E FDBF0B           (        mon09.asm):01460                 STD     SAVA        SAVE REGS
EA71 BFBF0E           (        mon09.asm):01461                 STX     SAVX        SAVE X
EA74 10BFBF10         (        mon09.asm):01462                 STY     SAVY        SAVE Y
EA78 FFBF12           (        mon09.asm):01463                 STU     SAVU        SAVE U
EA7B 3506             (        mon09.asm):01464                 PULS    A,B     GET REGS BACK
EA7D B7BF0A           (        mon09.asm):01465                 STA     SAVCC       SAVE CC
EA80 F7BF0D           (        mon09.asm):01466                 STB     SAVDP       SAVE DP
EA83 10FFBF16         (        mon09.asm):01467                 STS     SAVS        SAVE STACK POINTER
EA87 10FEBF18         (        mon09.asm):01468                 LDS     TEMP        RESTORE OUR STACK
EA8B 39               (        mon09.asm):01469                 RTS
                      (        mon09.asm):01470         ;*
                      (        mon09.asm):01471         ;* SUBROUTINE TO EVALUATE CONDITIONAL BRANCH OPCODES, AND DETERMINE
                      (        mon09.asm):01472         ;* IF THEY ARE TO BE EXECUTED
                      (        mon09.asm):01473         ;*
EA8C                  (        mon09.asm):01474         TSTCON
EA8C C603             (        mon09.asm):01475                 LDB     #3      TEST FOR THREE CONDITIONALS
EA8E 812F             (        mon09.asm):01476                 CMPA    #$2F        IS IT 'BLE'?
EA90 2602             (        mon09.asm):01477                 BNE     TSTC0       NO, ITS NORMAL
EA92 C606             (        mon09.asm):01478                 LDB     #6      HANDLE WRETCHED 'BLE' CASE
EA94                  (        mon09.asm):01479         TSTC0
EA94 8022             (        mon09.asm):01480                 SUBA    #$22        CONVERT OPCODE TO SIMPLE INDEX
EA96 48               (        mon09.asm):01481                 LSLA    ROTATE..
EA97 48               (        mon09.asm):01482                 LSLA    TWICE FOR FOUR BYTE ENTRIES
EA98 8EF2FA           (        mon09.asm):01483                 LDX     #CONTAB     POINT TO TABLE
EA9B 3086             (        mon09.asm):01484                 LEAX    A,X     ADVANCE TO TABLE ENTRY
EA9D B6BF0A           (        mon09.asm):01485                 LDA     SAVCC       GET CONDITION CODES
EAA0 A480             (        mon09.asm):01486                 ANDA    ,X+     MASK OUT NON-APPLICABLE ONES
EAA2                  (        mon09.asm):01487         TSTC1
EAA2 A180             (        mon09.asm):01488                 CMPA    ,X+     DOES IT MATCH?
EAA4 2706             (        mon09.asm):01489                 BEQ     TSTC2                             ;IT'S OK
EAA6 5A               (        mon09.asm):01490                 DECB    REDUCE COUNT
EAA7 26F9             (        mon09.asm):01491                 BNE     TSTC1       CONTINUE
EAA9 86FF             (        mon09.asm):01492                 LDA     #255        INDICATE CONDITIONAL NOT MET
EAAB 39               (        mon09.asm):01493                 RTS
EAAC                  (        mon09.asm):01494         TSTC2
EAAC 4F               (        mon09.asm):01495                 CLRA    INDICATE CONDITIONAL MET
EAAD 39               (        mon09.asm):01496                 RTS
                      (        mon09.asm):01497         ;*
                      (        mon09.asm):01498         ;* DISASSEMBLE OPCODE POINTED TO BY Y. PLACE IN OUTPUT BUFFER POINTED TO BY U
                      (        mon09.asm):01499         ;*
EAAE                  (        mon09.asm):01500         DISASS
EAAE 10BFBF1B         (        mon09.asm):01501                 STY     PTRSAV      SAVE INSTRUCTION POINTER
EAB2 3440             (        mon09.asm):01502                 PSHS    U       SAVE INST POINTER
EAB4 CC201A           (        mon09.asm):01503                 LDD     #$2000+26   GET SPACE+NUMBER OF BYTES TO CLEAR
EAB7                  (        mon09.asm):01504         DISA1
EAB7 A7C0             (        mon09.asm):01505                 STA     ,U+     SET A SPACE
EAB9 5A               (        mon09.asm):01506                 DECB    REDUCE COUNT
EABA 26FB             (        mon09.asm):01507                 BNE     DISA1       CONTINUE
EABC 8EEDBC           (        mon09.asm):01508                 LDX     #OPTAB1     POINT TO GENERAL OPCODE TABLE
EABF A6A4             (        mon09.asm):01509                 LDA     ,Y      GET DATA BYTE
EAC1 8110             (        mon09.asm):01510                 CMPA    #$10        PREFIX BYTE?
EAC3 2709             (        mon09.asm):01511                 BEQ     SETOP2      NEW TABLE
EAC5 8111             (        mon09.asm):01512                 CMPA    #$11        OTHER PREFIX BYTE
EAC7 260A             (        mon09.asm):01513                 BNE     OPFIND                            ;NO, IT'S OK
EAC9 8EF0CB           (        mon09.asm):01514                 LDX     #OPTAB3     POINT TO THIRD TABLE
EACC 2003             (        mon09.asm):01515                 BRA     OPFNXT      OK
EACE                  (        mon09.asm):01516         SETOP2
EACE 8EF056           (        mon09.asm):01517                 LDX     #OPTAB2     POINT TO SECOND OPERAND TABLE
EAD1                  (        mon09.asm):01518         OPFNXT
EAD1 3121             (        mon09.asm):01519                 LEAY    1,Y     SKIP PREFIX BYTE
                      (        mon09.asm):01520         ;* LOOK FOR OPCODE IN TABLE
EAD3                  (        mon09.asm):01521         OPFIND
EAD3 A680             (        mon09.asm):01522                 LDA     ,X+     GET BYTE FROM TABLE
EAD5 A1A4             (        mon09.asm):01523                 CMPA    ,Y      IS THIS IT?
EAD7 270C             (        mon09.asm):01524                 BEQ     FNDOPC      FOUND IT
EAD9 81CF             (        mon09.asm):01525                 CMPA    #$CF        END OF TABLE?
EADB 2704             (        mon09.asm):01526                 BEQ     BADOPC      IF SO, FAKE AN OPCODE
EADD 3002             (        mon09.asm):01527                 LEAX    2,X     ADVANCE
EADF 20F2             (        mon09.asm):01528                 BRA     OPFIND      KEEP LOOKING
EAE1                  (        mon09.asm):01529         BADOPC
EAE1 10BEBF1B         (        mon09.asm):01530                 LDY     PTRSAV      INSURE WE ARE AT BEGINNING
                      (        mon09.asm):01531         ;* LOCATED OPCODE, GENERATE STRING
EAE5                  (        mon09.asm):01532         FNDOPC
EAE5 3121             (        mon09.asm):01533                 LEAY    1,Y     SKIP TO POSTBYTE
EAE7 A680             (        mon09.asm):01534                 LDA     ,X+     GET DATA
EAE9 B7BF1D           (        mon09.asm):01535                 STA     INSTYP      SAVE FOR LATER
EAEC E684             (        mon09.asm):01536                 LDB     ,X      GET INSTRUCTION NUMBER
EAEE 8604             (        mon09.asm):01537                 LDA     #4      FOUR BYTES/ENTRY
EAF0 3D               (        mon09.asm):01538                 MUL     CALCULATE ENTRY OFFSET
EAF1 8EF0E6           (        mon09.asm):01539                 LDX     #ITABLE     POINT TO INSTRUCTION TABLE
EAF4 308B             (        mon09.asm):01540                 LEAX    D,X     ADVANCE TO IT
EAF6 C604             (        mon09.asm):01541                 LDB     #4      SIZE OF INSTRIUCTION FIELD
EAF8                  (        mon09.asm):01542         FNDO1
EAF8 A680             (        mon09.asm):01543                 LDA     ,X+     GET CHAR
EAFA A7C0             (        mon09.asm):01544                 STA     ,U+     SAVE IN OUTPUT
EAFC 5A               (        mon09.asm):01545                 DECB    MOVE FOUR CHARACTERS
EAFD 26F9             (        mon09.asm):01546                 BNE     FNDO1       CONTINUE
EAFF                  (        mon09.asm):01547         FNDO2
EAFF B6BF1D           (        mon09.asm):01548                 LDA     INSTYP      GET TYPE BITS BACK
EB02 840F             (        mon09.asm):01549                 ANDA    #$0F        REMOVE CRAP
EB04 10270173         (        mon09.asm):01550                 LBEQ    ENDIS       NO OPERANDS
                      (        mon09.asm):01551         ;* INSERT SPACES FOR OPERAND
EB08 C620             (        mon09.asm):01552                 LDB     #' '        GET A SPACE
EB0A E7C0             (        mon09.asm):01553                 STB     ,U+     SAVE IN OUTPUT
EB0C E7C0             (        mon09.asm):01554                 STB     ,U+     SAVE IN OUTPUT
EB0E 4A               (        mon09.asm):01555                 DECA    IS 8 BIT IT IMMEDIATE?
EB0F 2606             (        mon09.asm):01556                 BNE     IMM16       NO, TRY 16 BIT IMMEDIATE
                      (        mon09.asm):01557         ;* EIGHT BIT IMMEDIATE ADDRESSING OPERAND
EB11                  (        mon09.asm):01558         IMM8
EB11 8623             (        mon09.asm):01559                 LDA     #'#'        INDICATE IMMEDIATE
EB13 A7C0             (        mon09.asm):01560                 STA     ,U+     SAVE IT
EB15 2010             (        mon09.asm):01561                 BRA     OP8     QUIT
                      (        mon09.asm):01562         ;* SIXTEEN BIT IMMEDIATE ADDRESSING
EB17                  (        mon09.asm):01563         IMM16
EB17 4A               (        mon09.asm):01564                 DECA    IS THIS IT?
EB18 2606             (        mon09.asm):01565                 BNE     DIRECT      NO, TRY DIRECT
EB1A 8623             (        mon09.asm):01566                 LDA     #'#'        INDICATE IMMEDIATE
EB1C A7C0             (        mon09.asm):01567                 STA     ,U+     SAVE IT
EB1E 2011             (        mon09.asm):01568                 BRA     OP16        16 BIT OPERAND
                      (        mon09.asm):01569         ;* DIRECT PAGE ADDRESSING
EB20                  (        mon09.asm):01570         DIRECT
EB20 4A               (        mon09.asm):01571                 DECA    IS THIS IT?
EB21 260B             (        mon09.asm):01572                 BNE     EXTEND      NO, TRY EXTENDED
EB23 863C             (        mon09.asm):01573                 LDA     #'<'        INDICATE DIRECT
EB25 A7C0             (        mon09.asm):01574                 STA     ,U+     SAVE IT
EB27                  (        mon09.asm):01575         OP8
EB27 A6A0             (        mon09.asm):01576                 LDA     ,Y+     GET OPERAND BYTE
EB29 170192           (        mon09.asm):01577                 LBSR    WRHEXB      OUTPUT
EB2C 2008             (        mon09.asm):01578                 BRA     ENDIS1      END GO HOME
                      (        mon09.asm):01579         ;* EXTENDED ADDRESSING
EB2E                  (        mon09.asm):01580         EXTEND
EB2E 4A               (        mon09.asm):01581                 DECA    IS THIS IT?
EB2F 2608             (        mon09.asm):01582                 BNE     INDEX       NO, TRY INDEXED
EB31                  (        mon09.asm):01583         OP16
EB31 ECA1             (        mon09.asm):01584                 LDD     ,Y++        GET OPCODES
EB33 170190           (        mon09.asm):01585                 LBSR    WRHEXW      OUTPUT WORD
EB36                  (        mon09.asm):01586         ENDIS1
EB36 160142           (        mon09.asm):01587                 LBRA    ENDIS       GO HOME
                      (        mon09.asm):01588         ;* INDEXED ADDRESSING MODES
EB39                  (        mon09.asm):01589         INDEX
EB39 4A               (        mon09.asm):01590                 DECA    IS IT INDEXED?
EB3A 102600CB         (        mon09.asm):01591                 LBNE    PSHPUL      NO, TRY PUSH OR PUL
EB3E A6A0             (        mon09.asm):01592                 LDA     ,Y+     GET POST BYTE
EB40 B7BF1E           (        mon09.asm):01593                 STA     POSBYT      SAVE FOR LATER
                      (        mon09.asm):01594         ;* TEST FOR FIVE BIT OFFSET
EB43 2B04             (        mon09.asm):01595                 BMI     NO5BO       NOT A FIVE BIT OFFSET
EB45 841F             (        mon09.asm):01596                 ANDA    #$1F        CONVERT TO POSTBYTE
EB47 2014             (        mon09.asm):01597                 BRA     EVLX1       INSERT REGISTER AND CONTINUE
                      (        mon09.asm):01598         ;* TEST FOR INDIRECT MODE
EB49                  (        mon09.asm):01599         NO5BO
EB49 8510             (        mon09.asm):01600                 BITA    #$10        TEST FOR INDIRECT
EB4B 2704             (        mon09.asm):01601                 BEQ     NOIND       NOT INDIRECT
EB4D C65B             (        mon09.asm):01602                 LDB     #'['        GET OPENING
EB4F E7C0             (        mon09.asm):01603                 STB     ,U+     SAVE IN OUTPUT
                      (        mon09.asm):01604         ;* TEST FOR NO OFFSET
EB51                  (        mon09.asm):01605         NOIND
EB51 848F             (        mon09.asm):01606                 ANDA    #$8F        REMOVE REGS AND INDIRECT BIT
EB53 8184             (        mon09.asm):01607                 CMPA    #$84        NO OFFSET?
EB55 272E             (        mon09.asm):01608                 BEQ     INSR1       INSERT REGISTER AND EXIT
                      (        mon09.asm):01609         ;* TEST FOR EIGHT BIT OFFSET
EB57 8188             (        mon09.asm):01610                 CMPA    #$88        EIGHT BIT OFFSET
EB59 2607             (        mon09.asm):01611                 BNE     EVL1        NO, TRY NEXT
EB5B A6A0             (        mon09.asm):01612                 LDA     ,Y+     GET BYTE OFFSET
EB5D                  (        mon09.asm):01613         EVLX1
EB5D 17015E           (        mon09.asm):01614                 LBSR    WRHEXB      OUTPUT
EB60 2023             (        mon09.asm):01615                 BRA     INSR1       CONTINUE
                      (        mon09.asm):01616         ;* TEST FOR 16 BIT OFFSET
EB62                  (        mon09.asm):01617         EVL1
EB62 8189             (        mon09.asm):01618                 CMPA    #$89        16 BIT OFSET?
EB64 2607             (        mon09.asm):01619                 BNE     EVL2        NO, TRY NEXT
EB66 ECA1             (        mon09.asm):01620                 LDD     ,Y++        GET OPERAND
EB68 17015B           (        mon09.asm):01621                 LBSR    WRHEXW      OUTPUT
EB6B 2018             (        mon09.asm):01622                 BRA     INSR1       INSERT REGISTER
                      (        mon09.asm):01623         ;* TEST FOR A ACCUMULATOR OFFSET
EB6D                  (        mon09.asm):01624         EVL2
EB6D 8186             (        mon09.asm):01625                 CMPA    #$86        IS IT 'A' OFFSET?
EB6F 2604             (        mon09.asm):01626                 BNE     EVL3        NO, TRY NEXT
EB71 8641             (        mon09.asm):01627                 LDA     #'A'        GET ACCA
EB73 200E             (        mon09.asm):01628                 BRA     SAIREG      GO HOME
                      (        mon09.asm):01629         ;* TEST FOR B ACCUMULATOR OFFSET
EB75                  (        mon09.asm):01630         EVL3
EB75 8185             (        mon09.asm):01631                 CMPA    #$85        IS IT 'B' OFFSET?
EB77 2604             (        mon09.asm):01632                 BNE     EVL4        NO, TRY NEXT
EB79 8642             (        mon09.asm):01633                 LDA     #'B'        GET B
EB7B 2006             (        mon09.asm):01634                 BRA     SAIREG      GO HOME
                      (        mon09.asm):01635         ;* TEST FRO 'D' ACCUMULATOR OFFSET
EB7D                  (        mon09.asm):01636         EVL4
EB7D 818B             (        mon09.asm):01637                 CMPA    #$8B        D OFFSET?
EB7F 2606             (        mon09.asm):01638                 BNE     EVL5        NO, TRY NEXT
EB81 8644             (        mon09.asm):01639                 LDA     #'D'        GET D REGISTER
EB83                  (        mon09.asm):01640         SAIREG
EB83 A7C0             (        mon09.asm):01641                 STA     ,U+     SAVE IT
EB85                  (        mon09.asm):01642         INSR1
EB85 202C             (        mon09.asm):01643                 BRA     INSREG
                      (        mon09.asm):01644         ;* TEST FOR EXTENDED INDIRECT
EB87                  (        mon09.asm):01645         EVL5
EB87 818F             (        mon09.asm):01646                 CMPA    #$8F                              ;EXTENDED INDIRECT?
EB89 2607             (        mon09.asm):01647                 BNE     EVL6                              ;NO, TRY NEXT
EB8B ECA1             (        mon09.asm):01648                 LDD     ,Y++                              ;GET OFFSET
EB8D 170136           (        mon09.asm):01649                 LBSR    WRHEXW                            ;OUTPUT
EB90 2054             (        mon09.asm):01650                 BRA     EVLFIN                            ;AND CONTINUE
                      (        mon09.asm):01651         ;* TEST FOR PC OFFSET, 8 BIT
EB92                  (        mon09.asm):01652         EVL6
EB92 818C             (        mon09.asm):01653                 CMPA    #$8C        EIGHT BIT PC OFFSET?
EB94 2607             (        mon09.asm):01654                 BNE     EVL7        NO, TRY NEXT
EB96 A6A0             (        mon09.asm):01655                 LDA     ,Y+     GET OFFSET
EB98 170123           (        mon09.asm):01656                 LBSR    WRHEXB      OUTPUT
EB9B 2009             (        mon09.asm):01657                 BRA     WRPCRG      OUTPUT PC REGISTER
                      (        mon09.asm):01658         ;* TEST FOR PC OFFSET, 16 BIT
EB9D                  (        mon09.asm):01659         EVL7
EB9D 818D             (        mon09.asm):01660                 CMPA    #$8D        PC OFFSET?
EB9F 2612             (        mon09.asm):01661                 BNE     INSREG      NO, INSERT REGISTER
EBA1 ECA1             (        mon09.asm):01662                 LDD     ,Y++        GET OFFSET
EBA3 170120           (        mon09.asm):01663                 LBSR    WRHEXW      OUTPUT
EBA6                  (        mon09.asm):01664         WRPCRG
EBA6 8EED87           (        mon09.asm):01665                 LDX     #PCRG       POINT TO STRING
EBA9                  (        mon09.asm):01666         WRPR1
EBA9 A680             (        mon09.asm):01667                 LDA     ,X+     GET CHAR
EBAB A7C0             (        mon09.asm):01668                 STA     ,U+     SAVE
EBAD 8152             (        mon09.asm):01669                 CMPA    #'R'        END?
EBAF 26F8             (        mon09.asm):01670                 BNE     WRPR1       NO, CONTINUE
EBB1 2033             (        mon09.asm):01671                 BRA     EVLFIN      END IT NOW
                      (        mon09.asm):01672         ;* INSERT REGISTER BITS
EBB3                  (        mon09.asm):01673         INSREG
EBB3 862C             (        mon09.asm):01674                 LDA     #','        GET COMMA
EBB5 A7C0             (        mon09.asm):01675                 STA     ,U+     SAVE IT
EBB7 B6BF1E           (        mon09.asm):01676                 LDA     POSBYT      GET POSTBYTE
EBBA C62D             (        mon09.asm):01677                 LDB     #'-'        GET MINUS
EBBC 848F             (        mon09.asm):01678                 ANDA    #$8F        REMOVE CRAP
EBBE 8182             (        mon09.asm):01679                 CMPA    #$82        DECREMENT BY ONE?
EBC0 2706             (        mon09.asm):01680                 BEQ     DEC1        DECREMENT BY ONE
EBC2 8183             (        mon09.asm):01681                 CMPA    #$83        DECREMENT BY TWO?
EBC4 2604             (        mon09.asm):01682                 BNE     NODEC                             ;NO, DON'T DEC
EBC6 E7C0             (        mon09.asm):01683                 STB     ,U+     SAVE
EBC8                  (        mon09.asm):01684         DEC1
EBC8 E7C0             (        mon09.asm):01685                 STB     ,U+     AGAIN
EBCA                  (        mon09.asm):01686         NODEC
EBCA B6BF1E           (        mon09.asm):01687                 LDA     POSBYT      GET POSTBYTE
EBCD 44               (        mon09.asm):01688                 LSRA    SHIFT
EBCE 44               (        mon09.asm):01689                 LSRA    REGISTER
EBCF 44               (        mon09.asm):01690                 LSRA    BITS
EBD0 44               (        mon09.asm):01691                 LSRA    INTO
EBD1 44               (        mon09.asm):01692                 LSRA    BOTTOM
EBD2 C658             (        mon09.asm):01693                 LDB     #'X'        GET 'X'
EBD4 8403             (        mon09.asm):01694                 ANDA    #$03        REMOVE CRAP
EBD6 270C             (        mon09.asm):01695                 BEQ     EVLEND      ITS 'X'
EBD8 C659             (        mon09.asm):01696                 LDB     #'Y'        GET 'Y'
EBDA 4A               (        mon09.asm):01697                 DECA    TEST FOR 'Y'
EBDB 2707             (        mon09.asm):01698                 BEQ     EVLEND      YES
EBDD C655             (        mon09.asm):01699                 LDB     #'U'        GET 'U'
EBDF 4A               (        mon09.asm):01700                 DECA    TEST
EBE0 2702             (        mon09.asm):01701                 BEQ     EVLEND      ITS 'U'
EBE2 C653             (        mon09.asm):01702                 LDB     #'S'        MUST BE 'S'
EBE4                  (        mon09.asm):01703         EVLEND
EBE4 E7C0             (        mon09.asm):01704                 STB     ,U+     SAVE IN OUTPUT
EBE6                  (        mon09.asm):01705         EVLFIN
EBE6 B6BF1E           (        mon09.asm):01706                 LDA     POSBYT      GET POSTBYTE
EBE9 C62B             (        mon09.asm):01707                 LDB     #'+'        GET PLUS
EBEB 848F             (        mon09.asm):01708                 ANDA    #$8F        GET TYPE
EBED 8180             (        mon09.asm):01709                 CMPA    #$80        IS IT INC BY ONE
EBEF 2706             (        mon09.asm):01710                 BEQ     INC1        IF SO, WE HAVE IT
EBF1 8181             (        mon09.asm):01711                 CMPA    #$81        INC BY TWO?
EBF3 2604             (        mon09.asm):01712                 BNE     NOINC       NO INCREMENT
EBF5 E7C0             (        mon09.asm):01713                 STB     ,U+     SAVE ONE
EBF7                  (        mon09.asm):01714         INC1
EBF7 E7C0             (        mon09.asm):01715                 STB     ,U+     SAVE TWO
EBF9                  (        mon09.asm):01716         NOINC
EBF9 B6BF1E           (        mon09.asm):01717                 LDA     POSBYT      GET POSTBYTE
EBFC 2A08             (        mon09.asm):01718                 BPL     NOIND1      FIVE BIT OFFSET
EBFE 8510             (        mon09.asm):01719                 BITA    #$10        INDIRECT?
EC00 2704             (        mon09.asm):01720                 BEQ     NOIND1      NO INDIRECT
EC02 865D             (        mon09.asm):01721                 LDA     #']'        CLOSING BRACE
EC04 A7C0             (        mon09.asm):01722                 STA     ,U+     SAVE IT
EC06                  (        mon09.asm):01723         NOIND1
EC06 160072           (        mon09.asm):01724                 LBRA    ENDIS       END IT
                      (        mon09.asm):01725         ;* PULS OR PULL OPCODES
EC09                  (        mon09.asm):01726         PSHPUL
EC09 4A               (        mon09.asm):01727                 DECA    IS IT PUSH OR PULL?
EC0A 2635             (        mon09.asm):01728                 BNE     TFREXG      NO, TRY TRANSFER OR EXCHANGE
EC0C A6A0             (        mon09.asm):01729                 LDA     ,Y+     GET POSTBYTE
EC0E 8EEDAB           (        mon09.asm):01730                 LDX     #PSHTAB     GET 'CC'
EC11                  (        mon09.asm):01731         PSH1
EC11 44               (        mon09.asm):01732                 LSRA    SHIFT OUT BITS
EC12 2425             (        mon09.asm):01733                 BCC     PSHNXT      SKIP THIS ONE
EC14 3406             (        mon09.asm):01734                 PSHS    A,B     SAVE REGS
EC16 EC81             (        mon09.asm):01735                 LDD     ,X++        GET DATA
EC18 8155             (        mon09.asm):01736                 CMPA    #'U'        SAVEING U REGISTER
EC1A 2607             (        mon09.asm):01737                 BNE     PSH4                              ;NO, IT'S OK
EC1C 7DBF1D           (        mon09.asm):01738                 TST     INSTYP      SPECIAL CASE
EC1F 2A02             (        mon09.asm):01739                 BPL     PSH4        OK
EC21 8653             (        mon09.asm):01740                 LDA     #'S'        CONVERT
EC23                  (        mon09.asm):01741         PSH4
EC23 A7C0             (        mon09.asm):01742                 STA     ,U+     SAVE IT
EC25 5D               (        mon09.asm):01743                 TSTB    MORE?
EC26 2702             (        mon09.asm):01744                 BEQ     PSH2        NO, SKIP IT
EC28 E7C0             (        mon09.asm):01745                 STB     ,U+     SAVE
EC2A                  (        mon09.asm):01746         PSH2
EC2A 3506             (        mon09.asm):01747                 PULS    A,B     RESTORE REGS
EC2C 4D               (        mon09.asm):01748                 TSTA    MORE BITS?
EC2D 270F             (        mon09.asm):01749                 BEQ     PSH3        NO, QUIT
EC2F 3402             (        mon09.asm):01750                 PSHS    A       RESAVE
EC31 862C             (        mon09.asm):01751                 LDA     #','        GET COMMA
EC33 A7C0             (        mon09.asm):01752                 STA     ,U+     SAVE
EC35 3502             (        mon09.asm):01753                 PULS    A       GET IT BACK
EC37 20D8             (        mon09.asm):01754                 BRA     PSH1        CONTINUE
EC39                  (        mon09.asm):01755         PSHNXT
EC39 3002             (        mon09.asm):01756                 LEAX    2,X     ADVANCE
EC3B 4D               (        mon09.asm):01757                 TSTA    ARE WE OK
EC3C 26D3             (        mon09.asm):01758                 BNE     PSH1        KEEP TRYING
EC3E                  (        mon09.asm):01759         PSH3
EC3E 16003A           (        mon09.asm):01760                 LBRA    ENDIS       DONE
                      (        mon09.asm):01761         ;* TRANSFER AND EXCHANGE POSTBYTE OPCODES
EC41                  (        mon09.asm):01762         TFREXG
EC41 4A               (        mon09.asm):01763                 DECA    TRANSFER OR EXCHANGE?
EC42 2623             (        mon09.asm):01764                 BNE     SBRAN       TRY SHORT BRANCH
EC44 A6A4             (        mon09.asm):01765                 LDA     ,Y      GET POSTBYTE
EC46 44               (        mon09.asm):01766                 LSRA    SHIFT
EC47 44               (        mon09.asm):01767                 LSRA    INTO
EC48 44               (        mon09.asm):01768                 LSRA    LOW
EC49 44               (        mon09.asm):01769                 LSRA    NIBBLE
EC4A 8D0B             (        mon09.asm):01770                 BSR     TFRREG      GET REGISTER
EC4C 862C             (        mon09.asm):01771                 LDA     #','        SEPERATOR
EC4E A7C0             (        mon09.asm):01772                 STA     ,U+     SAVE
EC50 A6A0             (        mon09.asm):01773                 LDA     ,Y+     GET POSTBYTE AGAIN
EC52 8D03             (        mon09.asm):01774                 BSR     TFRREG      PLACE IT
EC54 160024           (        mon09.asm):01775                 LBRA    ENDIS       GO HOME
                      (        mon09.asm):01776         ;* CALCULATE TRANSFER REGISTER
EC57                  (        mon09.asm):01777         TFRREG
EC57 840F             (        mon09.asm):01778                 ANDA    #$0F        REMOVE HIGH CRAP
EC59 48               (        mon09.asm):01779                 LSLA    MULTIPLY BY TWO
EC5A 8EED8B           (        mon09.asm):01780                 LDX     #REGTAB     POINT TO TABLE
EC5D EC86             (        mon09.asm):01781                 LDD     A,X     GET REGISTER VALUE
EC5F A7C0             (        mon09.asm):01782                 STA     ,U+     SAVE IT
EC61 5D               (        mon09.asm):01783                 TSTB    SECOND BYTE?
EC62 2702             (        mon09.asm):01784                 BEQ     TFRET       NO, SKIP IT
EC64 E7C0             (        mon09.asm):01785                 STB     ,U+     SAVE IT
EC66                  (        mon09.asm):01786         TFRET
EC66 39               (        mon09.asm):01787                 RTS
                      (        mon09.asm):01788         ;* SHORT BRANCH
EC67                  (        mon09.asm):01789         SBRAN
EC67 4A               (        mon09.asm):01790                 DECA    SHORT BRANCH
EC68 2608             (        mon09.asm):01791                 BNE     LBRAN       NO, TRY LONG BRANCH
EC6A E6A0             (        mon09.asm):01792                 LDB     ,Y+     GET OPERATOR
EC6C 30A5             (        mon09.asm):01793                 LEAX    B,Y     GET NEW ADDRESS
EC6E 1F10             (        mon09.asm):01794                 TFR     X,D     COPY
EC70 2006             (        mon09.asm):01795                 BRA     SAVADR      FINISH
                      (        mon09.asm):01796         ;* LONG BRANCH
EC72                  (        mon09.asm):01797         LBRAN
EC72 ECA1             (        mon09.asm):01798                 LDD     ,Y++        GET OPERAND
EC74 3420             (        mon09.asm):01799                 PSHS    Y       SAVE Y
EC76 E3E1             (        mon09.asm):01800                 ADDD    ,S++        ADD OFFSET TO REG
EC78                  (        mon09.asm):01801         SAVADR
EC78 17004B           (        mon09.asm):01802                 LBSR    WRHEXW      OUTPUT WORD.
EC7B                  (        mon09.asm):01803         ENDIS
EC7B 86FF             (        mon09.asm):01804                 LDA     #$FF        LINE TERMINATOR
EC7D A7C4             (        mon09.asm):01805                 STA     ,U      SAVE IT
                      (        mon09.asm):01806         ;* INSERT ADDRESS/BYTE DATA
EC7F EEE4             (        mon09.asm):01807                 LDU     ,S      RESTORE U REGISTER
EC81 3420             (        mon09.asm):01808                 PSHS    Y       SAVE POINTER TO END
EC83 BEBF1B           (        mon09.asm):01809                 LDX     PTRSAV      POINT TO STARTING ADDRESS
EC86 1F10             (        mon09.asm):01810                 TFR     X,D     COPY
EC88 170045           (        mon09.asm):01811                 LBSR    WRHEX       OUTPUT
EC8B 1F98             (        mon09.asm):01812                 TFR     B,A     COPY
EC8D 170040           (        mon09.asm):01813                 LBSR    WRHEX       OUTPUT
EC90 5F               (        mon09.asm):01814                 CLRB    START WITH ZERO
EC91                  (        mon09.asm):01815         END1
EC91 ACE4             (        mon09.asm):01816                 CMPX    ,S      ARE WE AT END?
EC93 240A             (        mon09.asm):01817                 BHS     END2        IF SO, QUIT
EC95 5C               (        mon09.asm):01818                 INCB    ADVANCE
EC96 3341             (        mon09.asm):01819                 LEAU    1,U     ADVANCE
EC98 A680             (        mon09.asm):01820                 LDA     ,X+     GET BYTE
EC9A 170033           (        mon09.asm):01821                 LBSR    WRHEX       OUTPUT
EC9D 20F2             (        mon09.asm):01822                 BRA     END1        CONTINUE
EC9F                  (        mon09.asm):01823         END2
EC9F 3262             (        mon09.asm):01824                 LEAS    2,S     RESTORE STACK
ECA1 EEE4             (        mon09.asm):01825                 LDU     ,S      RESTORE U REGISTER
ECA3 33C814           (        mon09.asm):01826                 LEAU    20,U        ADVANCE TO TEXT FIELD
ECA6 BEBF1B           (        mon09.asm):01827                 LDX     PTRSAV      GET POINTER BACK
ECA9                  (        mon09.asm):01828         END3
ECA9 5A               (        mon09.asm):01829                 DECB    REDUCE COUNT
ECAA 2B10             (        mon09.asm):01830                 BMI     END4        CONTINUE
ECAC A680             (        mon09.asm):01831                 LDA     ,X+     GO IT AGAIN
ECAE 8120             (        mon09.asm):01832                 CMPA    #' '        < SPACE?
ECB0 2504             (        mon09.asm):01833                 BLO     END5        YES
ECB2 817F             (        mon09.asm):01834                 CMPA    #$7F        > 7F?
ECB4 2502             (        mon09.asm):01835                 BLO     END6        OK
ECB6                  (        mon09.asm):01836         END5
ECB6 862E             (        mon09.asm):01837                 LDA     #'.'        CONVERT TO DOT
ECB8                  (        mon09.asm):01838         END6
ECB8 A7C0             (        mon09.asm):01839                 STA     ,U+     SAVE
ECBA 20ED             (        mon09.asm):01840                 BRA     END3
ECBC                  (        mon09.asm):01841         END4
ECBC 35C0             (        mon09.asm):01842                 PULS    U,PC        GO HOME
                      (        mon09.asm):01843         ;*
                      (        mon09.asm):01844         ;* SUBROUTINES
                      (        mon09.asm):01845         ;*
ECBE                  (        mon09.asm):01846         WRHEXB
ECBE 3402             (        mon09.asm):01847                 PSHS    A       SAVE IT
ECC0 8624             (        mon09.asm):01848                 LDA     #'$'        INDICATE HEX
ECC2 A7C0             (        mon09.asm):01849                 STA     ,U+     SAVE
ECC4 2008             (        mon09.asm):01850                 BRA     WRHEX1      CONTINUE
ECC6                  (        mon09.asm):01851         WRHEXW
ECC6 3404             (        mon09.asm):01852                 PSHS    B       SAVE B
ECC8 C624             (        mon09.asm):01853                 LDB     #'$'        INDICATE HEX
ECCA E7C0             (        mon09.asm):01854                 STB     ,U+     SAVE IT
ECCC 8D02             (        mon09.asm):01855                 BSR     WRHEX       OUTPUT
ECCE                  (        mon09.asm):01856         WRHEX1
ECCE 3502             (        mon09.asm):01857                 PULS    A       RESTORE
ECD0                  (        mon09.asm):01858         WRHEX
ECD0 3402             (        mon09.asm):01859                 PSHS    A       SAVE IT
ECD2 44               (        mon09.asm):01860                 LSRA    SHIFT
ECD3 44               (        mon09.asm):01861                 LSRA    HIGH BYTE
ECD4 44               (        mon09.asm):01862                 LSRA    INTO
ECD5 44               (        mon09.asm):01863                 LSRA    LOW FOR OUTPUT
ECD6 8D02             (        mon09.asm):01864                 BSR     WRHEXN      OUTPUT NIBBLE
ECD8 3502             (        mon09.asm):01865                 PULS    A       RETORE
ECDA                  (        mon09.asm):01866         WRHEXN
ECDA 840F             (        mon09.asm):01867                 ANDA    #$0F        REMOVE CRAP
ECDC 8B30             (        mon09.asm):01868                 ADDA    #$30        CONVERT
ECDE 8139             (        mon09.asm):01869                 CMPA    #$39        OK?
ECE0 2302             (        mon09.asm):01870                 BLS     WRNOK       OK
ECE2 8B07             (        mon09.asm):01871                 ADDA    #7      CONVERT
ECE4                  (        mon09.asm):01872         WRNOK
ECE4 A7C0             (        mon09.asm):01873                 STA     ,U+     SAVE IT
ECE6 39               (        mon09.asm):01874                 RTS
                      (        mon09.asm):01875         ;*
                      (        mon09.asm):01876         ;* NMI HANDLER
                      (        mon09.asm):01877         ;*
ECE7                  (        mon09.asm):01878         NMIHND
ECE7 8EBF0A           (        mon09.asm):01879                 LDX     #SAVCC      POINT TO START OF SAVED REGS
ECEA C60C             (        mon09.asm):01880                 LDB     #12     MOVE 12 BYTES
ECEC                  (        mon09.asm):01881         NMIH1
ECEC A6E0             (        mon09.asm):01882                 LDA     ,S+     GET BYTE
ECEE A780             (        mon09.asm):01883                 STA     ,X+     SAVE
ECF0 5A               (        mon09.asm):01884                 DECB    DECREMENT COUNT
ECF1 26F9             (        mon09.asm):01885                 BNE     NMIH1       DO THEM ALL
ECF3 10FFBF16         (        mon09.asm):01886                 STS     SAVS        SAVE STACK POINTER
ECF7 17FADC           (        mon09.asm):01887                 LBSR    WRMSG       DISPLAY MESSAGE
ECFA 2A2A2A204E4D4920 (        mon09.asm):01888                 FCC     '*** NMI Interrupt ***'
     496E746572727570
     74202A2A2A
ED0F FF               (        mon09.asm):01889                 FCB     $FF     NEW LINE
ED10 205C             (        mon09.asm):01890                 BRA     BRKREG      DISPLAY REGISTERS
                      (        mon09.asm):01891         ;*
                      (        mon09.asm):01892         ;* SWI HANDLER
                      (        mon09.asm):01893         ;*
ED12                  (        mon09.asm):01894         SWIHND
ED12 108EBF1F         (        mon09.asm):01895                 LDY     #BRKTAB     POINT TO BREAKPOINT TABLE
ED16 AE6A             (        mon09.asm):01896                 LDX     10,S        GET STORED PC
ED18 301F             (        mon09.asm):01897                 LEAX    -1,X        BACKUP TO BREAKPOINT ADDRESS
ED1A C608             (        mon09.asm):01898                 LDB     #8      CHECK EIGHT BREAKPOINTS
ED1C                  (        mon09.asm):01899         SWIHN1
ED1C ACA4             (        mon09.asm):01900                 CMPX    ,Y      IS THIS IT?
ED1E 2710             (        mon09.asm):01901                 BEQ     SWIHN2      YES
ED20 3123             (        mon09.asm):01902                 LEAY    3,Y     SKIP OPCODE
ED22 5A               (        mon09.asm):01903                 DECB    REDUCE COUNT
ED23 26F7             (        mon09.asm):01904                 BNE     SWIHN1      CONTINUE
ED25 E662             (        mon09.asm):01905                 LDB     2,S     RESTORE B.
ED27 AE64             (        mon09.asm):01906                 LDX     4,S     RESTORE X.
ED29 10AE66           (        mon09.asm):01907                 LDY     6,S     RESTORE Y.
ED2C 6E9FBF00         (        mon09.asm):01908                 JMP     [SWIADR]    NOT A BREAKPOINT, EXECUTE SWI HANDLER
ED30                  (        mon09.asm):01909         SWIHN2
ED30 F7BF1D           (        mon09.asm):01910                 STB     INSTYP      SAVE BREAKPOINT NUMBER
ED33 8EBF0A           (        mon09.asm):01911                 LDX     #SAVCC      POINT TO START OF SAVED REGS
ED36 C60A             (        mon09.asm):01912                 LDB     #10     MOVE 10
ED38                  (        mon09.asm):01913         SWIHN25
ED38 A6E0             (        mon09.asm):01914                 LDA     ,S+     GET BYTE
ED3A A780             (        mon09.asm):01915                 STA     ,X+     SAVE
ED3C 5A               (        mon09.asm):01916                 DECB    DECREMENT COUNT
ED3D 26F9             (        mon09.asm):01917                 BNE     SWIHN25     DO THEM ALL
ED3F 3510             (        mon09.asm):01918                 PULS    X       GET PC
ED41 301F             (        mon09.asm):01919                 LEAX    -1,X        SET BACK TO REAL PC
ED43 BFBF14           (        mon09.asm):01920                 STX     SAVPC       SAVED PC
ED46 10FFBF16         (        mon09.asm):01921                 STS     SAVS        SAVE STACK POINTER
ED4A 17FA89           (        mon09.asm):01922                 LBSR    WRMSG       DISPLAY MESSAGE
ED4D 2A2A2A2042726561 (        mon09.asm):01923                 FCN     '*** Breakpoint #'
     6B706F696E742023
     00
ED5E 8638             (        mon09.asm):01924                 LDA     #$38        GET NUMBER, PLUS ASCII CONVERT
ED60 B0BF1D           (        mon09.asm):01925                 SUBA    INSTYP      CONVERT TO PROPER DIGIT
ED63 17FAB2           (        mon09.asm):01926                 LBSR    PUTCHR      DISPLAY
ED66 17FA6D           (        mon09.asm):01927                 LBSR    WRMSG       OUTPUT MESSAGE
ED69 202A2A2A         (        mon09.asm):01928                 FCC     ' ***'      TRAILING MESSAGE
ED6D FF               (        mon09.asm):01929                 FCB     $FF     NEW LINE
ED6E                  (        mon09.asm):01930         BRKREG
ED6E 17F61F           (        mon09.asm):01931                 LBSR    DISREG      DISPLAY
ED71                  (        mon09.asm):01932         BRKRES
ED71 8EBF1F           (        mon09.asm):01933                 LDX     #BRKTAB     POINT TO BREAKPOINT TABLE
ED74 C608             (        mon09.asm):01934                 LDB     #8      DO IT EIGHT TIMES
ED76                  (        mon09.asm):01935         SWIHN3
ED76 10AE81           (        mon09.asm):01936                 LDY     ,X++        GET REG
ED79 2704             (        mon09.asm):01937                 BEQ     SWIHN4      NO BRK, NEXT
ED7B A684             (        mon09.asm):01938                 LDA     ,X      GET OPCODE
ED7D A7A4             (        mon09.asm):01939                 STA     ,Y      REPLACE IN RAM
ED7F                  (        mon09.asm):01940         SWIHN4
ED7F 3001             (        mon09.asm):01941                 LEAX    1,X     SKIP OPCODE
ED81 5A               (        mon09.asm):01942                 DECB    REDUCE COUNT
ED82 26F2             (        mon09.asm):01943                 BNE     SWIHN3      GO AGAIN
ED84 16F411           (        mon09.asm):01944                 LBRA    MAIN        DO PROMPT
                      (        mon09.asm):01945         ;* CONSTANTS
ED87                  (        mon09.asm):01946         PCRG
ED87 2C504352         (        mon09.asm):01947                 FCC     ',PCR'
                      (        mon09.asm):01948         ;* TRANSFER/EXCHANGE REGISTER TABLE
ED8B                  (        mon09.asm):01949         REGTAB
ED8B 4400             (        mon09.asm):01950                 FCN     'D'     0
ED8D 5800             (        mon09.asm):01951                 FCN     'X'     1
ED8F 5900             (        mon09.asm):01952                 FCN     'Y'     2
ED91 5500             (        mon09.asm):01953                 FCN     'U'     3
ED93 5300             (        mon09.asm):01954                 FCN     'S'     4
ED95 5043             (        mon09.asm):01955                 FCC     'PC'        5
ED97 3F00             (        mon09.asm):01956                 FCN     '?'     6
ED99 3F00             (        mon09.asm):01957                 FCN     '?'     7
ED9B 4100             (        mon09.asm):01958                 FCN     'A'     8
ED9D 4200             (        mon09.asm):01959                 FCN     'B'     9
ED9F 4343             (        mon09.asm):01960                 FCC     'CC'        A
EDA1 4450             (        mon09.asm):01961                 FCC     'DP'        B
EDA3 3F00             (        mon09.asm):01962                 FCN     '?'     C
EDA5 3F00             (        mon09.asm):01963                 FCN     '?'     D
EDA7 3F00             (        mon09.asm):01964                 FCN     '?'     E
EDA9 3F00             (        mon09.asm):01965                 FCN     '?'     F
                      (        mon09.asm):01966         ;* PUSH/PULL REGISTER TABLE
EDAB                  (        mon09.asm):01967         PSHTAB:
EDAB 4343             (        mon09.asm):01968                 FCC     'CC'
EDAD 4100             (        mon09.asm):01969                 FCN     'A'
EDAF 4200             (        mon09.asm):01970                 FCN     'B'
EDB1 4450             (        mon09.asm):01971                 FCC     'DP'
EDB3 5800             (        mon09.asm):01972                 FCN     'X'
EDB5 5900             (        mon09.asm):01973                 FCN     'Y'
EDB7 5500             (        mon09.asm):01974                 FCN     'U'
EDB9 504300           (        mon09.asm):01975                 FCN     'PC'
                      (        mon09.asm):01976         ;*
                      (        mon09.asm):01977         ;* OPCODE TABLE, OPCODE BYTE, TYPE BYTE, TEXT BYTE
                      (        mon09.asm):01978         ;*
EDBC                  (        mon09.asm):01979         OPTAB1:
EDBC 860101           (        mon09.asm):01980                 FCB     $86,1,1     'LDA' INSTRUCTIONS
EDBF 960301           (        mon09.asm):01981                 FCB     $96,3,1
EDC2 A60501           (        mon09.asm):01982                 FCB     $A6,5,1
EDC5 B60401           (        mon09.asm):01983                 FCB     $B6,4,1
EDC8 C60102           (        mon09.asm):01984                 FCB     $C6,1,2     'LDB' INSTRUCTIONS
EDCB D60302           (        mon09.asm):01985                 FCB     $D6,3,2
EDCE E60502           (        mon09.asm):01986                 FCB     $E6,5,2
EDD1 F60402           (        mon09.asm):01987                 FCB     $F6,4,2
EDD4 CC0203           (        mon09.asm):01988                 FCB     $CC,2,3     'LDD' INSTRUCTIONS
EDD7 DC0303           (        mon09.asm):01989                 FCB     $DC,3,3
EDDA EC0503           (        mon09.asm):01990                 FCB     $EC,5,3
EDDD FC0403           (        mon09.asm):01991                 FCB     $FC,4,3
EDE0 CE0204           (        mon09.asm):01992                 FCB     $CE,2,4     'LDU' INSTRUCTIONS
EDE3 DE0304           (        mon09.asm):01993                 FCB     $DE,3,4
EDE6 EE0504           (        mon09.asm):01994                 FCB     $EE,5,4
EDE9 FE0404           (        mon09.asm):01995                 FCB     $FE,4,4
EDEC 8E0205           (        mon09.asm):01996                 FCB     $8E,2,5     'LDX' INSTRUCTIONS
EDEF 9E0305           (        mon09.asm):01997                 FCB     $9E,3,5
EDF2 AE0505           (        mon09.asm):01998                 FCB     $AE,5,5
EDF5 BE0405           (        mon09.asm):01999                 FCB     $BE,4,5
EDF8 970306           (        mon09.asm):02000                 FCB     $97,3,6     'STA' INSTRUCTINOS
EDFB A70506           (        mon09.asm):02001                 FCB     $A7,5,6
EDFE B70406           (        mon09.asm):02002                 FCB     $B7,4,6
EE01 D70307           (        mon09.asm):02003                 FCB     $D7,3,7     'STB' INSTRUCTIONS
EE04 E70507           (        mon09.asm):02004                 FCB     $E7,5,7
EE07 F70407           (        mon09.asm):02005                 FCB     $F7,4,7
EE0A DD0308           (        mon09.asm):02006                 FCB     $DD,3,8     'STD' INSTRUCTIONS
EE0D ED0508           (        mon09.asm):02007                 FCB     $ED,5,8
EE10 FD0408           (        mon09.asm):02008                 FCB     $FD,4,8
EE13 DF0309           (        mon09.asm):02009                 FCB     $DF,3,9     'STU' INSTRUCTIONS
EE16 EF0509           (        mon09.asm):02010                 FCB     $EF,5,9
EE19 FF0409           (        mon09.asm):02011                 FCB     $FF,4,9
EE1C 9F030A           (        mon09.asm):02012                 FCB     $9F,3,10    'STX' INSTRUCTIONS
EE1F AF050A           (        mon09.asm):02013                 FCB     $AF,5,10
EE22 BF040A           (        mon09.asm):02014                 FCB     $BF,4,10
EE25 3A000B           (        mon09.asm):02015                 FCB     $3A,0,11    'ABX'
EE28 89010C           (        mon09.asm):02016                 FCB     $89,1,12    'ADCA'
EE2B 99030C           (        mon09.asm):02017                 FCB     $99,3,12
EE2E A9050C           (        mon09.asm):02018                 FCB     $A9,5,12
EE31 B9040C           (        mon09.asm):02019                 FCB     $B9,4,12
EE34 C9010D           (        mon09.asm):02020                 FCB     $C9,1,13    'ADCB'
EE37 D9030D           (        mon09.asm):02021                 FCB     $D9,3,13
EE3A E9050D           (        mon09.asm):02022                 FCB     $E9,5,13
EE3D F9040D           (        mon09.asm):02023                 FCB     $F9,4,13
EE40 8B010E           (        mon09.asm):02024                 FCB     $8B,1,14    'ADDA'
EE43 9B030E           (        mon09.asm):02025                 FCB     $9B,3,14
EE46 AB050E           (        mon09.asm):02026                 FCB     $AB,5,14
EE49 BB040E           (        mon09.asm):02027                 FCB     $BB,4,14
EE4C CB010F           (        mon09.asm):02028                 FCB     $CB,1,15    'ADDB'
EE4F DB030F           (        mon09.asm):02029                 FCB     $DB,3,15
EE52 EB050F           (        mon09.asm):02030                 FCB     $EB,5,15
EE55 FB040F           (        mon09.asm):02031                 FCB     $FB,4,15
EE58 C30210           (        mon09.asm):02032                 FCB     $C3,2,16    'ADDD'
EE5B D30310           (        mon09.asm):02033                 FCB     $D3,3,16
EE5E E30510           (        mon09.asm):02034                 FCB     $E3,5,16
EE61 F30410           (        mon09.asm):02035                 FCB     $F3,4,16
EE64 480011           (        mon09.asm):02036                 FCB     $48,0,17    'ASLA'
EE67 580012           (        mon09.asm):02037                 FCB     $58,0,18    'ASLB'
EE6A 080313           (        mon09.asm):02038                 FCB     $08,3,19    'ASL'
EE6D 680513           (        mon09.asm):02039                 FCB     $68,5,19
EE70 780413           (        mon09.asm):02040                 FCB     $78,4,19
EE73 470014           (        mon09.asm):02041                 FCB     $47,0,20    'ASRA'
EE76 570015           (        mon09.asm):02042                 FCB     $57,0,21    'ASRB'
EE79 070316           (        mon09.asm):02043                 FCB     $07,3,22    'ASR'
EE7C 670516           (        mon09.asm):02044                 FCB     $67,5,22
EE7F 770416           (        mon09.asm):02045                 FCB     $77,4,22
EE82 850117           (        mon09.asm):02046                 FCB     $85,1,23    'BITA'
EE85 950317           (        mon09.asm):02047                 FCB     $95,3,23
EE88 A50517           (        mon09.asm):02048                 FCB     $A5,5,23
EE8B B50417           (        mon09.asm):02049                 FCB     $B5,4,23
EE8E C50118           (        mon09.asm):02050                 FCB     $C5,1,24    'BITB'
EE91 D50318           (        mon09.asm):02051                 FCB     $D5,3,24
EE94 E50518           (        mon09.asm):02052                 FCB     $E5,5,24
EE97 F50418           (        mon09.asm):02053                 FCB     $F5,4,24
EE9A 4F0019           (        mon09.asm):02054                 FCB     $4F,0,25    'CLRA'
EE9D 5F001A           (        mon09.asm):02055                 FCB     $5F,0,26    'CLRB'
EEA0 0F031B           (        mon09.asm):02056                 FCB     $0F,3,27    'CLR'
EEA3 6F051B           (        mon09.asm):02057                 FCB     $6F,5,27
EEA6 7F041B           (        mon09.asm):02058                 FCB     $7F,4,27
EEA9 81011C           (        mon09.asm):02059                 FCB     $81,1,28    'CMPA'
EEAC 91031C           (        mon09.asm):02060                 FCB     $91,3,28
EEAF A1051C           (        mon09.asm):02061                 FCB     $A1,5,28
EEB2 B1041C           (        mon09.asm):02062                 FCB     $B1,4,28
EEB5 C1011D           (        mon09.asm):02063                 FCB     $C1,1,29    'CMPB'
EEB8 D1031D           (        mon09.asm):02064                 FCB     $D1,3,29
EEBB E1051D           (        mon09.asm):02065                 FCB     $E1,5,29
EEBE F1041D           (        mon09.asm):02066                 FCB     $F1,4,29
EEC1 8C021E           (        mon09.asm):02067                 FCB     $8C,2,30    'CMPX'
EEC4 9C031E           (        mon09.asm):02068                 FCB     $9C,3,30
EEC7 AC051E           (        mon09.asm):02069                 FCB     $AC,5,30
EECA BC041E           (        mon09.asm):02070                 FCB     $BC,4,30
EECD 43001F           (        mon09.asm):02071                 FCB     $43,0,31    'COMA'
EED0 530020           (        mon09.asm):02072                 FCB     $53,0,32    'COMB'
EED3 030321           (        mon09.asm):02073                 FCB     $03,3,33    'COM'
EED6 630521           (        mon09.asm):02074                 FCB     $63,5,33
EED9 730421           (        mon09.asm):02075                 FCB     $73,4,33
EEDC 3C0122           (        mon09.asm):02076                 FCB     $3C,1,34    'CWAI'
EEDF 190023           (        mon09.asm):02077                 FCB     $19,0,35    'DAA'
EEE2 4A0024           (        mon09.asm):02078                 FCB     $4A,0,36    'DECA'
EEE5 5A0025           (        mon09.asm):02079                 FCB     $5A,0,37    'DECB'
EEE8 0A0326           (        mon09.asm):02080                 FCB     $0A,3,38    'DEC'
EEEB 6A0526           (        mon09.asm):02081                 FCB     $6A,5,38
EEEE 7A0426           (        mon09.asm):02082                 FCB     $7A,4,38
EEF1 880127           (        mon09.asm):02083                 FCB     $88,1,39    'EORA'
EEF4 980327           (        mon09.asm):02084                 FCB     $98,3,39
EEF7 A80527           (        mon09.asm):02085                 FCB     $A8,5,39
EEFA B80427           (        mon09.asm):02086                 FCB     $B8,4,39
EEFD C80128           (        mon09.asm):02087                 FCB     $C8,1,40    'EORB'
EF00 D80328           (        mon09.asm):02088                 FCB     $D8,3,40
EF03 E80528           (        mon09.asm):02089                 FCB     $E8,5,40
EF06 F80428           (        mon09.asm):02090                 FCB     $F8,4,40
EF09 1E0729           (        mon09.asm):02091                 FCB     $1E,7,41    'EXG'
EF0C 1F072A           (        mon09.asm):02092                 FCB     $1F,7,42    'TFR'
EF0F 34062B           (        mon09.asm):02093                 FCB     $34,6,43    'PSHS'
EF12 36862C           (        mon09.asm):02094                 FCB     $36,$86,44  'PSHU'
EF15 35062D           (        mon09.asm):02095                 FCB     $35,6,45    'PULS'
EF18 37862E           (        mon09.asm):02096                 FCB     $37,$86,46  'PULU'
EF1B 4C002F           (        mon09.asm):02097                 FCB     $4C,0,47    'INCA'
EF1E 5C0030           (        mon09.asm):02098                 FCB     $5C,0,48    'INCB'
EF21 0C0331           (        mon09.asm):02099                 FCB     $0C,3,49    'INC'
EF24 6C0531           (        mon09.asm):02100                 FCB     $6C,5,49
EF27 7C0431           (        mon09.asm):02101                 FCB     $7C,4,49
EF2A 0E0332           (        mon09.asm):02102                 FCB     $0E,3,50    'JMP'
EF2D 6E0532           (        mon09.asm):02103                 FCB     $6E,5,50
EF30 7E0432           (        mon09.asm):02104                 FCB     $7E,4,50
EF33 9D0333           (        mon09.asm):02105                 FCB     $9D,3,51    'JSR'
EF36 AD0533           (        mon09.asm):02106                 FCB     $AD,5,51
EF39 BD0433           (        mon09.asm):02107                 FCB     $BD,4,51
EF3C 320534           (        mon09.asm):02108                 FCB     $32,5,52    'LEAS'
EF3F 330535           (        mon09.asm):02109                 FCB     $33,5,53    'LEAU'
EF42 300536           (        mon09.asm):02110                 FCB     $30,5,54    'LEAX'
EF45 310537           (        mon09.asm):02111                 FCB     $31,5,55    'LEAY'
EF48 440038           (        mon09.asm):02112                 FCB     $44,0,56    'LSRA'
EF4B 540039           (        mon09.asm):02113                 FCB     $54,0,57    'LSRB'
EF4E 04033A           (        mon09.asm):02114                 FCB     $04,3,58    'LSR'
EF51 64053A           (        mon09.asm):02115                 FCB     $64,5,58
EF54 74043A           (        mon09.asm):02116                 FCB     $74,4,58
EF57 3D003B           (        mon09.asm):02117                 FCB     $3D,0,59    'MUL'
EF5A 40003C           (        mon09.asm):02118                 FCB     $40,0,60    'NEGA'
EF5D 50003D           (        mon09.asm):02119                 FCB     $50,0,61    'NEGB'
EF60 00033E           (        mon09.asm):02120                 FCB     $00,3,62    'NEG'
EF63 60053E           (        mon09.asm):02121                 FCB     $60,5,62
EF66 70043E           (        mon09.asm):02122                 FCB     $70,4,62
EF69 12003F           (        mon09.asm):02123                 FCB     $12,0,63    'NOP'
EF6C 8A0140           (        mon09.asm):02124                 FCB     $8A,1,64    'ORA'
EF6F 9A0340           (        mon09.asm):02125                 FCB     $9A,3,64
EF72 AA0540           (        mon09.asm):02126                 FCB     $AA,5,64
EF75 BA0440           (        mon09.asm):02127                 FCB     $BA,4,64
EF78 CA0141           (        mon09.asm):02128                 FCB     $CA,1,65    'ORB'
EF7B DA0341           (        mon09.asm):02129                 FCB     $DA,3,65
EF7E EA0541           (        mon09.asm):02130                 FCB     $EA,5,65
EF81 FA0441           (        mon09.asm):02131                 FCB     $FA,4,65
EF84 1A0142           (        mon09.asm):02132                 FCB     $1A,1,66    'ORCC'
EF87 840143           (        mon09.asm):02133                 FCB     $84,1,67    'ANDA'
EF8A 940343           (        mon09.asm):02134                 FCB     $94,3,67
EF8D A40543           (        mon09.asm):02135                 FCB     $A4,5,67
EF90 B40443           (        mon09.asm):02136                 FCB     $B4,4,67
EF93 C40144           (        mon09.asm):02137                 FCB     $C4,1,68    'ANDB'
EF96 D40344           (        mon09.asm):02138                 FCB     $D4,3,68
EF99 E40544           (        mon09.asm):02139                 FCB     $E4,5,68
EF9C F40444           (        mon09.asm):02140                 FCB     $F4,4,68
EF9F 1C0145           (        mon09.asm):02141                 FCB     $1C,1,69    'ANDCC'
EFA2 490046           (        mon09.asm):02142                 FCB     $49,0,70    'ROLA'
EFA5 590047           (        mon09.asm):02143                 FCB     $59,0,71    'ROLB'
EFA8 090348           (        mon09.asm):02144                 FCB     $09,3,72    'ROL'
EFAB 690548           (        mon09.asm):02145                 FCB     $69,5,72
EFAE 790448           (        mon09.asm):02146                 FCB     $79,4,72
EFB1 460049           (        mon09.asm):02147                 FCB     $46,0,73    'RORA'
EFB4 56004A           (        mon09.asm):02148                 FCB     $56,0,74    'RORB'
EFB7 06034B           (        mon09.asm):02149                 FCB     $06,3,75    'ROR'
EFBA 66054B           (        mon09.asm):02150                 FCB     $66,5,75
EFBD 76044B           (        mon09.asm):02151                 FCB     $76,4,75
EFC0 3B004C           (        mon09.asm):02152                 FCB     $3B,0,76    'RTI'
EFC3 39004D           (        mon09.asm):02153                 FCB     $39,0,77    'RTS'
EFC6 82014E           (        mon09.asm):02154                 FCB     $82,1,78    'SBCA'
EFC9 92034E           (        mon09.asm):02155                 FCB     $92,3,78
EFCC A2054E           (        mon09.asm):02156                 FCB     $A2,5,78
EFCF B2044E           (        mon09.asm):02157                 FCB     $B2,4,78
EFD2 C2014F           (        mon09.asm):02158                 FCB     $C2,1,79    'SBCB'
EFD5 D2034F           (        mon09.asm):02159                 FCB     $D2,3,79
EFD8 E2054F           (        mon09.asm):02160                 FCB     $E2,5,79
EFDB F2044F           (        mon09.asm):02161                 FCB     $F2,4,79
EFDE 1D0050           (        mon09.asm):02162                 FCB     $1D,0,80
EFE1 800151           (        mon09.asm):02163                 FCB     $80,1,81    'SUBA'
EFE4 900351           (        mon09.asm):02164                 FCB     $90,3,81
EFE7 A00551           (        mon09.asm):02165                 FCB     $A0,5,81
EFEA B00451           (        mon09.asm):02166                 FCB     $B0,4,81
EFED C00152           (        mon09.asm):02167                 FCB     $C0,1,82    'SUBB'
EFF0 D00352           (        mon09.asm):02168                 FCB     $D0,3,82
EFF3 E00552           (        mon09.asm):02169                 FCB     $E0,5,82
EFF6 F00452           (        mon09.asm):02170                 FCB     $F0,4,82
EFF9 830253           (        mon09.asm):02171                 FCB     $83,2,83    'SUBD'
EFFC 930353           (        mon09.asm):02172                 FCB     $93,3,83
EFFF A30553           (        mon09.asm):02173                 FCB     $A3,5,83
F002 B30453           (        mon09.asm):02174                 FCB     $B3,4,83
F005 3F0054           (        mon09.asm):02175                 FCB     $3F,0,84    'SWI'
F008 130055           (        mon09.asm):02176                 FCB     $13,0,85    'SYNC'
F00B 4D0056           (        mon09.asm):02177                 FCB     $4D,0,86    'TSTA'
F00E 5D0057           (        mon09.asm):02178                 FCB     $5D,0,87    'TSTB'
F011 0D0358           (        mon09.asm):02179                 FCB     $0D,3,88    'TST'
F014 6D0558           (        mon09.asm):02180                 FCB     $6D,5,88
F017 7D0458           (        mon09.asm):02181                 FCB     $7D,4,88
F01A 160963           (        mon09.asm):02182                 FCB     $16,9,99    'LBRA'
F01D 170964           (        mon09.asm):02183                 FCB     $17,9,100   'LBSR'
F020 200865           (        mon09.asm):02184                 FCB     $20,8,101   'BRA'
F023 210866           (        mon09.asm):02185                 FCB     $21,8,102   'BRN'
F026 220867           (        mon09.asm):02186                 FCB     $22,8,103   'BHI'
F029 230868           (        mon09.asm):02187                 FCB     $23,8,104   'BLS'
F02C 240869           (        mon09.asm):02188                 FCB     $24,8,105   'BCC'
F02F 25086A           (        mon09.asm):02189                 FCB     $25,8,106   'BCS'
F032 26086B           (        mon09.asm):02190                 FCB     $26,8,107   'BNE'
F035 27086C           (        mon09.asm):02191                 FCB     $27,8,108   'BEQ'
F038 28086D           (        mon09.asm):02192                 FCB     $28,8,109   'BVC'
F03B 29086E           (        mon09.asm):02193                 FCB     $29,8,110   'BVS'
F03E 2A086F           (        mon09.asm):02194                 FCB     $2A,8,111   'BPL'
F041 2B0870           (        mon09.asm):02195                 FCB     $2B,8,112   'BMI'
F044 2C0871           (        mon09.asm):02196                 FCB     $2C,8,113   'BGE'
F047 2D0872           (        mon09.asm):02197                 FCB     $2D,8,114   'BLT'
F04A 2E0873           (        mon09.asm):02198                 FCB     $2E,8,115   'BGT'
F04D 2F0874           (        mon09.asm):02199                 FCB     $2F,8,116   'BLE'
F050 8D0884           (        mon09.asm):02200                 FCB     $8D,8,132   'BSR'
F053 CF0000           (        mon09.asm):02201                 FCB     $CF,0,0     'FCB', UNKNOWN OPCODE
                      (        mon09.asm):02202         ;* OPERAND TABLE NUMBER TWO, $10 PREFIX INSTRUCTIONS
F056                  (        mon09.asm):02203         OPTAB2:
F056 830259           (        mon09.asm):02204                 FCB     $83,2,89    'CMPD'
F059 930359           (        mon09.asm):02205                 FCB     $93,3,89
F05C A30559           (        mon09.asm):02206                 FCB     $A3,5,89
F05F B30459           (        mon09.asm):02207                 FCB     $B3,4,89
F062 8C025A           (        mon09.asm):02208                 FCB     $8C,2,90    'CMPY'
F065 9C035A           (        mon09.asm):02209                 FCB     $9C,3,90
F068 AC055A           (        mon09.asm):02210                 FCB     $AC,5,90
F06B BC045A           (        mon09.asm):02211                 FCB     $BC,4,90
F06E CE025B           (        mon09.asm):02212                 FCB     $CE,2,91    'LDS'
F071 DE035B           (        mon09.asm):02213                 FCB     $DE,3,91
F074 EE055B           (        mon09.asm):02214                 FCB     $EE,5,91
F077 FE045B           (        mon09.asm):02215                 FCB     $FE,4,91
F07A 8E025C           (        mon09.asm):02216                 FCB     $8E,2,92    'LDY'
F07D 9E035C           (        mon09.asm):02217                 FCB     $9E,3,92
F080 AE055C           (        mon09.asm):02218                 FCB     $AE,5,92
F083 BE045C           (        mon09.asm):02219                 FCB     $BE,4,92
F086 DF035D           (        mon09.asm):02220                 FCB     $DF,3,93    'STS'
F089 EF055D           (        mon09.asm):02221                 FCB     $EF,5,93
F08C FF045D           (        mon09.asm):02222                 FCB     $FF,4,93
F08F 9F035E           (        mon09.asm):02223                 FCB     $9F,3,94    'STY'
F092 AF055E           (        mon09.asm):02224                 FCB     $AF,5,94
F095 BF045E           (        mon09.asm):02225                 FCB     $BF,4,94
F098 3F005F           (        mon09.asm):02226                 FCB     $3F,0,95    'SWI2'
F09B 210975           (        mon09.asm):02227                 FCB     $21,9,117   'LBRN'
F09E 220976           (        mon09.asm):02228                 FCB     $22,9,118   'LBHI'
F0A1 230977           (        mon09.asm):02229                 FCB     $23,9,119   'LBLS'
F0A4 240978           (        mon09.asm):02230                 FCB     $24,9,120   'LBCC'
F0A7 250979           (        mon09.asm):02231                 FCB     $25,9,121   'LBCS'
F0AA 26097A           (        mon09.asm):02232                 FCB     $26,9,122   'LBNE'
F0AD 27097B           (        mon09.asm):02233                 FCB     $27,9,123   'LBEQ'
F0B0 28097C           (        mon09.asm):02234                 FCB     $28,9,124   'LBVC'
F0B3 29097D           (        mon09.asm):02235                 FCB     $29,9,125   'LBVS'
F0B6 2A097E           (        mon09.asm):02236                 FCB     $2A,9,126   'LBPL'
F0B9 2B097F           (        mon09.asm):02237                 FCB     $2B,9,127   'LBMI'
F0BC 2C0980           (        mon09.asm):02238                 FCB     $2C,9,128   'LBGE'
F0BF 2D0981           (        mon09.asm):02239                 FCB     $2D,9,129   'LBLT'
F0C2 2E0982           (        mon09.asm):02240                 FCB     $2E,9,130   'LBGT'
F0C5 2F0983           (        mon09.asm):02241                 FCB     $2F,9,131   'LBLE'
F0C8 CF0100           (        mon09.asm):02242                 FCB     $CF,1,0
                      (        mon09.asm):02243         ;* OPERAND TABLE #3, $11 PREFIXES
F0CB                  (        mon09.asm):02244         OPTAB3:
F0CB 8C0260           (        mon09.asm):02245                 FCB     $8C,2,96    'CMPS'
F0CE 9C0360           (        mon09.asm):02246                 FCB     $9C,3,96
F0D1 AC0560           (        mon09.asm):02247                 FCB     $AC,5,96
F0D4 BC0460           (        mon09.asm):02248                 FCB     $BC,4,96
F0D7 830261           (        mon09.asm):02249                 FCB     $83,2,97    'CMPU'
F0DA 930361           (        mon09.asm):02250                 FCB     $93,3,97
F0DD A30561           (        mon09.asm):02251                 FCB     $A3,5,97
F0E0 B30461           (        mon09.asm):02252                 FCB     $B3,4,97
F0E3 3F0062           (        mon09.asm):02253                 FCB     $3F,0,98    'SWI3'
                      (        mon09.asm):02254         ;* INSTRUCTION TEXT TABLE
F0E6                  (        mon09.asm):02255         ITABLE:
F0E6 46434220         (        mon09.asm):02256                 FCC     'FCB '      0
F0EA 4C444120         (        mon09.asm):02257                 FCC     'LDA '      1
F0EE 4C444220         (        mon09.asm):02258                 FCC     'LDB '      2
F0F2 4C444420         (        mon09.asm):02259                 FCC     'LDD '      3
F0F6 4C445520         (        mon09.asm):02260                 FCC     'LDU '      4
F0FA 4C445820         (        mon09.asm):02261                 FCC     'LDX '      5
F0FE 53544120         (        mon09.asm):02262                 FCC     'STA '      6
F102 53544220         (        mon09.asm):02263                 FCC     'STB '      7
F106 53544420         (        mon09.asm):02264                 FCC     'STD '      8
F10A 53545520         (        mon09.asm):02265                 FCC     'STU '      9
F10E 53545820         (        mon09.asm):02266                 FCC     'STX '      10
F112 41425820         (        mon09.asm):02267                 FCC     'ABX '      11
F116 41444341         (        mon09.asm):02268                 FCC     'ADCA'      12
F11A 41444342         (        mon09.asm):02269                 FCC     'ADCB'      13
F11E 41444441         (        mon09.asm):02270                 FCC     'ADDA'      14
F122 41444442         (        mon09.asm):02271                 FCC     'ADDB'      15
F126 41444444         (        mon09.asm):02272                 FCC     'ADDD'      16
F12A 41534C41         (        mon09.asm):02273                 FCC     'ASLA'      17
F12E 41534C42         (        mon09.asm):02274                 FCC     'ASLB'      18
F132 41534C20         (        mon09.asm):02275                 FCC     'ASL '      19
F136 41535241         (        mon09.asm):02276                 FCC     'ASRA'      20
F13A 41535242         (        mon09.asm):02277                 FCC     'ASRB'      21
F13E 41535220         (        mon09.asm):02278                 FCC     'ASR '      22
F142 42495441         (        mon09.asm):02279                 FCC     'BITA'      23
F146 42495442         (        mon09.asm):02280                 FCC     'BITB'      24
F14A 434C5241         (        mon09.asm):02281                 FCC     'CLRA'      25
F14E 434C5242         (        mon09.asm):02282                 FCC     'CLRB'      26
F152 434C5220         (        mon09.asm):02283                 FCC     'CLR '      27
F156 434D5041         (        mon09.asm):02284                 FCC     'CMPA'      28
F15A 434D5042         (        mon09.asm):02285                 FCC     'CMPB'      29
F15E 434D5058         (        mon09.asm):02286                 FCC     'CMPX'      30
F162 434F4D41         (        mon09.asm):02287                 FCC     'COMA'      31
F166 434F4D42         (        mon09.asm):02288                 FCC     'COMB'      32
F16A 434F4D20         (        mon09.asm):02289                 FCC     'COM '      33
F16E 43574149         (        mon09.asm):02290                 FCC     'CWAI'      34
F172 44414120         (        mon09.asm):02291                 FCC     'DAA '      35
F176 44454341         (        mon09.asm):02292                 FCC     'DECA'      36
F17A 44454342         (        mon09.asm):02293                 FCC     'DECB'      37
F17E 44454320         (        mon09.asm):02294                 FCC     'DEC '      38
F182 454F5241         (        mon09.asm):02295                 FCC     'EORA'      39
F186 454F5242         (        mon09.asm):02296                 FCC     'EORB'      40
F18A 45584720         (        mon09.asm):02297                 FCC     'EXG '      41
F18E 54465220         (        mon09.asm):02298                 FCC     'TFR '      42
F192 50534853         (        mon09.asm):02299                 FCC     'PSHS'      43
F196 50534855         (        mon09.asm):02300                 FCC     'PSHU'      44
F19A 50554C53         (        mon09.asm):02301                 FCC     'PULS'      45
F19E 50554C55         (        mon09.asm):02302                 FCC     'PULU'      46
F1A2 494E4341         (        mon09.asm):02303                 FCC     'INCA'      47
F1A6 494E4342         (        mon09.asm):02304                 FCC     'INCB'      48
F1AA 494E4320         (        mon09.asm):02305                 FCC     'INC '      49
F1AE 4A4D5020         (        mon09.asm):02306                 FCC     'JMP '      50
F1B2 4A535220         (        mon09.asm):02307                 FCC     'JSR '      51
F1B6 4C454153         (        mon09.asm):02308                 FCC     'LEAS'      52
F1BA 4C454155         (        mon09.asm):02309                 FCC     'LEAU'      53
F1BE 4C454158         (        mon09.asm):02310                 FCC     'LEAX'      54
F1C2 4C454159         (        mon09.asm):02311                 FCC     'LEAY'      55
F1C6 4C535241         (        mon09.asm):02312                 FCC     'LSRA'      56
F1CA 4C535242         (        mon09.asm):02313                 FCC     'LSRB'      57
F1CE 4C535220         (        mon09.asm):02314                 FCC     'LSR '      58
F1D2 4D554C20         (        mon09.asm):02315                 FCC     'MUL '      59
F1D6 4E454741         (        mon09.asm):02316                 FCC     'NEGA'      60
F1DA 4E454742         (        mon09.asm):02317                 FCC     'NEGB'      61
F1DE 4E454720         (        mon09.asm):02318                 FCC     'NEG '      62
F1E2 4E4F5020         (        mon09.asm):02319                 FCC     'NOP '      63
F1E6 4F524120         (        mon09.asm):02320                 FCC     'ORA '      64
F1EA 4F524220         (        mon09.asm):02321                 FCC     'ORB '      65
F1EE 4F524343         (        mon09.asm):02322                 FCC     'ORCC'      66
F1F2 414E4441         (        mon09.asm):02323                 FCC     'ANDA'      67
F1F6 414E4442         (        mon09.asm):02324                 FCC     'ANDB'      68
F1FA 414E4443         (        mon09.asm):02325                 FCC     'ANDC'      69
F1FE 524F4C41         (        mon09.asm):02326                 FCC     'ROLA'      70
F202 524F4C42         (        mon09.asm):02327                 FCC     'ROLB'      71
F206 524F4C20         (        mon09.asm):02328                 FCC     'ROL '      72
F20A 524F5241         (        mon09.asm):02329                 FCC     'RORA'      73
F20E 524F5242         (        mon09.asm):02330                 FCC     'RORB'      74
F212 524F5220         (        mon09.asm):02331                 FCC     'ROR '      75
F216 52544920         (        mon09.asm):02332                 FCC     'RTI '      76
F21A 52545320         (        mon09.asm):02333                 FCC     'RTS '      77
F21E 53424341         (        mon09.asm):02334                 FCC     'SBCA'      78
F222 53424342         (        mon09.asm):02335                 FCC     'SBCB'      79
F226 53455820         (        mon09.asm):02336                 FCC     'SEX '      80
F22A 53554241         (        mon09.asm):02337                 FCC     'SUBA'      81
F22E 53554242         (        mon09.asm):02338                 FCC     'SUBB'      82
F232 53554244         (        mon09.asm):02339                 FCC     'SUBD'      83
F236 53574920         (        mon09.asm):02340                 FCC     'SWI '      84
F23A 53594E43         (        mon09.asm):02341                 FCC     'SYNC'      85
F23E 54535441         (        mon09.asm):02342                 FCC     'TSTA'      86
F242 54535442         (        mon09.asm):02343                 FCC     'TSTB'      87
F246 54535420         (        mon09.asm):02344                 FCC     'TST '      88
F24A 434D5044         (        mon09.asm):02345                 FCC     'CMPD'      89
F24E 434D5059         (        mon09.asm):02346                 FCC     'CMPY'      90
F252 4C445320         (        mon09.asm):02347                 FCC     'LDS '      91
F256 4C445920         (        mon09.asm):02348                 FCC     'LDY '      92
F25A 53545320         (        mon09.asm):02349                 FCC     'STS '      93
F25E 53545920         (        mon09.asm):02350                 FCC     'STY '      94
F262 53574932         (        mon09.asm):02351                 FCC     'SWI2'      95
F266 434D5053         (        mon09.asm):02352                 FCC     'CMPS'      96
F26A 434D5055         (        mon09.asm):02353                 FCC     'CMPU'      97
F26E 53574933         (        mon09.asm):02354                 FCC     'SWI3'      98
F272 4C425241         (        mon09.asm):02355                 FCC     'LBRA'      99
F276 4C425352         (        mon09.asm):02356                 FCC     'LBSR'      100
F27A 42524120         (        mon09.asm):02357                 FCC     'BRA '      101
F27E 42524E20         (        mon09.asm):02358                 FCC     'BRN '      102
F282 42484920         (        mon09.asm):02359                 FCC     'BHI '      103
F286 424C5320         (        mon09.asm):02360                 FCC     'BLS '      104
F28A 42434320         (        mon09.asm):02361                 FCC     'BCC '      105
F28E 42435320         (        mon09.asm):02362                 FCC     'BCS '      106
F292 424E4520         (        mon09.asm):02363                 FCC     'BNE '      107
F296 42455120         (        mon09.asm):02364                 FCC     'BEQ '      108
F29A 42564320         (        mon09.asm):02365                 FCC     'BVC '      109
F29E 42565320         (        mon09.asm):02366                 FCC     'BVS '      110
F2A2 42504C20         (        mon09.asm):02367                 FCC     'BPL '      111
F2A6 424D4920         (        mon09.asm):02368                 FCC     'BMI '      112
F2AA 42474520         (        mon09.asm):02369                 FCC     'BGE '      113
F2AE 424C5420         (        mon09.asm):02370                 FCC     'BLT '      114
F2B2 42475420         (        mon09.asm):02371                 FCC     'BGT '      115
F2B6 424C4520         (        mon09.asm):02372                 FCC     'BLE '      116
F2BA 4C42524E         (        mon09.asm):02373                 FCC     'LBRN'      117
F2BE 4C424849         (        mon09.asm):02374                 FCC     'LBHI'      118
F2C2 4C424C53         (        mon09.asm):02375                 FCC     'LBLS'      119
F2C6 4C424343         (        mon09.asm):02376                 FCC     'LBCC'      120
F2CA 4C424353         (        mon09.asm):02377                 FCC     'LBCS'      121
F2CE 4C424E45         (        mon09.asm):02378                 FCC     'LBNE'      122
F2D2 4C424551         (        mon09.asm):02379                 FCC     'LBEQ'      123
F2D6 4C425643         (        mon09.asm):02380                 FCC     'LBVC'      124
F2DA 4C425653         (        mon09.asm):02381                 FCC     'LBVS'      125
F2DE 4C42504C         (        mon09.asm):02382                 FCC     'LBPL'      126
F2E2 4C424D49         (        mon09.asm):02383                 FCC     'LBMI'      127
F2E6 4C424745         (        mon09.asm):02384                 FCC     'LBGE'      128
F2EA 4C424C54         (        mon09.asm):02385                 FCC     'LBLT'      129
F2EE 4C424754         (        mon09.asm):02386                 FCC     'LBGT'      130
F2F2 4C424C45         (        mon09.asm):02387                 FCC     'LBLE'      131
F2F6 42535220         (        mon09.asm):02388                 FCC     'BSR '      132
                      (        mon09.asm):02389         ;*
                      (        mon09.asm):02390         ;* CONDITIONAL TABLE, FIRST BYTE IS MASK, NEXT THREE BYTES ARE POSSIBLE
                      (        mon09.asm):02391         ;* BIT SETTINGS
                      (        mon09.asm):02392         ;*
F2FA                  (        mon09.asm):02393         CONTAB:
F2FA 05000000         (        mon09.asm):02394                 FCB     $05,$00,$00,$00 'BHI', NO C OR Z
F2FE 05010405         (        mon09.asm):02395                 FCB     $05,$01,$04,$05 'BLS', EITHER C OR Z
F302 01000000         (        mon09.asm):02396                 FCB     $01,$00,$00,$00 'BCC', NO C
F306 01010101         (        mon09.asm):02397                 FCB     $01,$01,$01,$01 'BCS', C SET
F30A 04000000         (        mon09.asm):02398                 FCB     $04,$00,$00,$00 'BNE', NO Z
F30E 04040404         (        mon09.asm):02399                 FCB     $04,$04,$04,$04 'BEQ', Z SET
F312 02000000         (        mon09.asm):02400                 FCB     $02,$00,$00,$00 'BVC', V CLEAR
F316 02020202         (        mon09.asm):02401                 FCB     $02,$02,$02,$02 'BVS', V SET
F31A 08000000         (        mon09.asm):02402                 FCB     $08,$00,$00,$00 'BPL', N CLEAR
F31E 08080808         (        mon09.asm):02403                 FCB     $08,$08,$08,$08 'BMI', N SET
F322 0A000A0A         (        mon09.asm):02404                 FCB     $0A,$00,$0A,$0A 'BGE', N=V
F326 0A080202         (        mon09.asm):02405                 FCB     $0A,$08,$02,$02 'BLT', N -= V
F32A 0E0A0000         (        mon09.asm):02406                 FCB     $0E,$0A,$00,$00 'BGT', N=V, Z=0
F32E 0E080204         (        mon09.asm):02407                 FCB     $0E,$08,$02,$04 'BLE', V-=N OR Z=1
F332 0C060E           (        mon09.asm):02408                 FCB     $0C,$06,$0E
                      (        mon09.asm):02409         ;* TRANSFER AND EXCHANGE REGISTER TABLE
F335                  (        mon09.asm):02410         TFREGT:
F335 BF0B             (        mon09.asm):02411                 FDB     SAVA
F337                  (        mon09.asm):02412         INDTAB:
F337 BF0E             (        mon09.asm):02413                 FDB     SAVX
F339 BF10             (        mon09.asm):02414                 FDB     SAVY
F33B BF12             (        mon09.asm):02415                 FDB     SAVU
F33D BF16             (        mon09.asm):02416                 FDB     SAVS
F33F BF14             (        mon09.asm):02417                 FDB     SAVPC
                      (        mon09.asm):02418         ;* PULL TABLE FOR PULS
F341                  (        mon09.asm):02419         PULSTAB:
F341 BF0A             (        mon09.asm):02420                 FDB     SAVCC
F343 BF0B             (        mon09.asm):02421                 FDB     SAVA
F345 BF0C             (        mon09.asm):02422                 FDB     SAVB
F347 BF0D             (        mon09.asm):02423                 FDB     SAVDP
F349 BF0E             (        mon09.asm):02424                 FDB     SAVX
F34B BF10             (        mon09.asm):02425                 FDB     SAVY
F34D BF12             (        mon09.asm):02426                 FDB     SAVU
F34F BF14             (        mon09.asm):02427                 FDB     SAVPC
                      (        mon09.asm):02428         ;* PULL TABLE FOR PULU
F351                  (        mon09.asm):02429         PULUTAB:
F351 BF0A             (        mon09.asm):02430                 FDB     SAVCC
F353 BF0B             (        mon09.asm):02431                 FDB     SAVA
F355 BF0C             (        mon09.asm):02432                 FDB     SAVB
F357 BF0D             (        mon09.asm):02433                 FDB     SAVDP
F359 BF0E             (        mon09.asm):02434                 FDB     SAVX
F35B BF10             (        mon09.asm):02435                 FDB     SAVY
F35D BF16             (        mon09.asm):02436                 FDB     SAVS
F35F BF14             (        mon09.asm):02437                 FDB     SAVPC
                      (        mon09.asm):02438         ;* VECTOR HANDLERS
F361                  (        mon09.asm):02439         SWI3:
F361 6E9FBF04         (        mon09.asm):02440                 JMP     [SWI3ADR]
F365                  (        mon09.asm):02441         SWI2:
F365 6E9FBF02         (        mon09.asm):02442                 JMP     [SWI2ADR]
F369                  (        mon09.asm):02443         IRQ:
F369 6E9FBF06         (        mon09.asm):02444                 JMP     [IRQADR]
F36D                  (        mon09.asm):02445         FIRQ:
F36D 6E9FBF08         (        mon09.asm):02446                 JMP     [FIRQADR]
                      (        mon09.asm):02447         ;* HELP TEXT
F371                  (        mon09.asm):02448         HTEXT:
F371 00               (        mon09.asm):02449                 FCB     0       NEW LINE TO START
F372 4352203C7265673E (        mon09.asm):02450                 FCN     'CR <reg> <data>|Change register'
     203C646174613E7C
     4368616E67652072
     6567697374657200
F392 4356203C7665633E (        mon09.asm):02451                 FCN     'CV <vec> <addr>|Change interrupt vector'
     203C616464723E7C
     4368616E67652069
     6E74657272757074
     20766563746F7200
F3BA 4449203C61646472 (        mon09.asm):02452                 FCN     'DI <addr>,<addr>|Display memory in assembly format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E20617373656D
     626C7920666F726D
     617400
F3ED 444D203C61646472 (        mon09.asm):02453                 FCN     'DM <addr>,<addr>|Display memory in hex dump format'
     3E2C3C616464723E
     7C446973706C6179
     206D656D6F727920
     696E206865782064
     756D7020666F726D
     617400
F420 44527C446973706C (        mon09.asm):02454                 FCN     'DR|Display processor registers'
     61792070726F6365
     73736F7220726567
     69737465727300
F43F 44567C446973706C (        mon09.asm):02455                 FCN     'DV|Display interrupt vectors'
     617920696E746572
     7275707420766563
     746F727300
F45C 45203C616464723E (        mon09.asm):02456                 FCN     'E <addr>|Edit memory'
     7C45646974206D65
     6D6F727900
F471 464D203C61646472 (        mon09.asm):02457                 FCN     'FM <addr>,<addr> <data>|Fill memory'
     3E2C3C616464723E
     203C646174613E7C
     46696C6C206D656D
     6F727900
F495 47205B3C61646472 (        mon09.asm):02458                 FCN     'G [<addr>]|Go (execute program)'
     3E5D7C476F202865
     7865637574652070
     726F6772616D2900
F4B5 4C7C4C6F61642061 (        mon09.asm):02459                 FCN     'L|Load an image into RAM from uart2'
     6E20696D61676520
     696E746F2052414D
     2066726F6D207561
     72743200
F4D9 4D4D203C61646472 (        mon09.asm):02460                 FCN     'MM <addr>,<addr> <addr>|Move memory'
     3E2C3C616464723E
     203C616464723E7C
     4D6F7665206D656D
     6F727900
F4FD 4D54203C61646472 (        mon09.asm):02461                 FCN     'MT <addr>,<addr>|Memory test'
     3E2C3C616464723E
     7C4D656D6F727920
     7465737400
F51A 5252203C61646472 (        mon09.asm):02462                 FCN     'RR <addr>|Repeating READ access'
     3E7C526570656174
     696E672052454144
     2061636365737300
F53A 5257203C61646472 (        mon09.asm):02463                 FCN     'RW <addr> <data>|Repeating WRITE access'
     3E203C646174613E
     7C52657065617469
     6E67205752495445
     2061636365737300
F562 57203C616464723E (        mon09.asm):02464                 FCN     'W <addr> <data>|Write to memory'
     203C646174613E7C
     577269746520746F
     206D656D6F727900
F582 5852203C61646472 (        mon09.asm):02465                 FCN     'XR <addr>|Repeating 16 bit read'
     3E7C526570656174
     696E672031362062
     6974207265616400
F5A2 5857203C61646472 (        mon09.asm):02466                 FCN     'XW <addr> <word>|Repeating 16 bit write'
     3E203C776F72643E
     7C52657065617469
     6E67203136206269
     7420777269746500
F5CA 2B203C76616C7565 (        mon09.asm):02467                 FCN     '+ <value>+<value>|Hexidecimal addition'
     3E2B3C76616C7565
     3E7C486578696465
     63696D616C206164
     646974696F6E00
F5F1 2D203C76616C7565 (        mon09.asm):02468                 FCN     '- <value>-<value>|Hexidecimal subtraction'
     3E2D3C76616C7565
     3E7C486578696465
     63696D616C207375
     627472616374696F
     6E00
F61B FF               (        mon09.asm):02469                 FCB     -1      END OF TABLE
                      (        mon09.asm):02470         
                      (        mon09.asm):02471         ;*
                      (        mon09.asm):02472         ;* MACHINE DEPENDANT I/O ROUTINES FOR 16C550 UART
                      (        mon09.asm):02473         ;*
F61C                  (        mon09.asm):02474         INIT:
F61C 8680             (        mon09.asm):02475                 LDA     #$80                              ;
F61E B7DF5B           (        mon09.asm):02476                 STA     MONUART3                          ; SET DLAB FLAG
F621 860C             (        mon09.asm):02477                 LDA     #12                               ; SET TO 12 = 9600 BAUD
F623 B7DF58           (        mon09.asm):02478                 STA     MONUART0                          ; save baud rate
F626 8600             (        mon09.asm):02479                 LDA     #00                               ;
F628 B7DF59           (        mon09.asm):02480                 STA     MONUART1                          ;
F62B 8603             (        mon09.asm):02481                 LDA     #03                               ;
F62D B7DF5B           (        mon09.asm):02482                 STA     MONUART3                          ; SET 8 BIT DATA, 1 STOPBIT
F630 39               (        mon09.asm):02483                 RTS
                      (        mon09.asm):02484         ;* READ UART
F631                  (        mon09.asm):02485         READ:
F631 B6DF5D           (        mon09.asm):02486                 LDA     MONUART5                          ; READ LINE STATUS REGISTER
F634 8401             (        mon09.asm):02487                 ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
F636 8100             (        mon09.asm):02488                 CMPA    #$00
F638 2704             (        mon09.asm):02489                 BEQ     NOCHR
F63A B6DF58           (        mon09.asm):02490                 LDA     MONUART0                          ; THEN READ THE CHAR FROM THE UART
F63D 39               (        mon09.asm):02491                 RTS
F63E                  (        mon09.asm):02492         NOCHR:
F63E 86FF             (        mon09.asm):02493                 LDA     #$FF                              ; NO CHAR
F640 39               (        mon09.asm):02494                 RTS
                      (        mon09.asm):02495         ;* WRITE UART
F641                  (        mon09.asm):02496         WRITE:
F641 F6DF5D           (        mon09.asm):02497                 LDB     MONUART5                          ; READ LINE STATUS REGISTER
F644 C420             (        mon09.asm):02498                 ANDB    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
F646 C100             (        mon09.asm):02499                 CMPB    #$00
F648 27F7             (        mon09.asm):02500                 BEQ     WRITE                             ; IF NOT REPEAT
F64A B7DF58           (        mon09.asm):02501                 STA     MONUART0                          ; THEN WRITE THE CHAR TO UART
F64D 39               (        mon09.asm):02502                 RTS
                      (        mon09.asm):02503         
                      (        mon09.asm):02504         ;*
                      (        mon09.asm):02505         ;* MACHINE VECTORS
                      (        mon09.asm):02506         ;*
                      (        mon09.asm):02507                 ORG     $FFF2
FFF2 F361             (        mon09.asm):02508                 FDB     SWI3
FFF4 F365             (        mon09.asm):02509                 FDB     SWI2
FFF6 F36D             (        mon09.asm):02510                 FDB     FIRQ
FFF8 F369             (        mon09.asm):02511                 FDB     IRQ
FFFA ED12             (        mon09.asm):02512                 FDB     SWIHND
FFFC ECE7             (        mon09.asm):02513                 FDB     NMIHND
FFFE E000             (        mon09.asm):02514                 FDB     RESET

Symbol Table:
[ G] BADOPC                           EAE1
[ G] BANK00                           DF50
[ G] BANK40                           DF51
[ G] BANK80                           DF52
[ G] BANKC0                           DF53
[ G] BRKREG                           ED6E
[ G] BRKRES                           ED71
[ G] BRKTAB                           BF1F
[ G] BSAVOF                           E9DA
[ G] CCBITS                           E404
[ G] CHG1                             E417
[ G] CHG2                             E423
[ G] CHG3                             E454
[ G] CHG4                             E43A
[ G] CHGREG                           E40C
[ G] CHGTAB                           E457
[ G] CHGV1                            E369
[ G] CHGV2                            E371
[ G] CHGV3                            E377
[ G] CHGV4                            E382
[ G] CHGVEC                           E35E
[ G] CHKC1                            E828
[ G] CHKC3                            E83B
[ G] CHKCHR                           E81F
[ G] CLRRAM                           E020
[ G] CMDTAB                           E1DE
[ G] CONTAB                           F2FA
[ G] DEC1                             EBC8
[ G] DIRECT                           EB20
[ G] DISA1                            EAB7
[ G] DISASM                           E305
[ G] DISASS                           EAAE
[ G] DISREG                           E390
[ G] DISS1                            E313
[ G] DISS2                            E326
[ G] DISV1                            E32E
[ G] DISVEC                           E327
[ G] DJMPDI                           E96B
[ G] DJMPEX                           E95B
[ G] DJMPIN                           E987
[ G] DLEOF                            E6B0
[ G] DLINT                            E6B1
[ G] DLINT1                           E6E7
[ G] DLMOT                            E64A
[ G] DLMOT1                           E682
[ G] DLO1                             E62F
[ G] DLO2                             E63C
[ G] DLOAD                            E63F
[ G] DLRTS                            E6AE
[ G] DOPUL                            E92E
[ G] DOPUL1                           E932
[ G] DOPUL2                           E949
[ G] DOPUL3                           E945
[ G] DSPBUF                           BF37
[ G] END1                             EC91
[ G] END2                             EC9F
[ G] END3                             ECA9
[ G] END4                             ECBC
[ G] END5                             ECB6
[ G] END6                             ECB8
[ G] ENDIS                            EC7B
[ G] ENDIS1                           EB36
[ G] ERROR                            E1D6
[ G] EVL1                             EB62
[ G] EVL2                             EB6D
[ G] EVL3                             EB75
[ G] EVL4                             EB7D
[ G] EVL5                             EB87
[ G] EVL6                             EB92
[ G] EVL7                             EB9D
[ G] EVLEND                           EBE4
[ G] EVLFIN                           EBE6
[ G] EVLX1                            EB5D
[ G] EXTEND                           EB2E
[ G] FILL1                            E23D
[ G] FILMEM                           E22F
[ G] FIRQ                             F36D
[ G] FIRQADR                          BF08
[ G] FNDO1                            EAF8
[ G] FNDO2                            EAFF
[ G] FNDOPC                           EAE5
[ G] GETAD1                           E741
[ G] GETAD2                           E74D
[ G] GETAD3                           E74E
[ G] GETAD4                           E773
[ G] GETAD5                           E77F
[ G] GETADR                           E73A
[ G] GETB1                            E795
[ G] GETB2                            E793
[ G] GETB3                            E796
[ G] GETB4                            E791
[ G] GETBYT                           E781
[ G] GETC1                            E80F
[ G] GETCHR                           E80D
[ G] GETECH                           E7ED
[ G] GETERR                           E73E
[ G] GETN1                            E7B6
[ G] GETN2                            E7B9
[ G] GETNIB                           E7A3
[ G] GETPC                            E705
[ G] GETPC1                           E719
[ G] GETRNG                           E71D
[ G] GOEX3                            E46F
[ G] GOEX4                            E47C
[ G] GOEXEC                           E461
[ G] HELP                             E5FE
[ G] HEXADD                           E5CB
[ G] HEXOUT                           E7C0
[ G] HEXSHO                           E5EF
[ G] HEXSUB                           E5DC
[ G] HLP1                             E601
[ G] HLP2                             E603
[ G] HLP3                             E611
[ G] HLP4                             E61F
[ G] HLP5                             E62B
[ G] HOUT                             E7CA
[ G] HOUT1                            E7D4
[ G] HTEXT                            F371
[ G] IMM16                            EB17
[ G] IMM8                             EB11
[ G] INC1                             EBF7
[ G] INDEX                            EB39
[ G] INDTAB                           F337
[ G] INIT                             F61C
[ G] INSR1                            EB85
[ G] INSRAM                           BF69
[ G] INSREG                           EBB3
[ G] INSTYP                           BF1D
[ G] IRQ                              F369
[ G] IRQADR                           BF06
[ G] ITABLE                           F0E6
[ G] JMPDIR                           E967
[ G] JMPEXT                           E957
[ G] JMPIND                           E981
[ G] JSRDIR                           E95F
[ G] JSREXT                           E94F
[ G] JSRIND                           E972
[ G] LBRAN                            EC72
[ G] LBRAN1                           E87D
[ G] LBRANS                           E883
[ G] LCBRAN                           E863
[ G] LFC1                             E809
[ G] LFCR                             E801
[ G] LOAD                             E62C
[ G] LOBRAN                           E879
[ G] LODERR                           E69B
[ G] LOK1                             E8DA
[ G] LOK2                             E8CF
[ G] LOKREG                           E8C2
[ G] LOOK1                            E1AC
[ G] LOOK2                            E1B8
[ G] LOOK3                            E1CF
[ G] LOOKC                            E1A6
[ G] MAIN                             E198
[ G] MEM1                             E267
[ G] MEM2                             E27A
[ G] MEM3                             E284
[ G] MEM4                             E28E
[ G] MEM5                             E298
[ G] MEM6                             E2A2
[ G] MEM7                             E2A4
[ G] MEMORY                           E261
[ G] MONITOR                          E02E
[ G] MONUART0                         DF58
[ G] MONUART1                         DF59
[ G] MONUART2                         DF5A
[ G] MONUART3                         DF5B
[ G] MONUART4                         DF5C
[ G] MONUART5                         DF5D
[ G] MONUART6                         DF5E
[ G] MONUART7                         DF5F
[ G] MOVM1                            E255
[ G] MOVMEM                           E247
[ G] NINXIN                           EA2C
[ G] NMIH1                            ECEC
[ G] NMIHND                           ECE7
[ G] NO5BO                            EB49
[ G] NOCHR                            F63E
[ G] NODEC                            EBCA
[ G] NOINC                            EBF9
[ G] NOIND                            EB51
[ G] NOIND1                           EC06
[ G] NORE1                            EA35
[ G] NORE2                            EA41
[ G] NORE3                            EA6C
[ G] NOREXE                           EA30
[ G] NOT5BO                           E9AE
[ G] OP16                             EB31
[ G] OP8                              EB27
[ G] OPFIND                           EAD3
[ G] OPFNXT                           EAD1
[ G] OPTAB1                           EDBC
[ G] OPTAB2                           F056
[ G] OPTAB3                           F0CB
[ G] PCRG                             ED87
[ G] POSBYT                           BF1E
[ G] PSH1                             EC11
[ G] PSH2                             EC2A
[ G] PSH3                             EC3E
[ G] PSH4                             EC23
[ G] PSHNXT                           EC39
[ G] PSHPC                            E978
[ G] PSHPUL                           EC09
[ G] PSHTAB                           EDAB
[ G] PTRSAV                           BF1B
[ G] PUL16                            E941
[ G] PULSTAB                          F341
[ G] PULUTAB                          F351
[ G] PUTCHR                           E818
[ G] R16                              E448
[ G] R17                              E44F
[ G] RAM                              BF00
[ G] RAM0                             E50B
[ G] RAM1                             E512
[ G] RAM2                             E532
[ G] RAM3                             E540
[ G] RAM4                             E549
[ G] RAM5                             E553
[ G] RAM6                             E559
[ G] RAM7                             E58C
[ G] RAM8                             E5BF
[ G] RAMTEST                          E4FA
[ G] RBITS                            E3AE
[ G] RDLOOP                           E4A0
[ G] RDLP1                            E4A8
[ G] READ                             F631
[ G] REGB1                            E3A7
[ G] REGTAB                           ED8B
[ G] REGTXT                           E3DA
[ G] RESET                            E000
[ G] ROM                              E000
[ G] RSUB1                            E3CA
[ G] RSUB2                            E3D2
[ G] RSVREG                           EA07
[ G] SAIREG                           EB83
[ G] SAVA                             BF0B
[ G] SAVADR                           EC78
[ G] SAVB                             BF0C
[ G] SAVCC                            BF0A
[ G] SAVDP                            BF0D
[ G] SAVNPC                           E8B7
[ G] SAVPC                            BF14
[ G] SAVS                             BF16
[ G] SAVSTK                           E8AD
[ G] SAVU                             BF12
[ G] SAVX                             BF0E
[ G] SAVXPC                           EA24
[ G] SAVY                             BF10
[ G] SBRAN                            EC67
[ G] SBRAN1                           E89F
[ G] SBRANS                           E8A5
[ G] SCOBRA                           E88D
[ G] SETOP2                           EACE
[ G] SHBRAN                           E89B
[ G] SINOK                            E9AA
[ G] SPACE                            E7FB
[ G] STACK                            BFF0
[ G] STDPC                            E908
[ G] STEP                             E850
[ G] STEPCE                           E85A
[ G] STEPDI                           E83F
[ G] STPFLG                           BF1A
[ G] SUBM1                            E2C7
[ G] SUBM2                            E2D1
[ G] SUBM3                            E2E5
[ G] SUBM4                            E2EC
[ G] SUBM5                            E2FB
[ G] SUBMEM                           E2C2
[ G] SWI2                             F365
[ G] SWI2ADR                          BF02
[ G] SWI3                             F361
[ G] SWI3ADR                          BF04
[ G] SWIADR                           BF00
[ G] SWIHN1                           ED1C
[ G] SWIHN2                           ED30
[ G] SWIHN25                          ED38
[ G] SWIHN3                           ED76
[ G] SWIHN4                           ED7F
[ G] SWIHND                           ED12
[ G] TADEC1                           E9F9
[ G] TADEC2                           EA01
[ G] TAINC1                           E9E9
[ G] TAINC2                           E9F1
[ G] TEIND                            EA22
[ G] TEMP                             BF18
[ G] TFREGT                           F335
[ G] TFRET                            EC66
[ G] TFREXG                           EC41
[ G] TFRREG                           EC57
[ G] TOFF16                           E9C0
[ G] TOFF8                            E9B8
[ G] TOFFA                            E9CA
[ G] TOFFB                            E9D3
[ G] TOFFD                            E9DE
[ G] TPCO16                           EA18
[ G] TPCO8                            EA0E
[ G] TPULS                            E90C
[ G] TPULU                            E91D
[ G] TSTC0                            EA94
[ G] TSTC1                            EAA2
[ G] TSTC2                            EAAC
[ G] TSTCON                           EA8C
[ G] TSTE1                            E8F6
[ G] TSTE2                            E8F8
[ G] TSTEXG                           E8DF
[ G] TSTRTS                           E8FC
[ G] TSTTFR                           E8BB
[ G] VECTXT                           E33D
[ G] WRDOUT                           E7BC
[ G] WRHEX                            ECD0
[ G] WRHEX1                           ECCE
[ G] WRHEXB                           ECBE
[ G] WRHEXN                           ECDA
[ G] WRHEXW                           ECC6
[ G] WRIMEM                           E2B2
[ G] WRITE                            F641
[ G] WRLIN                            E7E0
[ G] WRLND                            E7EC
[ G] WRLOOP                           E4B0
[ G] WRLP1                            E4C4
[ G] WRMSG                            E7D6
[ G] WRNOK                            ECE4
[ G] WRPCRG                           EBA6
[ G] WRPR1                            EBA9
[ G] XRLOOP                           E4CF
[ G] XRLP1                            E4D7
[ G] XSAVPC                           EA0C
[ G] XWLOOP                           E4DF
[ G] XWLP1                            E4EF
